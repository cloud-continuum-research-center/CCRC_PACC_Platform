{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"project-list-container\"\n};\nconst _hoisted_3 = {\n  class: \"chart-list-container\"\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode($setup[\"ProjectList\"])]), _createElementVNode(\"div\", _hoisted_3, [_createVNode($setup[\"ChartList\"], {\n    chartNames: ['Memory Usage', 'Disk Usage'],\n    onChartSelected: $setup.handleChartSelection\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" Here we use the slot to render the selected chart \"), $setup.selectedChart === 'Memory Usage' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNodes, node => {\n      return _openBlock(), _createBlock($setup[\"MemoryGauge\"], {\n        key: node.id,\n        nodeName: node.name,\n        totalSize: node.total_memory_mb,\n        remainingSize: $setup.nodeFreeMemories[node.name]\n      }, null, 8 /* PROPS */, [\"nodeName\", \"totalSize\", \"remainingSize\"]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), $setup.selectedChart === 'Disk Usage' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNodes, node => {\n      return _openBlock(), _createBlock($setup[\"DiskGauge\"], {\n        key: node.id,\n        nodeName: node.name,\n        totalSize: node.total_disk_mb,\n        remainingSize: $setup.nodeFreeDisk[node.name]\n      }, null, 8 /* PROPS */, [\"nodeName\", \"totalSize\", \"remainingSize\"]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","$setup","_hoisted_3","chartNames","onChartSelected","handleChartSelection","default","_withCtx","_createCommentVNode","selectedChart","_hoisted_4","_Fragment","_renderList","filteredNodes","node","_createBlock","id","nodeName","name","totalSize","total_memory_mb","remainingSize","nodeFreeMemories","_hoisted_5","total_disk_mb","nodeFreeDisk","_"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport { onMounted, onUnmounted, computed, ref } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport ProjectList from './components/ProjectsList.vue';\r\nimport ChartList from './components/ChartList.vue';\r\nimport MemoryGauge from './components/MemoryGaugeComponent.vue';\r\nimport DiskGauge from './components/DiskGaugeComponent.vue';\r\n\r\n\r\nconst store = useStore();\r\n\r\nconst selectedChart = ref('');\r\n\r\n// Function to handle chart selection\r\nconst handleChartSelection = (chartName) => {\r\n  selectedChart.value = chartName; // Update the selected chart\r\n};\r\n\r\n// Computed property for nodes filtered by the selected project\r\nconst filteredNodes = computed(() => store.getters.userNodes.filter(node =>\r\n  store.state.selectedProjectNodeNames.includes(node.name)\r\n));\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach(node => {\r\n    memories[node.name] = store.getters.getNodeMemory(node.name) || 0;\r\n  });\r\n  return memories;\r\n});\r\n\r\nconst nodeFreeDisk = computed(() => {\r\n  const disks = {};\r\n  filteredNodes.value.forEach(node => {\r\n    disks[node.name] = store.getters.getNodeDisk(node.name) || 0;\r\n  });\r\n  return disks;\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <div class=\"chart-list-container\">\r\n    <ChartList :chartNames=\"['Memory Usage', 'Disk Usage']\" @chart-selected=\"handleChartSelection\">\r\n      <!-- Here we use the slot to render the selected chart -->\r\n      <div v-if=\"selectedChart === 'Memory Usage'\">\r\n        <MemoryGauge\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"node.id\"\r\n          :nodeName=\"node.name\"\r\n          :totalSize=\"node.total_memory_mb\"\r\n          :remainingSize=\"nodeFreeMemories[node.name]\"\r\n        />\r\n      </div>\r\n      <div v-if=\"selectedChart === 'Disk Usage'\">\r\n        <DiskGauge\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"node.id\"\r\n          :nodeName=\"node.name\"\r\n          :totalSize=\"node.total_disk_mb\"\r\n          :remainingSize=\"nodeFreeDisk[node.name]\"\r\n        />\r\n      </div>\r\n    </ChartList>\r\n  </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.project-list-container {\r\n  flex-basis: 100%;\r\n  max-width: 100%;\r\n}\r\n\r\n.memory-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.memory-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.memory-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(50% - 30px); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(50% - 30px); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.disk-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.disk-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.disk-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(50% - 30px); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(50% - 30px); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style>"],"mappings":";;EA4EOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAwB;;EAG9BA,KAAK,EAAC;AAAsB;;EAhFrCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBA4EEC,mBAAA,CA2BM,OA3BNC,UA2BM,GA1BJC,mBAAA,CAEM,OAFNC,UAEM,GADJC,YAAA,CAAeC,MAAA,iB,GAEjBH,mBAAA,CAsBI,OAtBJI,UAsBI,GArBJF,YAAA,CAoBYC,MAAA;IApBAE,UAAU,EAAE,8BAA8B;IAAGC,eAAc,EAAEH,MAAA,CAAAI;;IAjF7EC,OAAA,EAAAC,QAAA,CAkFM,MAA0D,CAA1DC,mBAAA,uDAA0D,EAC/CP,MAAA,CAAAQ,aAAa,uB,cAAxBb,mBAAA,CAQM,OA3FZc,UAAA,I,kBAoFQd,mBAAA,CAMEe,SAAA,QA1FVC,WAAA,CAqFyBX,MAAA,CAAAY,aAAa,EAArBC,IAAI;2BADbC,YAAA,CAMEd,MAAA;QAJCN,GAAG,EAAEmB,IAAI,CAACE,EAAE;QACZC,QAAQ,EAAEH,IAAI,CAACI,IAAI;QACnBC,SAAS,EAAEL,IAAI,CAACM,eAAe;QAC/BC,aAAa,EAAEpB,MAAA,CAAAqB,gBAAgB,CAACR,IAAI,CAACI,IAAI;;wCAzFpDV,mBAAA,gBA4FiBP,MAAA,CAAAQ,aAAa,qB,cAAxBb,mBAAA,CAQM,OApGZ2B,UAAA,I,kBA6FQ3B,mBAAA,CAMEe,SAAA,QAnGVC,WAAA,CA8FyBX,MAAA,CAAAY,aAAa,EAArBC,IAAI;2BADbC,YAAA,CAMEd,MAAA;QAJCN,GAAG,EAAEmB,IAAI,CAACE,EAAE;QACZC,QAAQ,EAAEH,IAAI,CAACI,IAAI;QACnBC,SAAS,EAAEL,IAAI,CAACU,aAAa;QAC7BH,aAAa,EAAEpB,MAAA,CAAAwB,YAAY,CAACX,IAAI,CAACI,IAAI;;wCAlGhDV,mBAAA,e;IAAAkB,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}