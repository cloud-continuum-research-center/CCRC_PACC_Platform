{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3abaaa38\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"node-selector-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"node-header\"\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Node Selection\")], -1));\nconst _hoisted_3 = {\n  class: \"node-content\"\n};\nconst _hoisted_4 = {\n  class: \"node-list\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"node-description\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = {\n  key: 1\n};\nconst _hoisted_9 = {\n  key: 1,\n  class: \"node-description\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Select a node to see its description.\", -1));\nconst _hoisted_11 = [_hoisted_10];\nconst _hoisted_12 = {\n  class: \"selected-nodes\"\n};\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Selected Nodes\", -1));\nimport { ref, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'NodeSelector',\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => [] // Provide a default empty array\n    }\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const store = useStore();\n    const nodes = computed(() => {\n      const unsortedNodes = store.getters.userNodes || [];\n      return unsortedNodes.sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically by name\n    });\n    const props = __props;\n    const isNodeSelected = node => {\n      return props.modelValue.some(selectedNode => selectedNode.node_id === node.node_id);\n    };\n    const emit = __emit;\n    onMounted(async () => {\n      await store.dispatch(\"fetchNodes\"); // 노드 정보 가져와서 마운트하기.\n    });\n    const selectedNode = ref(null);\n    const toggleNodeSelection = node => {\n      if (node.status !== 0) {\n        // If the node is not in a waiting state, display its details without selecting it\n        selectedNode.value = node;\n        console.error(\"Node is not in a waiting state and cannot be selected.\");\n        return; // Exit early without changing the selection\n      }\n      const isSelected = props.modelValue.some(selectedNode => selectedNode.node_id === node.node_id);\n      let newSelectedNodes = isSelected ? props.modelValue.filter(selectedNode => selectedNode.node_id !== node.node_id) : [...props.modelValue, node];\n      emit(\"update:modelValue\", newSelectedNodes);\n\n      // Set or unset the selectedNode for displaying details\n      selectedNode.value = isSelected ? null : node;\n    };\n    const nodeStatusDescription = status => {\n      const statusMap = {\n        0: \"대기중\",\n        1: \"학습중\",\n        2: \"학습완료\"\n      };\n      return statusMap[status] || \"Unknown status\";\n    };\n    const sortedSelectedNodes = computed(() => {\n      if (!Array.isArray(props.modelValue)) {\n        return []; // Return an empty array if props.modelValue is not an array\n      }\n      // Proceed with sorting if props.modelValue is an array\n      return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(nodes.value, node => {\n        return _openBlock(), _createElementBlock(\"li\", {\n          key: node.id,\n          onClick: $event => toggleNodeSelection(node),\n          class: _normalizeClass({\n            selected: isNodeSelected(node)\n          })\n        }, _toDisplayString(node.name), 11, _hoisted_5);\n      }), 128))])]), selectedNode.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"h4\", null, _toDisplayString(selectedNode.value.name) + \" 설명\", 1), _createElementVNode(\"p\", null, \"CPU Core Count: \" + _toDisplayString(selectedNode.value.cpu_core_count), 1), _createElementVNode(\"p\", null, \"Total Memory: \" + _toDisplayString(selectedNode.value.total_memory_mb) + \" MB\", 1), _createElementVNode(\"p\", null, \"Total Disk: \" + _toDisplayString(selectedNode.value.total_disk_mb) + \" MB\", 1), _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString(nodeStatusDescription(selectedNode.value.status)), 1), selectedNode.value.instance ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, \" Instance: \" + _toDisplayString(selectedNode.value.instance), 1)) : _createCommentVNode(\"\", true), selectedNode.value.gpu_info ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \" GPU Info: \" + _toDisplayString(selectedNode.value.gpu_info), 1)) : _createCommentVNode(\"\", true)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_9, _hoisted_11)), _createElementVNode(\"div\", _hoisted_12, [_hoisted_13, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(sortedSelectedNodes.value, node => {\n        return _openBlock(), _createElementBlock(\"li\", {\n          key: node.id\n        }, _toDisplayString(node.name), 1);\n      }), 128))])])])]);\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","store","nodes","unsortedNodes","getters","userNodes","sort","a","b","name","localeCompare","props","__props","isNodeSelected","node","modelValue","some","selectedNode","node_id","emit","__emit","dispatch","toggleNodeSelection","status","value","console","error","isSelected","newSelectedNodes","filter","nodeStatusDescription","statusMap","sortedSelectedNodes","Array","isArray"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/NodeSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"node-selector-container\">\r\n    <!-- Header above the entire container -->\r\n    <div class=\"node-header\">\r\n      <h2>Node Selection</h2>\r\n    </div>\r\n    <!-- Main content area for node selection -->\r\n    <div class=\"node-content\">\r\n      <!-- Node list on the far left -->\r\n      <div class=\"node-list\">\r\n        <ul>\r\n          <li\r\n            v-for=\"node in nodes\"\r\n            :key=\"node.id\"\r\n            @click=\"toggleNodeSelection(node)\"\r\n            :class=\"{ selected: isNodeSelected(node) }\"\r\n          >\r\n            {{ node.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"node-description\" v-if=\"selectedNode\">\r\n        <h4>{{ selectedNode.name }} 설명</h4>\r\n        <!-- Display additional node details -->\r\n        <p>CPU Core Count: {{ selectedNode.cpu_core_count }}</p>\r\n        <p>Total Memory: {{ selectedNode.total_memory_mb }} MB</p>\r\n        <p>Total Disk: {{ selectedNode.total_disk_mb }} MB</p>\r\n        <p>Status: {{ nodeStatusDescription(selectedNode.status) }}</p>\r\n        <p v-if=\"selectedNode.instance\">\r\n          Instance: {{ selectedNode.instance }}\r\n        </p>\r\n        <p v-if=\"selectedNode.gpu_info\">\r\n          GPU Info: {{ selectedNode.gpu_info }}\r\n        </p>\r\n      </div>\r\n      <div class=\"node-description\" v-else>\r\n        <p>Select a node to see its description.</p>\r\n      </div>\r\n\r\n      <!-- List of selected nodes on the far right -->\r\n      <div class=\"selected-nodes\">\r\n        <h3>Selected Nodes</h3>\r\n        <ul>\r\n          <li v-for=\"node in sortedSelectedNodes\" :key=\"node.id\">\r\n            {{ node.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, defineEmits, computed, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst nodes = computed(() => {\r\n  const unsortedNodes = store.getters.userNodes || [];\r\n  return unsortedNodes.sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically by name\r\n});\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: Array,\r\n    default: () => [], // Provide a default empty array\r\n  },\r\n});\r\n\r\nconst isNodeSelected = (node) => {\r\n  return props.modelValue.some(\r\n    (selectedNode) => selectedNode.node_id === node.node_id,\r\n  );\r\n};\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nonMounted(async () => {\r\n  await store.dispatch(\"fetchNodes\"); // 노드 정보 가져와서 마운트하기.\r\n});\r\n\r\nconst selectedNode = ref(null);\r\n\r\nconst toggleNodeSelection = (node) => {\r\n  if (node.status !== 0) {\r\n    // If the node is not in a waiting state, display its details without selecting it\r\n    selectedNode.value = node;\r\n    console.error(\"Node is not in a waiting state and cannot be selected.\");\r\n    return; // Exit early without changing the selection\r\n  }\r\n\r\n  const isSelected = props.modelValue.some(\r\n    (selectedNode) => selectedNode.node_id === node.node_id,\r\n  );\r\n  let newSelectedNodes = isSelected\r\n    ? props.modelValue.filter(\r\n        (selectedNode) => selectedNode.node_id !== node.node_id,\r\n      )\r\n    : [...props.modelValue, node];\r\n\r\n  emit(\"update:modelValue\", newSelectedNodes);\r\n\r\n  // Set or unset the selectedNode for displaying details\r\n  selectedNode.value = isSelected ? null : node;\r\n};\r\n\r\nconst nodeStatusDescription = (status) => {\r\n  const statusMap = {\r\n    0: \"대기중\",\r\n    1: \"학습중\",\r\n    2: \"학습완료\",\r\n  };\r\n  return statusMap[status] || \"Unknown status\";\r\n};\r\n\r\nconst sortedSelectedNodes = computed(() => {\r\n  if (!Array.isArray(props.modelValue)) {\r\n    return []; // Return an empty array if props.modelValue is not an array\r\n  }\r\n  // Proceed with sorting if props.modelValue is an array\r\n  return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.node-selector-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid #ddd;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n}\r\n\r\n.node-header {\r\n  padding: 10px 20px;\r\n  background-color: #f5f5f5;\r\n  text-align: left;\r\n  font-size: 1.25rem;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.node-content {\r\n  display: flex;\r\n}\r\n\r\n.node-list,\r\n.node-description,\r\n.selected-nodes {\r\n  padding: 20px;\r\n  flex-basis: 33.3333%;\r\n  flex-grow: 1;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.node-list ul,\r\n.selected-nodes ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.node-list li,\r\n.selected-nodes li {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.node-list li:hover,\r\n.node-list li.selected,\r\n.selected-nodes li:hover {\r\n  background-color: #b1f397;\r\n}\r\n\r\n/* Remove border from the last element of the main content */\r\n.selected-nodes {\r\n  border-right: none;\r\n}\r\n\r\n/* Optional: Add some responsive styling */\r\n@media (max-width: 768px) {\r\n  .node-content {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .node-list,\r\n  .node-description,\r\n  .selected-nodes {\r\n    border-right: none;\r\n    border-bottom: 1px solid #ddd;\r\n    flex-basis: auto;\r\n  }\r\n\r\n  .selected-nodes {\r\n    border-bottom: none;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,SAASA,GAA6B,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,KAAK;AACxE,SAASC,QAAQ,QAAQ,MAAM;;;;;;;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IAExB,MAAME,KAAK,GAAGJ,QAAQ,CAAC,MAAM;MAC3B,MAAMK,aAAa,GAAGF,KAAK,CAACG,OAAO,CAACC,SAAS,IAAI,EAAE;MACnD,OAAOF,aAAa,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC;IAEF,MAAME,KAAK,GAAGC,OAKZ;IAEF,MAAMC,cAAc,GAAIC,IAAI,IAAK;MAC/B,OAAOH,KAAK,CAACI,UAAU,CAACC,IAAI,CACzBC,YAAY,IAAKA,YAAY,CAACC,OAAO,KAAKJ,IAAI,CAACI,OAClD,CAAC;IACH,CAAC;IAED,MAAMC,IAAI,GAAGC,MAAkC;IAE/CrB,SAAS,CAAC,YAAY;MACpB,MAAME,KAAK,CAACoB,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,MAAMJ,YAAY,GAAGpB,GAAG,CAAC,IAAI,CAAC;IAE9B,MAAMyB,mBAAmB,GAAIR,IAAI,IAAK;MACpC,IAAIA,IAAI,CAACS,MAAM,KAAK,CAAC,EAAE;QACrB;QACAN,YAAY,CAACO,KAAK,GAAGV,IAAI;QACzBW,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAC;QACvE,OAAO,CAAC;MACV;MAEA,MAAMC,UAAU,GAAGhB,KAAK,CAACI,UAAU,CAACC,IAAI,CACrCC,YAAY,IAAKA,YAAY,CAACC,OAAO,KAAKJ,IAAI,CAACI,OAClD,CAAC;MACD,IAAIU,gBAAgB,GAAGD,UAAU,GAC7BhB,KAAK,CAACI,UAAU,CAACc,MAAM,CACpBZ,YAAY,IAAKA,YAAY,CAACC,OAAO,KAAKJ,IAAI,CAACI,OAClD,CAAC,GACD,CAAC,GAAGP,KAAK,CAACI,UAAU,EAAED,IAAI,CAAC;MAE/BK,IAAI,CAAC,mBAAmB,EAAES,gBAAgB,CAAC;;MAE3C;MACAX,YAAY,CAACO,KAAK,GAAGG,UAAU,GAAG,IAAI,GAAGb,IAAI;IAC/C,CAAC;IAED,MAAMgB,qBAAqB,GAAIP,MAAM,IAAK;MACxC,MAAMQ,SAAS,GAAG;QAChB,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE;MACL,CAAC;MACD,OAAOA,SAAS,CAACR,MAAM,CAAC,IAAI,gBAAgB;IAC9C,CAAC;IAED,MAAMS,mBAAmB,GAAGlC,QAAQ,CAAC,MAAM;MACzC,IAAI,CAACmC,KAAK,CAACC,OAAO,CAACvB,KAAK,CAACI,UAAU,CAAC,EAAE;QACpC,OAAO,EAAE,CAAC,CAAC;MACb;MACA;MACA,OAAO,CAAC,GAAGJ,KAAK,CAACI,UAAU,CAAC,CAACT,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC;IAC3E,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}