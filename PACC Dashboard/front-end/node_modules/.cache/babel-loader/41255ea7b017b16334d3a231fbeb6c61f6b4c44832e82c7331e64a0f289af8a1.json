{"ast":null,"code":"import { ref, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'NodeSelector',\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => [] // Provide a default empty array\n    }\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const store = useStore();\n    const nodes = computed(() => store.getters.userNodes);\n    const props = __props;\n    const emit = __emit;\n    onMounted(async () => {\n      await store.dispatch(\"fetchNodes\"); // 노드 정보 가져와서 마운트하기.\n    });\n    const selectedNode = ref(null);\n    // const isSelected = (node) => {\n    //   return selectedNode.value && node.id === selectedNode.value.id;\n    // };\n\n    const toggleNodeSelection = node => {\n      if (node.status !== 0) {\n        console.log(\"Node is not in a waiting state and cannot be selected.\");\n        return;\n      }\n      const newSelectedNodes = props.modelValue.includes(node) ? props.modelValue.filter(selectedNode => selectedNode.id !== node.id) // Remove node from selection\n      : [...props.modelValue, node]; // Add node to selection\n\n      emit(\"update:modelValue\", newSelectedNodes);\n\n      // The selectedNode ref doesn't seem necessary for multiple selections.\n      // If you need to track the last selected node for some reason, you can keep this line.\n      // Otherwise, it can be removed.\n      selectedNode.value = newSelectedNodes.find(selectedNode => selectedNode.id === node.id) || null;\n    };\n    const nodeStatusDescription = computed(() => {\n      const statusMap = {\n        0: \"waiting\",\n        1: \"learning\",\n        2: \"learning complete\"\n      };\n      return selectedNode.value ? statusMap[selectedNode.value.status] || \"Unknown status\" : \"\";\n    });\n    const sortedSelectedNodes = computed(() => {\n      if (!Array.isArray(props.modelValue)) {\n        return []; // Return an empty array if props.modelValue is not an array\n      }\n      // Proceed with sorting if props.modelValue is an array\n      return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\n    });\n    const __returned__ = {\n      store,\n      nodes,\n      props,\n      emit,\n      selectedNode,\n      toggleNodeSelection,\n      nodeStatusDescription,\n      sortedSelectedNodes,\n      ref,\n      computed,\n      onMounted,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","store","nodes","getters","userNodes","props","__props","emit","__emit","dispatch","selectedNode","toggleNodeSelection","node","status","console","log","newSelectedNodes","modelValue","includes","filter","id","value","find","nodeStatusDescription","statusMap","sortedSelectedNodes","Array","isArray","sort","a","b","name","localeCompare"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/NodeSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"node-selector-container\">\r\n    <!-- Header above the entire container -->\r\n    <div class=\"node-header\">\r\n      <h2>Node Selection</h2>\r\n    </div>\r\n    <!-- Main content area for node selection -->\r\n    <div class=\"node-content\">\r\n      <!-- Node list on the far left -->\r\n      <div class=\"node-list\">\r\n        <ul>\r\n          <li\r\n            v-for=\"node in nodes\"\r\n            :key=\"node.id\"\r\n            @click=\"toggleNodeSelection(node)\"\r\n            :class=\"{ selected: node.selected }\"\r\n          >\r\n            {{ node.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"node-description\" v-if=\"selectedNode\">\r\n        <h4>{{ selectedNode.name }} 설명</h4>\r\n        <!-- Display additional node details -->\r\n        <p>CPU Core Count: {{ selectedNode.cpu_count }}</p>\r\n        <p>Total Memory: {{ selectedNode.total_memory }} MB</p>\r\n        <p>Total Disk: {{ selectedNode.total_disk }} MB</p>\r\n        <p>Status: {{ nodeStatusDescription }}</p>\r\n      </div>\r\n      <div class=\"node-description\" v-else>\r\n        <p>Select a node to see its description.</p>\r\n      </div>\r\n\r\n      <!-- List of selected nodes on the far right -->\r\n      <div class=\"selected-nodes\">\r\n        <h3>Selected Nodes</h3>\r\n        <ul>\r\n          <li v-for=\"node in sortedSelectedNodes\" :key=\"node.id\">\r\n            {{ node.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, defineEmits, computed, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\nconst nodes = computed(() => store.getters.userNodes);\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: Array,\r\n    default: () => [], // Provide a default empty array\r\n  },\r\n});\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nonMounted(async () => {\r\n  await store.dispatch(\"fetchNodes\"); // 노드 정보 가져와서 마운트하기.\r\n});\r\n\r\nconst selectedNode = ref(null);\r\n// const isSelected = (node) => {\r\n//   return selectedNode.value && node.id === selectedNode.value.id;\r\n// };\r\n\r\nconst toggleNodeSelection = (node) => {\r\n  if (node.status !== 0) {\r\n    console.log(\"Node is not in a waiting state and cannot be selected.\");\r\n    return;\r\n  }\r\n\r\n  const newSelectedNodes = props.modelValue.includes(node)\r\n    ? props.modelValue.filter(selectedNode => selectedNode.id !== node.id) // Remove node from selection\r\n    : [...props.modelValue, node]; // Add node to selection\r\n\r\n  emit(\"update:modelValue\", newSelectedNodes);\r\n\r\n  // The selectedNode ref doesn't seem necessary for multiple selections.\r\n  // If you need to track the last selected node for some reason, you can keep this line.\r\n  // Otherwise, it can be removed.\r\n  selectedNode.value = newSelectedNodes.find(selectedNode => selectedNode.id === node.id) || null;\r\n};\r\n\r\nconst nodeStatusDescription = computed(() => {\r\n  const statusMap = {\r\n    0: \"waiting\",\r\n    1: \"learning\",\r\n    2: \"learning complete\",\r\n  };\r\n  return selectedNode.value\r\n    ? statusMap[selectedNode.value.status] || \"Unknown status\"\r\n    : \"\";\r\n});\r\n\r\nconst sortedSelectedNodes = computed(() => {\r\n  if (!Array.isArray(props.modelValue)) {\r\n    return []; // Return an empty array if props.modelValue is not an array\r\n  }\r\n  // Proceed with sorting if props.modelValue is an array\r\n  return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.node-selector-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid #ddd;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n}\r\n\r\n.node-header {\r\n  padding: 10px 20px;\r\n  background-color: #f5f5f5;\r\n  text-align: left;\r\n  font-size: 1.25rem;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.node-content {\r\n  display: flex;\r\n}\r\n\r\n.node-list,\r\n.node-description,\r\n.selected-nodes {\r\n  padding: 20px;\r\n  flex-basis: 33.3333%;\r\n  flex-grow: 1;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.node-list ul,\r\n.selected-nodes ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.node-list li,\r\n.selected-nodes li {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.node-list li:hover,\r\n.node-list li.selected,\r\n.selected-nodes li:hover {\r\n  background-color: #b1f397;\r\n}\r\n\r\n/* Remove border from the last element of the main content */\r\n.selected-nodes {\r\n  border-right: none;\r\n}\r\n\r\n/* Optional: Add some responsive styling */\r\n@media (max-width: 768px) {\r\n  .node-content {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .node-list,\r\n  .node-description,\r\n  .selected-nodes {\r\n    border-right: none;\r\n    border-bottom: 1px solid #ddd;\r\n    flex-basis: auto;\r\n  }\r\n\r\n  .selected-nodes {\r\n    border-bottom: none;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AAgDA,SAASA,GAA6B,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,KAAK;AACxE,SAASC,QAAQ,QAAQ,MAAM;;;;;;;;;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IACxB,MAAME,KAAK,GAAGJ,QAAQ,CAAC,MAAMG,KAAK,CAACE,OAAO,CAACC,SAAS,CAAC;IAErD,MAAMC,KAAK,GAAGC,OAKZ;IAEF,MAAMC,IAAI,GAAGC,MAAkC;IAE/CT,SAAS,CAAC,YAAY;MACpB,MAAME,KAAK,CAACQ,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAGb,GAAG,CAAC,IAAI,CAAC;IAC9B;IACA;IACA;;IAEA,MAAMc,mBAAmB,GAAIC,IAAI,IAAK;MACpC,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QACrBC,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;QACrE;MACF;MAEA,MAAMC,gBAAgB,GAAGX,KAAK,CAACY,UAAU,CAACC,QAAQ,CAACN,IAAI,CAAC,GACpDP,KAAK,CAACY,UAAU,CAACE,MAAM,CAACT,YAAY,IAAIA,YAAY,CAACU,EAAE,KAAKR,IAAI,CAACQ,EAAE,CAAC,CAAC;MAAA,EACrE,CAAC,GAAGf,KAAK,CAACY,UAAU,EAAEL,IAAI,CAAC,CAAC,CAAC;;MAEjCL,IAAI,CAAC,mBAAmB,EAAES,gBAAgB,CAAC;;MAE3C;MACA;MACA;MACAN,YAAY,CAACW,KAAK,GAAGL,gBAAgB,CAACM,IAAI,CAACZ,YAAY,IAAIA,YAAY,CAACU,EAAE,KAAKR,IAAI,CAACQ,EAAE,CAAC,IAAI,IAAI;IACjG,CAAC;IAED,MAAMG,qBAAqB,GAAGzB,QAAQ,CAAC,MAAM;MAC3C,MAAM0B,SAAS,GAAG;QAChB,CAAC,EAAE,SAAS;QACZ,CAAC,EAAE,UAAU;QACb,CAAC,EAAE;MACL,CAAC;MACD,OAAOd,YAAY,CAACW,KAAK,GACrBG,SAAS,CAACd,YAAY,CAACW,KAAK,CAACR,MAAM,CAAC,IAAI,gBAAgB,GACxD,EAAE;IACR,CAAC,CAAC;IAEF,MAAMY,mBAAmB,GAAG3B,QAAQ,CAAC,MAAM;MACzC,IAAI,CAAC4B,KAAK,CAACC,OAAO,CAACtB,KAAK,CAACY,UAAU,CAAC,EAAE;QACpC,OAAO,EAAE,CAAC,CAAC;MACb;MACA;MACA,OAAO,CAAC,GAAGZ,KAAK,CAACY,UAAU,CAAC,CAACW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC;IAC3E,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}