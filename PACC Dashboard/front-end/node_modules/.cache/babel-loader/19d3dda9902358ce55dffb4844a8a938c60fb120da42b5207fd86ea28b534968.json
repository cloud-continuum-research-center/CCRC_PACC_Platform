{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\nimport { onMounted, onUnmounted, computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n\n    // Compute the details of the selected node\n    const nodeDetails = computed(() => {\n      const node = store.getters.userNodes.find(node => node.name === selectedNodeName.value) || {};\n      return {\n        total_memory_mb: node.total_memory_mb,\n        remaining_memory_mb: store.getters.getNodeMemory(node.name)\n      };\n    });\n    const filteredNodes = computed(() => {\n      const allNodes = store.getters.userNodes;\n      const selectedNodeNames = store.state.selectedProjectNodeNames;\n      console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \");\n      console.log(allNodes.filter(node => selectedNodeNames.includes(node.name)));\n      return allNodes.filter(node => selectedNodeNames.includes(node.name));\n    });\n\n    // 남은 메모리 정보를 저장하는 객체\n    const nodeFreeMemories = computed(() => {\n      const memories = {};\n      filteredNodes.value.forEach(node => {\n        // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\n        const memory = store.getters.getNodeMemory(node.name) || 0;\n        memories[node.name] = memory;\n        console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\n      });\n      return memories;\n    });\n\n    // const getNodeFreeMemory = (nodeName) => {\n    //   const selectedNodeNames = store.state.selectedProjectNodeNames;\n    //   if (selectedNodeNames.includes(nodeName)) {\n    //     console.log(\"남은 메모리 가져오는 중 \")\n    //     console.log(store.getters.getNodeMemory(nodeName))\n    //     return store.getters.getNodeMemory(nodeName) || 0;\n    //   }\n    //   return 0; // If the node is not part of the selected project, return 0\n    // };\n\n    onMounted(() => {\n      // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // 실시간 데이터 가져오기를 시작합니다.\n        startFetchingNodeMonitoringData();\n      }\n    });\n\n    // 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\n    onUnmounted(() => {\n      stopFetchingNodeMonitoringData();\n    });\n\n    // 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\n    const dataInterval = ref(null);\n    function startFetchingNodeMonitoringData() {\n      stopFetchingNodeMonitoringData(); // Prevent multiple intervals\n      dataInterval.value = setInterval(() => {\n        store.dispatch(\"fetchData\");\n      }, 1000);\n    }\n    function stopFetchingNodeMonitoringData() {\n      if (dataInterval.value) {\n        clearInterval(dataInterval.value);\n        dataInterval.value = null;\n      }\n    }\n    const __returned__ = {\n      store,\n      nodeDetails,\n      filteredNodes,\n      nodeFreeMemories,\n      dataInterval,\n      startFetchingNodeMonitoringData,\n      stopFetchingNodeMonitoringData,\n      ProjectList,\n      MemoryGauge,\n      onMounted,\n      onUnmounted,\n      computed,\n      ref,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","MemoryGauge","onMounted","onUnmounted","computed","ref","useStore","store","nodeDetails","node","getters","userNodes","find","name","selectedNodeName","value","total_memory_mb","remaining_memory_mb","getNodeMemory","filteredNodes","allNodes","selectedNodeNames","state","selectedProjectNodeNames","console","log","filter","includes","nodeFreeMemories","memories","forEach","memory","authToken","userEmail","dispatch","startFetchingNodeMonitoringData","stopFetchingNodeMonitoringData","dataInterval","setInterval","clearInterval"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\n// Compute the details of the selected node\r\nconst nodeDetails = computed(() => {\r\n  const node = store.getters.userNodes.find(node => node.name === selectedNodeName.value) || {};\r\n  return {\r\n    total_memory_mb: node.total_memory_mb,\r\n    remaining_memory_mb: store.getters.getNodeMemory(node.name)\r\n  };\r\n});\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \")\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)))\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const memory = store.getters.getNodeMemory(node.name) || 0;\r\n    memories[node.name] = memory;\r\n    console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\r\n  });\r\n  return memories;\r\n});\r\n\r\n// const getNodeFreeMemory = (nodeName) => {\r\n//   const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n//   if (selectedNodeNames.includes(nodeName)) {\r\n//     console.log(\"남은 메모리 가져오는 중 \")\r\n//     console.log(store.getters.getNodeMemory(nodeName))\r\n//     return store.getters.getNodeMemory(nodeName) || 0;\r\n//   }\r\n//   return 0; // If the node is not part of the selected project, return 0\r\n// };\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <ProjectList />\r\n    <!-- Dropdown for selecting a node -->\r\n    <select v-model=\"selectedNodeName\">\r\n      <option disabled value=\"\">Please select one</option>\r\n      <option v-for=\"node in filteredNodes\" :key=\"node.id\" :value=\"node.name\">\r\n        {{ node.name }}\r\n      </option>\r\n    </select>\r\n    <!-- Display only one MemoryGauge component -->\r\n    <MemoryGauge\r\n      v-if=\"selectedNodeName\"\r\n      :key=\"selectedNodeName\"\r\n      :nodeName=\"selectedNodeName\"\r\n      :total-size=\"nodeDetails.total_memory_mb\"\r\n      :remaining-size=\"nodeDetails.remaining_memory_mb\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}