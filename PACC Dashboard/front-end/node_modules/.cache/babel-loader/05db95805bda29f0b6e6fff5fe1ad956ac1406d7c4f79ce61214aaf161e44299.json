{"ast":null,"code":"import { ref, onMounted, watch, computed } from \"vue\";\nimport Chart from \"chart.js/auto\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nexport default {\n  __name: 'GaugeComponent',\n  props: {\n    totalSize: Number,\n    remainingSize: Number,\n    nodeName: String\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const chartCanvas = ref(null);\n    let myChart = null;\n    const createChartData = (totalSize, remainingSize) => {\n      const usedSize = totalSize - remainingSize;\n      return {\n        labels: [\"Used\", \"Free\"],\n        datasets: [{\n          label: \"Memory Usage\",\n          data: [usedSize, remainingSize],\n          backgroundColor: [\"#42A5F5\", \"#ddd\"],\n          borderWidth: 0\n        }]\n      };\n    };\n    const memoryUsageData = computed(() => createChartData(props.totalSize, props.remainingSize)); // Now using computed\n\n    // Chart.js chart configuration\n    // Chart.js chart configuration\n    const createChartConfig = (chartData, nodeName) => {\n      const totalSize = chartData.datasets[0].data.reduce((a, b) => a + b, 0);\n      return {\n        type: \"doughnut\",\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: \"80%\",\n          // You may adjust this for better label positioning\n          animation: {\n            animateRotate: true,\n            animateScale: false\n          },\n          circumference: 180,\n          rotation: 270,\n          plugins: {\n            tooltip: {\n              enabled: false // Disable default tooltips\n            },\n            datalabels: {\n              color: \"#000000\",\n              // Set color of the labels\n              textAlign: \"center\",\n              font: {\n                weight: \"bold\",\n                size: 18\n              },\n              formatter: (value, context) => {\n                // If it's the 'Used' part of the chart, return its value\n                if (context.dataIndex === 0) {\n                  return value.toFixed(2) + \"GB\"; // Replace \"GB\" with the actual unit\n                }\n                // Do not display labels for the 'Free' part\n                return null;\n              },\n              anchor: \"center\",\n              align: \"center\",\n              offset: -10,\n              // Adjust offset as needed\n              labels: {\n                title: {\n                  font: {\n                    size: '18'\n                  }\n                },\n                value: {\n                  color: 'red'\n                }\n              }\n            },\n            // Additional configuration for the center label\n            centerLabel: {\n              color: '#FF6384',\n              font: {\n                weight: 'bold',\n                size: '20' // Size of the center label\n              }\n              // You could create a custom plugin to handle this but for simplicity, we're defining the style here\n            },\n            title: {\n              display: true,\n              text: nodeName,\n              position: \"top\",\n              color: \"#666\",\n              font: {\n                size: 16\n              }\n            }\n          }\n        },\n        plugins: [ChartDataLabels, {\n          // Plugin to render the center label\n          afterDraw: chart => {\n            let ctx = chart.ctx;\n            ctx.save();\n            const centerLabel = (chartData.datasets[0].data[0] / totalSize * 100).toFixed(2) + '%'; // Calculate percentage\n            const centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\n            const centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\n            ctx.font = '20px Arial';\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.fillStyle = '#FF6384'; // Center label color\n            ctx.fillText(centerLabel, centerX, centerY);\n            ctx.restore();\n          }\n        }] // Register the plugin here\n      };\n    };\n    onMounted(() => {\n      if (chartCanvas.value) {\n        const context = chartCanvas.value.getContext('2d');\n        if (context) {\n          const config = createChartConfig(memoryUsageData.value, props.nodeName);\n          myChart = new Chart(context, config);\n        } else {\n          console.error('Failed to get canvas context');\n        }\n      } else {\n        console.error('Canvas element not found');\n      }\n    });\n    watch(() => [props.totalSize, props.remainingSize], newValues => {\n      if (myChart) {\n        const newChartData = createChartData(...newValues);\n        myChart.data = newChartData;\n        myChart.options = createChartConfig(newChartData, props.nodeName).options;\n        myChart.update();\n      }\n    }, {\n      immediate: true\n    });\n    const __returned__ = {\n      props,\n      chartCanvas,\n      get myChart() {\n        return myChart;\n      },\n      set myChart(v) {\n        myChart = v;\n      },\n      createChartData,\n      memoryUsageData,\n      createChartConfig,\n      ref,\n      onMounted,\n      watch,\n      computed,\n      get Chart() {\n        return Chart;\n      },\n      get ChartDataLabels() {\n        return ChartDataLabels;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","computed","Chart","ChartDataLabels","props","__props","chartCanvas","myChart","createChartData","totalSize","remainingSize","usedSize","labels","datasets","label","data","backgroundColor","borderWidth","memoryUsageData","createChartConfig","chartData","nodeName","reduce","a","b","type","options","responsive","maintainAspectRatio","cutout","animation","animateRotate","animateScale","circumference","rotation","plugins","tooltip","enabled","datalabels","color","textAlign","font","weight","size","formatter","value","context","dataIndex","toFixed","anchor","align","offset","title","centerLabel","display","text","position","afterDraw","chart","ctx","save","centerX","chartArea","left","right","centerY","top","bottom","textBaseline","fillStyle","fillText","restore","getContext","config","console","error","newValues","newChartData","update","immediate"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/GaugeComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <canvas ref=\"chartCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, watch, defineProps, computed } from \"vue\";\r\nimport Chart from \"chart.js/auto\";\r\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\r\n\r\nconst props = defineProps({\r\n  totalSize: Number,\r\n  remainingSize: Number,\r\n  nodeName: String,\r\n});\r\n\r\nconst chartCanvas = ref(null);\r\nlet myChart = null;\r\n\r\nconst createChartData = (totalSize, remainingSize) => {\r\n  const usedSize = totalSize - remainingSize;\r\n  return {\r\n    labels: [\"Used\", \"Free\"],\r\n    datasets: [\r\n      {\r\n        label: \"Memory Usage\",\r\n        data: [usedSize, remainingSize],\r\n        backgroundColor: [\"#42A5F5\", \"#ddd\"],\r\n        borderWidth: 0,\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\nconst memoryUsageData = computed(() =>\r\n  createChartData(props.totalSize, props.remainingSize),\r\n); // Now using computed\r\n\r\n// Chart.js chart configuration\r\n// Chart.js chart configuration\r\nconst createChartConfig = (chartData, nodeName) => {\r\n  const totalSize = chartData.datasets[0].data.reduce((a, b) => a + b, 0);\r\n\r\n  return {\r\n    type: \"doughnut\",\r\n    data: chartData,\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      cutout: \"80%\", // You may adjust this for better label positioning\r\n      animation: {\r\n        animateRotate: true,\r\n        animateScale: false,\r\n      },\r\n      circumference: 180,\r\n      rotation: 270,\r\n      plugins: {\r\n        tooltip: {\r\n          enabled: false, // Disable default tooltips\r\n        },\r\n        datalabels: {\r\n          color: \"#000000\", // Set color of the labels\r\n          textAlign: \"center\",\r\n          font: {\r\n            weight: \"bold\",\r\n            size: 18,\r\n          },\r\n          formatter: (value, context) => {\r\n            // If it's the 'Used' part of the chart, return its value\r\n            if (context.dataIndex === 0) {\r\n              return value.toFixed(2) + \"GB\"; // Replace \"GB\" with the actual unit\r\n            }\r\n            // Do not display labels for the 'Free' part\r\n            return null;\r\n          },\r\n          anchor: \"center\",\r\n          align: \"center\",\r\n          offset: -10, // Adjust offset as needed\r\n          labels: {\r\n            title: {\r\n              font: {\r\n                size: '18'\r\n              }\r\n            },\r\n            value: {\r\n              color: 'red'\r\n            }\r\n          }\r\n        },\r\n        // Additional configuration for the center label\r\n        centerLabel: {\r\n          color: '#FF6384',\r\n          font: {\r\n            weight: 'bold',\r\n            size: '20' // Size of the center label\r\n          },\r\n          // You could create a custom plugin to handle this but for simplicity, we're defining the style here\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: nodeName,\r\n          position: \"top\",\r\n          color: \"#666\",\r\n          font: {\r\n            size: 16,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    plugins: [ChartDataLabels, {\r\n      // Plugin to render the center label\r\n      afterDraw: chart => {\r\n        let ctx = chart.ctx;\r\n        ctx.save();\r\n        const centerLabel = ((chartData.datasets[0].data[0] / totalSize) * 100).toFixed(2) + '%'; // Calculate percentage\r\n        const centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\r\n        const centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\r\n        ctx.font = '20px Arial';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillStyle = '#FF6384'; // Center label color\r\n        ctx.fillText(centerLabel, centerX, centerY);\r\n        ctx.restore();\r\n      }\r\n    }], // Register the plugin here\r\n  };\r\n};\r\n\r\n\r\nonMounted(() => {\r\n  if (chartCanvas.value) {\r\n    const context = chartCanvas.value.getContext('2d');\r\n    if (context) {\r\n      const config = createChartConfig(memoryUsageData.value, props.nodeName);\r\n      myChart = new Chart(context, config);\r\n    } else {\r\n      console.error('Failed to get canvas context');\r\n    }\r\n  } else {\r\n    console.error('Canvas element not found');\r\n  }\r\n});\r\n\r\nwatch(() => [props.totalSize, props.remainingSize], (newValues) => {\r\n  if (myChart) {\r\n    const newChartData = createChartData(...newValues);\r\n    myChart.data = newChartData;\r\n    myChart.options = createChartConfig(newChartData, props.nodeName).options;\r\n    myChart.update();\r\n  }\r\n}, { immediate: true });\r\n</script>\r\n\r\n<style>\r\n.chart-container {\r\n  overflow: visible; /* Ensures no clipping */\r\n  opacity: 1; /* Checks that it's not hidden */\r\n  position: relative;\r\n  height: 40vh;\r\n  width: 80vw;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}