{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-44587f60\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"node-selector-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"node-header\"\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Node Selection\")], -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"node-content\"\n};\nconst _hoisted_4 = {\n  class: \"node-list\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"node-description\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = {\n  key: 1\n};\nconst _hoisted_9 = {\n  key: 1,\n  class: \"node-description\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Select a node to see its description.\", -1 /* HOISTED */));\nconst _hoisted_11 = [_hoisted_10];\nconst _hoisted_12 = {\n  class: \"selected-nodes\"\n};\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Selected Nodes\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Header above the entire container \"), _hoisted_2, _createCommentVNode(\" Main content area for node selection \"), _createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Node list on the far left \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.nodes, node => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: node.id,\n      onClick: $event => $setup.toggleNodeSelection(node),\n      class: _normalizeClass({\n        selected: $setup.isNodeSelected(node)\n      })\n    }, _toDisplayString(node.name), 11 /* TEXT, CLASS, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))])]), $setup.selectedNode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"h4\", null, _toDisplayString($setup.selectedNode.name) + \" 설명\", 1 /* TEXT */), _createCommentVNode(\" Display additional node details \"), _createElementVNode(\"p\", null, \"CPU Core Count: \" + _toDisplayString($setup.selectedNode.cpu_core_count), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Total Memory: \" + _toDisplayString($setup.selectedNode.total_memory_mb) + \" MB\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Total Disk: \" + _toDisplayString($setup.selectedNode.total_disk_mb) + \" MB\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString($setup.nodeStatusDescription($setup.selectedNode.status)), 1 /* TEXT */), $setup.selectedNode.instance ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, \" Instance: \" + _toDisplayString($setup.selectedNode.instance), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $setup.selectedNode.gpu_info ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \" GPU Info: \" + _toDisplayString($setup.selectedNode.gpu_info), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [..._hoisted_11])), _createCommentVNode(\" List of selected nodes on the far right \"), _createElementVNode(\"div\", _hoisted_12, [_hoisted_13, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sortedSelectedNodes, node => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: node.id\n    }, _toDisplayString(node.name), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_hoisted_10","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","$setup","nodes","node","id","onClick","$event","toggleNodeSelection","_normalizeClass","selected","isNodeSelected","name","_hoisted_5","selectedNode","_hoisted_6","_toDisplayString","cpu_core_count","total_memory_mb","total_disk_mb","nodeStatusDescription","status","instance","_hoisted_7","gpu_info","_hoisted_8","_hoisted_9","_hoisted_11","_hoisted_12","_hoisted_13","sortedSelectedNodes"],"sources":["D:\\Git\\ITRC_Front\\vue-flask-dashboard\\front-end\\src\\views\\components\\NodeSelector.vue"],"sourcesContent":["<template>\n  <div class=\"node-selector-container\">\n    <!-- Header above the entire container -->\n    <div class=\"node-header\">\n      <h2>Node Selection</h2>\n    </div>\n    <!-- Main content area for node selection -->\n    <div class=\"node-content\">\n      <!-- Node list on the far left -->\n      <div class=\"node-list\">\n        <ul>\n          <li\n            v-for=\"node in nodes\"\n            :key=\"node.id\"\n            @click=\"toggleNodeSelection(node)\"\n            :class=\"{ selected: isNodeSelected(node) }\"\n          >\n            {{ node.name }}\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"node-description\" v-if=\"selectedNode\">\n        <h4>{{ selectedNode.name }} 설명</h4>\n        <!-- Display additional node details -->\n        <p>CPU Core Count: {{ selectedNode.cpu_core_count }}</p>\n        <p>Total Memory: {{ selectedNode.total_memory_mb }} MB</p>\n        <p>Total Disk: {{ selectedNode.total_disk_mb }} MB</p>\n        <p>Status: {{ nodeStatusDescription(selectedNode.status) }}</p>\n        <p v-if=\"selectedNode.instance\">\n          Instance: {{ selectedNode.instance }}\n        </p>\n        <p v-if=\"selectedNode.gpu_info\">\n          GPU Info: {{ selectedNode.gpu_info }}\n        </p>\n      </div>\n      <div class=\"node-description\" v-else>\n        <p>Select a node to see its description.</p>\n      </div>\n\n      <!-- List of selected nodes on the far right -->\n      <div class=\"selected-nodes\">\n        <h3>Selected Nodes</h3>\n        <ul>\n          <li v-for=\"node in sortedSelectedNodes\" :key=\"node.id\">\n            {{ node.name }}\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, defineProps, defineEmits, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\n\nconst store = useStore();\n\nconst nodes = computed(() => {\n  const unsortedNodes = store.getters.userNodes || [];\n  return unsortedNodes.sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically by name\n});\n\nconst props = defineProps({\n  modelValue: {\n    type: Array,\n    default: () => [], // Provide a default empty array\n  },\n});\n\nconst isNodeSelected = (node) => {\n  return props.modelValue.some(\n    (selectedNode) => selectedNode.node_id === node.node_id,\n  );\n};\n\nconst emit = defineEmits([\"update:modelValue\"]);\n\nonMounted(async () => {\n  await store.dispatch(\"fetchNodes\"); // 노드 정보 가져와서 마운트하기.\n});\n\nconst selectedNode = ref(null);\n\nconst toggleNodeSelection = (node) => {\n  if (node.status !== 0) {\n    // If the node is not in a waiting state, display its details without selecting it\n    selectedNode.value = node;\n    console.error(\"Node is not in a waiting state and cannot be selected.\");\n    return; // Exit early without changing the selection\n  }\n\n  const isSelected = props.modelValue.some(\n    (selectedNode) => selectedNode.node_id === node.node_id,\n  );\n  let newSelectedNodes = isSelected\n    ? props.modelValue.filter(\n        (selectedNode) => selectedNode.node_id !== node.node_id,\n      )\n    : [...props.modelValue, node];\n\n  emit(\"update:modelValue\", newSelectedNodes);\n\n  // Set or unset the selectedNode for displaying details\n  selectedNode.value = isSelected ? null : node;\n};\n\nconst nodeStatusDescription = (status) => {\n  const statusMap = {\n    0: \"대기중\",\n    1: \"학습중\",\n    2: \"학습완료\",\n  };\n  return statusMap[status] || \"Unknown status\";\n};\n\nconst sortedSelectedNodes = computed(() => {\n  if (!Array.isArray(props.modelValue)) {\n    return []; // Return an empty array if props.modelValue is not an array\n  }\n  // Proceed with sorting if props.modelValue is an array\n  return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\n});\n</script>\n\n<style scoped>\n.node-selector-container {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #ddd;\n  background-color: #fff;\n  border-radius: 8px;\n}\n\n.node-header {\n  padding: 10px 20px;\n  background-color: #f5f5f5;\n  text-align: left;\n  font-size: 1.25rem;\n  border-bottom: 1px solid #ddd;\n}\n\n.node-content {\n  display: flex;\n}\n\n.node-list,\n.node-description,\n.selected-nodes {\n  padding: 20px;\n  flex-basis: 33.3333%;\n  flex-grow: 1;\n  border-right: 1px solid #ddd;\n}\n\n.node-list ul,\n.selected-nodes ul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n.node-list li,\n.selected-nodes li {\n  padding: 10px;\n  cursor: pointer;\n  border-bottom: 1px solid #eee;\n  transition: background-color 0.3s;\n}\n\n.node-list li:hover,\n.node-list li.selected,\n.selected-nodes li:hover {\n  background-color: #b1f397;\n}\n\n/* Remove border from the last element of the main content */\n.selected-nodes {\n  border-right: none;\n}\n\n/* Optional: Add some responsive styling */\n@media (max-width: 768px) {\n  .node-content {\n    flex-direction: column;\n  }\n\n  .node-list,\n  .node-description,\n  .selected-nodes {\n    border-right: none;\n    border-bottom: 1px solid #ddd;\n    flex-basis: auto;\n  }\n\n  .selected-nodes {\n    border-bottom: none;\n  }\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAyB;gEAElCC,mBAAA,CAEM;EAFDD,KAAK,EAAC;AAAa,I,aACtBC,mBAAA,CAAuB,YAAnB,gBAAc,E;;EAGfD,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAW;mBAT5B;;EAAAE,GAAA;EAsBWF,KAAK,EAAC;;;EAtBjBE,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EAoCWF,KAAK,EAAC;;iEACTC,mBAAA,CAA4C,WAAzC,uCAAqC;qBAAxCE,WAA4C,C;;EAIzCH,KAAK,EAAC;AAAgB;iEACzBC,mBAAA,CAAuB,YAAnB,gBAAc;;uBAzCxBG,mBAAA,CAiDM,OAjDNC,UAiDM,GAhDJC,mBAAA,uCAA0C,EAC1CC,UAEM,EACND,mBAAA,0CAA6C,EAC7CL,mBAAA,CA0CM,OA1CNO,UA0CM,GAzCJF,mBAAA,+BAAkC,EAClCL,mBAAA,CAWM,OAXNQ,UAWM,GAVJR,mBAAA,CASK,c,kBARHG,mBAAA,CAOKM,SAAA,QAlBfC,WAAA,CAY2BC,MAAA,CAAAC,KAAK,EAAbC,IAAI;yBADbV,mBAAA,CAOK;MALFF,GAAG,EAAEY,IAAI,CAACC,EAAE;MACZC,OAAK,EAAAC,MAAA,IAAEL,MAAA,CAAAM,mBAAmB,CAACJ,IAAI;MAC/Bd,KAAK,EAflBmB,eAAA;QAAAC,QAAA,EAegCR,MAAA,CAAAS,cAAc,CAACP,IAAI;MAAA;wBAEpCA,IAAI,CAACQ,IAAI,gCAjBxBC,UAAA;sCAsB0CX,MAAA,CAAAY,YAAY,I,cAAhDpB,mBAAA,CAaM,OAbNqB,UAaM,GAZJxB,mBAAA,CAAmC,YAAAyB,gBAAA,CAA5Bd,MAAA,CAAAY,YAAY,CAACF,IAAI,IAAG,KAAG,iBAC9BhB,mBAAA,qCAAwC,EACxCL,mBAAA,CAAwD,WAArD,kBAAgB,GAAAyB,gBAAA,CAAGd,MAAA,CAAAY,YAAY,CAACG,cAAc,kBACjD1B,mBAAA,CAA0D,WAAvD,gBAAc,GAAAyB,gBAAA,CAAGd,MAAA,CAAAY,YAAY,CAACI,eAAe,IAAG,KAAG,iBACtD3B,mBAAA,CAAsD,WAAnD,cAAY,GAAAyB,gBAAA,CAAGd,MAAA,CAAAY,YAAY,CAACK,aAAa,IAAG,KAAG,iBAClD5B,mBAAA,CAA+D,WAA5D,UAAQ,GAAAyB,gBAAA,CAAGd,MAAA,CAAAkB,qBAAqB,CAAClB,MAAA,CAAAY,YAAY,CAACO,MAAM,mBAC9CnB,MAAA,CAAAY,YAAY,CAACQ,QAAQ,I,cAA9B5B,mBAAA,CAEI,KA/BZ6B,UAAA,EA6BwC,aACpB,GAAAP,gBAAA,CAAGd,MAAA,CAAAY,YAAY,CAACQ,QAAQ,oBA9B5C1B,mBAAA,gBAgCiBM,MAAA,CAAAY,YAAY,CAACU,QAAQ,I,cAA9B9B,mBAAA,CAEI,KAlCZ+B,UAAA,EAgCwC,aACpB,GAAAT,gBAAA,CAAGd,MAAA,CAAAY,YAAY,CAACU,QAAQ,oBAjC5C5B,mBAAA,e,oBAoCMF,mBAAA,CAEM,OAFNgC,UAEM,EAtCZ,IAAAC,WAAA,KAwCM/B,mBAAA,6CAAgD,EAChDL,mBAAA,CAOM,OAPNqC,WAOM,GANJC,WAAuB,EACvBtC,mBAAA,CAIK,c,kBAHHG,mBAAA,CAEKM,SAAA,QA9CfC,WAAA,CA4C6BC,MAAA,CAAA4B,mBAAmB,EAA3B1B,IAAI;yBAAfV,mBAAA,CAEK;MAFoCF,GAAG,EAAEY,IAAI,CAACC;wBAC9CD,IAAI,CAACQ,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}