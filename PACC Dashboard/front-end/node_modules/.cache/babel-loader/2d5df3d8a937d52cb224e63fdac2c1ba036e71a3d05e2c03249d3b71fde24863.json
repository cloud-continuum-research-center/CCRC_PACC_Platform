{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nconst _hoisted_2 = {\n  ref: \"chartCanvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\components\\LineChartComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <canvas ref=\"chartCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, watch, defineProps, computed } from \"vue\";\r\nimport Chart from \"chart.js/auto\";\r\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\r\n\r\nconst props = defineProps({\r\n  nodeData: Object,\r\n  dataType: String, // Add a prop to specify the type of data\r\n});\r\n\r\nconst chartCanvas = ref(null);\r\nlet myChart = null;\r\n\r\nconst createChartData = (nodeData) => {\r\n  const dataset = {\r\n    label: 'GPU Temperature',\r\n    data: nodeData,\r\n    borderColor: 'hsl(200, 70%, 50%)',\r\n    fill: false,\r\n    pointRadius: 5\r\n  };\r\n\r\n  return {\r\n    labels: nodeData.map((_, i) => i + 1),\r\n    datasets: [dataset]\r\n  };\r\n};\r\n\r\nconst lineChartData = computed(() => createChartData(props.nodeData));\r\n\r\n// Helper function to determine the correct unit\r\nconst getUnit = (dataType) => {\r\n  switch (dataType) {\r\n    case \"gpuTemperature\":\r\n      return \"Â°C\";\r\n    case \"cpuUtilization\":\r\n      return \"%\";\r\n    case \"gpuUtilization\":\r\n      return \"%\";\r\n    case \"gpuPowerUsage\":\r\n      return \"W\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nconst createChartConfig = (chartData, dataType) => ({\r\n  type: \"line\",\r\n  data: chartData,\r\n  options: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: \"Sample Index\",\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: \"Value\",\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n      },\r\n      datalabels: {\r\n        color: \"#444\",\r\n        display: \"auto\",\r\n        font: {\r\n          weight: \"bold\",\r\n        },\r\n        formatter: (value) => {\r\n          const unit = getUnit(dataType);\r\n          return `${value}${unit}`; // Now dynamically applying units\r\n        },\r\n      },\r\n    },\r\n  },\r\n  plugins: [ChartDataLabels],\r\n});\r\n\r\nonMounted(() => {\r\n  if (chartCanvas.value) {\r\n    const context = chartCanvas.value.getContext(\"2d\");\r\n    if (context) {\r\n      const config = createChartConfig(lineChartData.value, props.dataType);\r\n      myChart = new Chart(context, config);\r\n    } else {\r\n      console.error(\"Failed to get canvas context\");\r\n    }\r\n  } else {\r\n    console.error(\"Canvas element not found\");\r\n  }\r\n});\r\n\r\nwatch(\r\n  () => [props.nodeData, props.dataType],\r\n  (newValues) => {\r\n    if (myChart) {\r\n      const [newData, newType] = newValues;\r\n      const newChartData = createChartData(newData);\r\n      myChart.data = newChartData;\r\n      myChart.options = createChartConfig(newChartData, newType).options;\r\n      myChart.update();\r\n    }\r\n  },\r\n  { immediate: true },\r\n);\r\n</script>\r\n\r\n<style>\r\n.chart-container {\r\n  position: relative;\r\n  height: 35vh; /* Adjust the height as needed */\r\n  width: 40vw; /* Adjust the width to ensure each chart has enough space */\r\n  margin-bottom: 20px; /* Add some space between the chart containers */\r\n}\r\n\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAClBC,GAAG,EAAC;AAAa;;uBAD3BC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAmC,UAAnCC,UAAmC,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}