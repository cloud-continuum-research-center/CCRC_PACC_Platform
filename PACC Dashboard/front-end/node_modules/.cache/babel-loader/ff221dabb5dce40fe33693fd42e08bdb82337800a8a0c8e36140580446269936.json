{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createBlock as _createBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-d33b5946\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chart-list-widget\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"chart-list-header\"\n}, \"Chart List\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"chart-list-body\"\n};\nconst _hoisted_4 = {\n  class: \"chart-name-list\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"chart-display-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"ul\", _hoisted_4, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList($setup.chartNames, (chartName, index) => {\n    return _createElementVNode(\"li\", {\n      key: index,\n      onClick: $event => $setup.selectChart(chartName),\n      class: _normalizeClass({\n        'selected': $setup.selectedChart === chartName\n      })\n    }, _toDisplayString(chartName), 11 /* TEXT, CLASS, PROPS */, _hoisted_5);\n  }), 64 /* STABLE_FRAGMENT */))])]), $setup.selectedChart ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [$setup.selectedChart === 'Memory Usage' ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList($setup.filteredNodes, node => {\n    return _openBlock(), _createBlock($setup[\"MemoryGauge\"], {\n      key: 'memory-' + node.id,\n      nodeName: node.name,\n      totalSize: node.total_memory_mb,\n      remainingSize: $setup.nodeFreeMemories[node.name]\n    }, null, 8 /* PROPS */, [\"nodeName\", \"totalSize\", \"remainingSize\"]);\n  }), 128 /* KEYED_FRAGMENT */)) : _createCommentVNode(\"v-if\", true), $setup.selectedChart === 'Disk Usage' ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 1\n  }, _renderList($setup.filteredNodes, node => {\n    return _openBlock(), _createBlock($setup[\"DiskGauge\"], {\n      key: 'disk-' + node.id,\n      nodeName: node.name,\n      totalSize: node.total_disk_mb,\n      remainingSize: $setup.nodeFreeDisk[node.name]\n    }, null, 8 /* PROPS */, [\"nodeName\", \"totalSize\", \"remainingSize\"]);\n  }), 128 /* KEYED_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","$setup","chartNames","chartName","index","onClick","$event","selectChart","_normalizeClass","selectedChart","_hoisted_5","_hoisted_6","filteredNodes","node","_createBlock","id","nodeName","name","totalSize","total_memory_mb","remainingSize","nodeFreeMemories","_createCommentVNode","total_disk_mb","nodeFreeDisk"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\components\\ChartList.vue"],"sourcesContent":["<template>\r\n    <div class=\"chart-list-widget\">\r\n      <h4 class=\"chart-list-header\">Chart List</h4>\r\n      <div class=\"chart-list-body\">\r\n        <ul class=\"chart-name-list\">\r\n          <li\r\n            v-for=\"(chartName, index) in chartNames\"\r\n            :key=\"index\"\r\n            @click=\"selectChart(chartName)\"\r\n            :class=\"{ 'selected': selectedChart === chartName }\"\r\n          >\r\n            {{ chartName }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"chart-display-container\" v-if=\"selectedChart\">\r\n        <MemoryGauge\r\n          v-if=\"selectedChart === 'Memory Usage'\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"'memory-' + node.id\"\r\n          :nodeName=\"node.name\"\r\n          :totalSize=\"node.total_memory_mb\"\r\n          :remainingSize=\"nodeFreeMemories[node.name]\"\r\n        />\r\n        <DiskGauge\r\n          v-if=\"selectedChart === 'Disk Usage'\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"'disk-' + node.id\"\r\n          :nodeName=\"node.name\"\r\n          :totalSize=\"node.total_disk_mb\"\r\n          :remainingSize=\"nodeFreeDisk[node.name]\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </template>\r\n\r\n<script setup>\r\nimport { computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport MemoryGauge from \"./MemoryGaugeComponent.vue\";\r\nimport DiskGauge from \"./DiskGaugeComponent.vue\";\r\n\r\n\r\nconst store = useStore();\r\nconst selectedChart = ref(''); // 초기값은 선택되지 않은 상태\r\n\r\n// 차트 이름 목록\r\nconst chartNames = ['Memory Usage', 'Disk Usage'];\r\n\r\n// 선택된 차트에 따라서 렌더링할 컴포넌트를 결정하는 computed 속성\r\nconst chartComponents = computed(() => {\r\n  return {\r\n    'Memory Usage': MemoryGauge,\r\n    'Disk Usage': DiskGauge\r\n  };\r\n});\r\n\r\n// 선택된 차트를 업데이트하는 함수\r\nconst selectChart = (chartName) => {\r\n  selectedChart.value = chartName;\r\n};\r\n\r\n// Computed properties\r\nconst filteredNodes = computed(() => \r\n  store.getters.userNodes.filter((node) =>\r\n    store.state.selectedProjectNodeNames.includes(node.name)\r\n  )\r\n);\r\nconst nodeFreeMemories = computed(() => {\r\n  return filteredNodes.value.reduce((acc, node) => {\r\n    acc[node.name] = store.getters.getNodeMemory(node.name) || 0;\r\n    return acc;\r\n  }, {});\r\n});\r\n\r\nconst nodeFreeDisk = computed(() => {\r\n  return filteredNodes.value.reduce((acc, node) => {\r\n    acc[node.name] = store.getters.getNodeDisk(node.name) || 0;\r\n    return acc;\r\n  }, {});\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.chart-list-widget {\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  background-color: #fff;\r\n  margin: 0 auto;\r\n  margin-bottom: 20px;\r\n  width: calc(100% - 10px);\r\n  max-width: 1200px;\r\n}\r\n\r\n.chart-list-header {\r\n  background-color: #f9f9f9;\r\n  padding: 12px 16px;\r\n  margin: 0;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.chart-list-body {\r\n  display: flex;\r\n  /* Adjust width or flex properties as needed */\r\n}\r\n\r\n.chart-name-list {\r\n  /* Adjust width or flex properties as needed */\r\n  flex: 1; /* Take up a portion of the space, adjust as needed */\r\n  /* ... existing styles ... */\r\n}\r\n\r\n.chart-display {\r\n  flex: 2; /* Take up more space than the list, adjust as needed */\r\n  /* Additional styles for layout */\r\n  border-left: 1px solid #ddd;\r\n  padding: 16px;\r\n  overflow-y: auto;\r\n}\r\n\r\n\r\n.memory-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.memory-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.memory-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.disk-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.disk-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.disk-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n</style>\r\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAmB;gEAC5BC,mBAAA,CAA6C;EAAzCD,KAAK,EAAC;AAAmB,GAAC,YAAU;;EACnCA,KAAK,EAAC;AAAiB;;EACtBA,KAAK,EAAC;AAAiB;mBAJnC;;EAAAE,GAAA;EAeWF,KAAK,EAAC;;;uBAdbG,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BJC,UAA6C,EAC7CJ,mBAAA,CAWM,OAXNK,UAWM,GAVJL,mBAAA,CASK,MATLM,UASK,I,cARHJ,mBAAA,CAOKK,SAAA,QAZfC,WAAA,CAMyCC,MAAA,CAAAC,UAAU,EANnD,CAMoBC,SAAS,EAAEC,KAAK;WAD1BZ,mBAAA,CAOK;MALFC,GAAG,EAAEW,KAAK;MACVC,OAAK,EAAAC,MAAA,IAAEL,MAAA,CAAAM,WAAW,CAACJ,SAAS;MAC5BZ,KAAK,EATlBiB,eAAA;QAAA,YASkCP,MAAA,CAAAQ,aAAa,KAAKN;MAAS;wBAE9CA,SAAS,gCAXxBO,UAAA;sCAeiDT,MAAA,CAAAQ,aAAa,I,cAAxDf,mBAAA,CAiBM,OAjBNiB,UAiBM,GAfIV,MAAA,CAAAQ,aAAa,uB,kBADrBf,mBAAA,CAOEK,SAAA;IAvBVN,GAAA;EAAA,GAAAO,WAAA,CAkByBC,MAAA,CAAAW,aAAa,EAArBC,IAAI;yBAFbC,YAAA,CAOEb,MAAA;MAJCR,GAAG,cAAcoB,IAAI,CAACE,EAAE;MACxBC,QAAQ,EAAEH,IAAI,CAACI,IAAI;MACnBC,SAAS,EAAEL,IAAI,CAACM,eAAe;MAC/BC,aAAa,EAAEnB,MAAA,CAAAoB,gBAAgB,CAACR,IAAI,CAACI,IAAI;;mCAtBpDK,mBAAA,gBAyBgBrB,MAAA,CAAAQ,aAAa,qB,kBADrBf,mBAAA,CAOEK,SAAA;IA/BVN,GAAA;EAAA,GAAAO,WAAA,CA0ByBC,MAAA,CAAAW,aAAa,EAArBC,IAAI;yBAFbC,YAAA,CAOEb,MAAA;MAJCR,GAAG,YAAYoB,IAAI,CAACE,EAAE;MACtBC,QAAQ,EAAEH,IAAI,CAACI,IAAI;MACnBC,SAAS,EAAEL,IAAI,CAACU,aAAa;MAC7BH,aAAa,EAAEnB,MAAA,CAAAuB,YAAY,CAACX,IAAI,CAACI,IAAI;;mCA9BhDK,mBAAA,e,KAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}