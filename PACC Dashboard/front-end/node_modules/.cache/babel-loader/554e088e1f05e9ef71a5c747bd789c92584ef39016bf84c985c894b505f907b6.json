{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport LineChart from \"./components/LineChart.vue\";\nimport PieChart from \"./components/PieChart.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const intervalId = ref(null); // Use a ref to keep track of the interval ID\n\n    function startFetching(projectId) {\n      if (intervalId.value) {\n        clearInterval(intervalId.value); // Clear the current interval if it exists\n      }\n      intervalId.value = setInterval(() => {\n        store.dispatch(\"fetchProjectInfoById\", projectId);\n      }, 3000); // Fetch every 3 seconds\n    }\n    const lineChartData = {\n      labels: ['January', 'February', 'March', 'April', 'May'],\n      datasets: [{\n        label: 'Sample Line Data',\n        data: [10, 20, 30, 40, 50],\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }]\n    };\n    const pieChartData = {\n      labels: ['Red', 'Blue', 'Yellow'],\n      datasets: [{\n        data: [300, 50, 100],\n        backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 205, 86, 0.2)'],\n        hoverBackgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)']\n      }]\n    };\n    onMounted(() => {\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // Assuming project ID is already selected somewhere and stored in the state\n        if (store.state.selectedProjectId) {\n          startFetching(store.state.selectedProjectId);\n        }\n      }\n    });\n    watch(() => store.state.selectedProjectId, newId => {\n      if (newId && store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjectInfoById\", newId); // Fetch immediately when ID changes\n        startFetching(newId); // Start or restart the fetching interval\n      } else {\n        if (intervalId.value) {\n          clearInterval(intervalId.value); // Clear the interval if the ID becomes invalid\n          intervalId.value = null;\n        }\n      }\n    }, {\n      immediate: true\n    });\n    onUnmounted(() => {\n      // Clean up the interval when the component is destroyed\n      if (intervalId.value) {\n        clearInterval(intervalId.value);\n      }\n    });\n\n    // Computed property to display project info\n    const projectInfo = computed(() => store.state.projectsInfo[store.state.selectedProjectId] || {});\n    const __returned__ = {\n      store,\n      intervalId,\n      startFetching,\n      lineChartData,\n      pieChartData,\n      projectInfo,\n      ProjectList,\n      LineChart,\n      PieChart,\n      onMounted,\n      watch,\n      computed,\n      onUnmounted,\n      ref,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","LineChart","PieChart","onMounted","watch","computed","onUnmounted","ref","useStore","store","intervalId","startFetching","projectId","value","clearInterval","setInterval","dispatch","lineChartData","labels","datasets","label","data","fill","borderColor","tension","pieChartData","backgroundColor","hoverBackgroundColor","state","authToken","userEmail","selectedProjectId","newId","immediate","projectInfo","projectsInfo"],"sources":["D:/Git/ITRC_Front/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <div class=\"project-list-container\">\n      <ProjectList />\n    </div>\n    <div class=\"project-info-widget\" v-if=\"projectInfo\">\n      <div class=\"training-status-header\">\n        <h4>학습 상태</h4>\n      </div>\n      <p class=\"project-info-highlight\">모델 학습 진행율: {{ projectInfo.progress ? `${projectInfo.progress}%` : '0' }}</p>\n      <p class=\"project-info-highlight epoch\">모델 훈련 횟수: {{ projectInfo.epoch !== undefined ? projectInfo.epoch : '0' }}</p>\n      <p class=\"project-info-highlight accuracy\">모델 정확도: {{ projectInfo.accuracy ? projectInfo.accuracy.toFixed(2) + '%' : '0' }}</p>\n      <p class=\"project-info-highlight loss\">모델 Loss 값: {{ projectInfo.loss ? projectInfo.loss.toFixed(4) : '0' }}</p>\n      <!-- Add Graphs here -->\n      <LineChart :chartData=\"lineChartData\" :chartOptions=\"{ responsive: true, maintainAspectRatio: false }\" />\n      <PieChart :chartData=\"pieChartData\" :chartOptions=\"{ responsive: true, maintainAspectRatio: false }\" />\n    </div>\n  </div>\n</template>\n\n\n<script setup>\nimport ProjectList from \"./components/ProjectsList.vue\";\nimport LineChart from \"./components/LineChart.vue\";\nimport PieChart from \"./components/PieChart.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\n\n\nconst store = useStore();\nconst intervalId = ref(null); // Use a ref to keep track of the interval ID\n\nfunction startFetching(projectId) {\n  if (intervalId.value) {\n    clearInterval(intervalId.value); // Clear the current interval if it exists\n  }\n  intervalId.value = setInterval(() => {\n    store.dispatch(\"fetchProjectInfoById\", projectId);\n  }, 3000); // Fetch every 3 seconds\n}\n\nconst lineChartData = {\n  labels: ['January', 'February', 'March', 'April', 'May'],\n  datasets: [{\n    label: 'Sample Line Data',\n    data: [10, 20, 30, 40, 50],\n    fill: false,\n    borderColor: 'rgb(75, 192, 192)',\n    tension: 0.1\n  }]\n};\n\nconst pieChartData = {\n  labels: ['Red', 'Blue', 'Yellow'],\n  datasets: [{\n    data: [300, 50, 100],\n    backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 205, 86, 0.2)'],\n    hoverBackgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)']\n  }]\n};\n\n\nonMounted(() => {\n  if (store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjects\");\n    // Assuming project ID is already selected somewhere and stored in the state\n    if (store.state.selectedProjectId) {\n      startFetching(store.state.selectedProjectId);\n    }\n  }\n});\n\nwatch(() => store.state.selectedProjectId, (newId) => {\n  if (newId && store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjectInfoById\", newId); // Fetch immediately when ID changes\n    startFetching(newId); // Start or restart the fetching interval\n  } else {\n    if (intervalId.value) {\n      clearInterval(intervalId.value); // Clear the interval if the ID becomes invalid\n      intervalId.value = null;\n    }\n  }\n}, { immediate: true });\n\nonUnmounted(() => {\n  // Clean up the interval when the component is destroyed\n  if (intervalId.value) {\n    clearInterval(intervalId.value);\n  }\n});\n\n// Computed property to display project info\nconst projectInfo = computed(() => store.state.projectsInfo[store.state.selectedProjectId] || {});\n\n</script>\n\n\n<style>\n.dashboard {\n  display: flex;\n  align-items: flex-start; /* 요소들을 컨테이너의 상단에 정렬 */\n  justify-content: flex-start; /* 요소들을 컨테이너의 왼쪽에서 시작하도록 정렬 */\n  gap: 20px; /* 요소들 사이의 간격 */\n  padding: 20px; /* 대시보드 패딩 */\n  \n}\n\n\n.project-list-container {\n  min-width: 800px; /* 최소 너비 설정 */\n  max-height: 500px; /* 최대 높이 설정 */\n  height: 275px; /* 높이 100%로 설정 */\n\n}\n\n.project-info-widget {\n  flex: 1; /* 유연하게 너비 조정 */\n  flex-grow: 2; /* 컨테이너가 더 많은 공간을 차지하도록 설정 */\n  padding: 20px; \n  margin-top: 0; /* 위쪽 마진 제거 */\n  border: 1px solid #ccc; /* 테두리 설정 */\n  border-radius: 12px;\n  background-color: #fff;\n  box-shadow: 0 25px 30px rgba(0, 0, 0, 0.07);\n  height: 310px;\n}\n\n\n/* 헤더 스타일 */\nh4 {\n  margin-bottom: 20px; /* 여백을 더 줍니다 */\n  font-size: 22px; /* 크기를 키웁니다 */\n  font-weight: 600; /* 조금 더 강조된 두께 */\n  color: #333; /* 색상은 약간 어두운 회색으로 조정 */\n}\n\n/* 단락 스타일 */\np {\n  font-size: 18px; /* 텍스트 크기를 키웁니다 */\n  color: #666; /* 색상은 좀 더 연한 회색으로 조정 */\n  margin-bottom: 10px; /* 단락 사이의 여백을 조정 */\n  line-height: 1.4; /* 줄 간격을 조정하여 가독성을 높입니다 */\n}\n\n\n.project-info-highlight {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: 500; /* 더 강조된 폰트 두께 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #1a237e; /* 진한 파란색으로 변경 */\n}\n\n.progress {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #4caf50; /* 진한 녹색으로 변경 */\n}\n\n.epoch {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #ff9800; /* 주황색으로 변경 */\n}\n\n.accuracy {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #009688; /* 테일 그린색으로 변경 */\n}\n\n.loss {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #f44336; /* 빨간색으로 변경 */\n}\n\n\n</style>\n"],"mappings":"AAsBA,OAAOA,WAAW,MAAM,+BAA+B;AACvD,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,SAASC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,GAAG,QAAQ,KAAK;AAClE,SAASC,QAAQ,QAAQ,MAAM;;;;;;;IAG/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IACxB,MAAME,UAAU,GAAGH,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;;IAE9B,SAASI,aAAaA,CAACC,SAAS,EAAE;MAChC,IAAIF,UAAU,CAACG,KAAK,EAAE;QACpBC,aAAa,CAACJ,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC;MACnC;MACAH,UAAU,CAACG,KAAK,GAAGE,WAAW,CAAC,MAAM;QACnCN,KAAK,CAACO,QAAQ,CAAC,sBAAsB,EAAEJ,SAAS,CAAC;MACnD,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ;IAEA,MAAMK,aAAa,GAAG;MACpBC,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC;MACxDC,QAAQ,EAAE,CAAC;QACTC,KAAK,EAAE,kBAAkB;QACzBC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAC1BC,IAAI,EAAE,KAAK;QACXC,WAAW,EAAE,mBAAmB;QAChCC,OAAO,EAAE;MACX,CAAC;IACH,CAAC;IAED,MAAMC,YAAY,GAAG;MACnBP,MAAM,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;MACjCC,QAAQ,EAAE,CAAC;QACTE,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC;QACpBK,eAAe,EAAE,CAAC,yBAAyB,EAAE,yBAAyB,EAAE,yBAAyB,CAAC;QAClGC,oBAAoB,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,mBAAmB;MACtF,CAAC;IACH,CAAC;IAGDxB,SAAS,CAAC,MAAM;MACd,IAAIM,KAAK,CAACmB,KAAK,CAACC,SAAS,IAAIpB,KAAK,CAACmB,KAAK,CAACE,SAAS,EAAE;QAClDrB,KAAK,CAACO,QAAQ,CAAC,eAAe,CAAC;QAC/B;QACA,IAAIP,KAAK,CAACmB,KAAK,CAACG,iBAAiB,EAAE;UACjCpB,aAAa,CAACF,KAAK,CAACmB,KAAK,CAACG,iBAAiB,CAAC;QAC9C;MACF;IACF,CAAC,CAAC;IAEF3B,KAAK,CAAC,MAAMK,KAAK,CAACmB,KAAK,CAACG,iBAAiB,EAAGC,KAAK,IAAK;MACpD,IAAIA,KAAK,IAAIvB,KAAK,CAACmB,KAAK,CAACC,SAAS,IAAIpB,KAAK,CAACmB,KAAK,CAACE,SAAS,EAAE;QAC3DrB,KAAK,CAACO,QAAQ,CAAC,sBAAsB,EAAEgB,KAAK,CAAC,CAAC,CAAC;QAC/CrB,aAAa,CAACqB,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,MAAM;QACL,IAAItB,UAAU,CAACG,KAAK,EAAE;UACpBC,aAAa,CAACJ,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC;UACjCH,UAAU,CAACG,KAAK,GAAG,IAAI;QACzB;MACF;IACF,CAAC,EAAE;MAAEoB,SAAS,EAAE;IAAK,CAAC,CAAC;IAEvB3B,WAAW,CAAC,MAAM;MAChB;MACA,IAAII,UAAU,CAACG,KAAK,EAAE;QACpBC,aAAa,CAACJ,UAAU,CAACG,KAAK,CAAC;MACjC;IACF,CAAC,CAAC;;IAEF;IACA,MAAMqB,WAAW,GAAG7B,QAAQ,CAAC,MAAMI,KAAK,CAACmB,KAAK,CAACO,YAAY,CAAC1B,KAAK,CAACmB,KAAK,CAACG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}