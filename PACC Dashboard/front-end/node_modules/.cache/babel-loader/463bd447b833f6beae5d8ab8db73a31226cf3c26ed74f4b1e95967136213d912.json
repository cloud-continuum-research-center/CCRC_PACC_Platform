{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"project-list-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode($setup[\"ProjectList\"])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","$setup"],"sources":["D:\\Git\\ITRC_Front\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\nimport ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\n\nconst store = useStore();\nconst intervalId = ref(null); // Use a ref to keep track of the interval ID\n\nfunction startFetching(projectId) {\n  if (intervalId.value) {\n    clearInterval(intervalId.value); // Clear the current interval if it exists\n  }\n  intervalId.value = setInterval(() => {\n    store.dispatch(\"fetchProjectInfoById\", projectId);\n  }, 3000); // Fetch every 3 seconds\n}\n\nonMounted(() => {\n  if (store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjects\");\n    // Assuming project ID is already selected somewhere and stored in the state\n    if (store.state.selectedProjectId) {\n      startFetching(store.state.selectedProjectId);\n    }\n  }\n});\n\nwatch(() => store.state.selectedProjectId, (newId) => {\n  if (newId && store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjectInfoById\", newId); // Fetch immediately when ID changes\n    startFetching(newId); // Start or restart the fetching interval\n  } else {\n    if (intervalId.value) {\n      clearInterval(intervalId.value); // Clear the interval if the ID becomes invalid\n      intervalId.value = null;\n    }\n  }\n}, { immediate: true });\n\nonUnmounted(() => {\n  // Clean up the interval when the component is destroyed\n  if (intervalId.value) {\n    clearInterval(intervalId.value);\n  }\n});\n\n// Computed property to display project info\nconst projectInfo = computed(() => store.state.projectsInfo[store.state.selectedProjectId] || {});\n\n</script>\n\n<template>\n  <div class=\"dashboard\">\n    <div class=\"project-list-container\">\n      <ProjectList />\n    </div>\n    \n  </div>\n</template>\n\n<style>\n\n.dashboard {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: flex-start;\n  gap: 20px;\n  padding: 20px;\n}\n\n.project-list-container {\n  flex-basis: 100%;\n  max-width: 100%;\n}\n\n.project-info-widget {\n  width: 300px; /* Set the width as needed */\n  padding: 20px;\n  margin-top: 20px; /* Spacing from the top element */\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n}\n\n</style>\n"],"mappings":";;EAoDOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAwB;;uBADrCC,mBAAA,CAKM,OALNC,UAKM,GAJJC,mBAAA,CAEM,OAFNC,UAEM,GADJC,YAAA,CAAeC,MAAA,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}