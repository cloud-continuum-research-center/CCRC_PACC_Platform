{"ast":null,"code":"import { ref, onMounted, watch, computed } from \"vue\";\nimport Chart from \"chart.js/auto\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nexport default {\n  __name: 'LineChartComponent',\n  props: {\n    nodeData: Object,\n    dataType: String // Add a prop to specify the type of data\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const chartCanvas = ref(null);\n    let myChart = null;\n    const createChartData = nodeData => {\n      const dataset = {\n        label: 'GPU Temperature',\n        data: nodeData,\n        borderColor: 'hsl(200, 70%, 50%)',\n        fill: false,\n        pointRadius: 5\n      };\n      return {\n        labels: nodeData.map((_, i) => i + 1),\n        datasets: [dataset]\n      };\n    };\n    const lineChartData = computed(() => createChartData(props.nodeData));\n\n    // Helper function to determine the correct unit\n    const getUnit = dataType => {\n      switch (dataType) {\n        case \"gpuTemperature\":\n          return \"°C\";\n        case \"cpuUtilization\":\n          return \"%\";\n        case \"gpuUtilization\":\n          return \"%\";\n        case \"gpuPowerUsage\":\n          return \"W\";\n        default:\n          return \"\";\n      }\n    };\n    const createChartConfig = (chartData, dataType) => ({\n      type: \"line\",\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: \"Sample Index\"\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: \"Value\"\n            }\n          }\n        },\n        plugins: {\n          tooltip: {\n            mode: \"index\",\n            intersect: false\n          },\n          datalabels: {\n            color: \"#444\",\n            display: \"auto\",\n            font: {\n              weight: \"bold\"\n            },\n            formatter: value => {\n              const unit = getUnit(dataType);\n              return `${value}${unit}`; // Now dynamically applying units\n            }\n          }\n        }\n      },\n      plugins: [ChartDataLabels]\n    });\n    onMounted(() => {\n      if (chartCanvas.value) {\n        const context = chartCanvas.value.getContext(\"2d\");\n        if (context) {\n          const config = createChartConfig(lineChartData.value, props.dataType);\n          myChart = new Chart(context, config);\n        } else {\n          console.error(\"Failed to get canvas context\");\n        }\n      } else {\n        console.error(\"Canvas element not found\");\n      }\n    });\n    watch(() => [props.nodeData, props.dataType], newValues => {\n      if (myChart) {\n        const [newData, newType] = newValues;\n        const newChartData = createChartData(newData);\n        myChart.data = newChartData;\n        myChart.options = createChartConfig(newChartData, newType).options;\n        myChart.update();\n      }\n    }, {\n      immediate: true\n    });\n    const __returned__ = {\n      props,\n      chartCanvas,\n      get myChart() {\n        return myChart;\n      },\n      set myChart(v) {\n        myChart = v;\n      },\n      createChartData,\n      lineChartData,\n      getUnit,\n      createChartConfig,\n      ref,\n      onMounted,\n      watch,\n      computed,\n      get Chart() {\n        return Chart;\n      },\n      get ChartDataLabels() {\n        return ChartDataLabels;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","computed","Chart","ChartDataLabels","props","__props","chartCanvas","myChart","createChartData","nodeData","dataset","label","data","borderColor","fill","pointRadius","labels","map","_","i","datasets","lineChartData","getUnit","dataType","createChartConfig","chartData","type","options","responsive","maintainAspectRatio","scales","x","title","display","text","y","plugins","tooltip","mode","intersect","datalabels","color","font","weight","formatter","value","unit","context","getContext","config","console","error","newValues","newData","newType","newChartData","update","immediate"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/LineChartComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <canvas ref=\"chartCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, watch, defineProps, computed } from \"vue\";\r\nimport Chart from \"chart.js/auto\";\r\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\r\n\r\nconst props = defineProps({\r\n  nodeData: Object,\r\n  dataType: String, // Add a prop to specify the type of data\r\n});\r\n\r\nconst chartCanvas = ref(null);\r\nlet myChart = null;\r\n\r\nconst createChartData = (nodeData) => {\r\n  const dataset = {\r\n    label: 'GPU Temperature',\r\n    data: nodeData,\r\n    borderColor: 'hsl(200, 70%, 50%)',\r\n    fill: false,\r\n    pointRadius: 5\r\n  };\r\n\r\n  return {\r\n    labels: nodeData.map((_, i) => i + 1),\r\n    datasets: [dataset]\r\n  };\r\n};\r\n\r\nconst lineChartData = computed(() => createChartData(props.nodeData));\r\n\r\n// Helper function to determine the correct unit\r\nconst getUnit = (dataType) => {\r\n  switch (dataType) {\r\n    case \"gpuTemperature\":\r\n      return \"°C\";\r\n    case \"cpuUtilization\":\r\n      return \"%\";\r\n    case \"gpuUtilization\":\r\n      return \"%\";\r\n    case \"gpuPowerUsage\":\r\n      return \"W\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nconst createChartConfig = (chartData, dataType) => ({\r\n  type: \"line\",\r\n  data: chartData,\r\n  options: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: \"Sample Index\",\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: \"Value\",\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n      },\r\n      datalabels: {\r\n        color: \"#444\",\r\n        display: \"auto\",\r\n        font: {\r\n          weight: \"bold\",\r\n        },\r\n        formatter: (value) => {\r\n          const unit = getUnit(dataType);\r\n          return `${value}${unit}`; // Now dynamically applying units\r\n        },\r\n      },\r\n    },\r\n  },\r\n  plugins: [ChartDataLabels],\r\n});\r\n\r\nonMounted(() => {\r\n  if (chartCanvas.value) {\r\n    const context = chartCanvas.value.getContext(\"2d\");\r\n    if (context) {\r\n      const config = createChartConfig(lineChartData.value, props.dataType);\r\n      myChart = new Chart(context, config);\r\n    } else {\r\n      console.error(\"Failed to get canvas context\");\r\n    }\r\n  } else {\r\n    console.error(\"Canvas element not found\");\r\n  }\r\n});\r\n\r\nwatch(\r\n  () => [props.nodeData, props.dataType],\r\n  (newValues) => {\r\n    if (myChart) {\r\n      const [newData, newType] = newValues;\r\n      const newChartData = createChartData(newData);\r\n      myChart.data = newChartData;\r\n      myChart.options = createChartConfig(newChartData, newType).options;\r\n      myChart.update();\r\n    }\r\n  },\r\n  { immediate: true },\r\n);\r\n</script>\r\n\r\n<style>\r\n.chart-container {\r\n  position: relative;\r\n  height: 35vh; /* Adjust the height as needed */\r\n  width: 35vw; /* Adjust the width to ensure each chart has enough space */\r\n  margin-bottom: 20px; /* Add some space between the chart containers */\r\n}\r\n\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}