{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-36d561f8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"dataset-selector-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"dataset-header\"\n}, \"학습 데이터 선택\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"dataset-content\"\n};\nconst _hoisted_4 = {\n  class: \"dataset-list\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"dataset-description\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.datasets, dataset => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: dataset.dataset_id,\n      onClick: $event => $setup.updateSelectedDataset(dataset),\n      class: _normalizeClass({\n        selected: dataset.dataset_id === $setup.selectedDataset.dataset_id\n      })\n    }, _toDisplayString(dataset.name), 11 /* TEXT, CLASS, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"h3\", null, _toDisplayString($setup.selectedDataset?.name || \"No dataset selected\"), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.selectedDataset?.description || \"\"), 1 /* TEXT */)])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","$setup","datasets","dataset","key","dataset_id","onClick","$event","updateSelectedDataset","_normalizeClass","selectedDataset","name","_hoisted_5","_hoisted_6","_toDisplayString","description"],"sources":["D:\\Git\\ITRC_Front\\vue-flask-dashboard\\front-end\\src\\views\\components\\DatasetSelector.vue"],"sourcesContent":["<template>\n  <div class=\"dataset-selector-container\">\n    <h2 class=\"dataset-header\">학습 데이터 선택</h2>\n    <div class=\"dataset-content\">\n      <div class=\"dataset-list\">\n        <ul>\n          <li\n            v-for=\"dataset in datasets\"\n            :key=\"dataset.dataset_id\"\n            @click=\"updateSelectedDataset(dataset)\"\n            :class=\"{\n              selected: dataset.dataset_id === selectedDataset.dataset_id,\n            }\"\n          >\n            {{ dataset.name }}\n          </li>\n        </ul>\n      </div>\n      <div class=\"dataset-description\">\n        <h3>{{ selectedDataset?.name || \"No dataset selected\" }}</h3>\n        <p>{{ selectedDataset?.description || \"\" }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, defineEmits } from \"vue\";\nimport { useStore } from \"vuex\";\n\nconst emit = defineEmits([\"update:modelValue\"]);\n\nconst store = useStore();\nconst datasets = computed(() => store.state.datasets);\nconst selectedDataset = ref({});\n\nonMounted(async () => {\n  await store.dispatch(\"fetchDatasets\");\n  if (datasets.value.length > 0) {\n    selectedDataset.value = datasets.value[0]; // Set the first dataset as selected\n    emit(\"update:modelValue\", datasets.value[0].dataset_id); // Emit its dataset_id\n  }\n});\n\nfunction updateSelectedDataset(dataset) {\n  if (dataset) {\n    selectedDataset.value = dataset;\n    emit(\"update:modelValue\", dataset.dataset_id); // Emit the dataset_id\n  }\n}\n</script>\n\n<style scoped>\n.dataset-selector-container {\n  border: 1px solid #e0e0e0; /* 테두리를 회색으로 설정합니다. */\n  background-color: #fff; /* 배경색을 흰색으로 설정합니다. */\n  border-radius: 12px; /* 테두리의 모서리를 둥글게 처리합니다. */\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* 그림자를 추가하여 입체감을 줍니다. */\n  display: flex; /* flexbox 레이아웃을 사용하여 자식 요소들을 효율적으로 정렬합니다. */\n  flex-direction: column; /* 자식 요소들을 세로로 정렬합니다. */\n  overflow: hidden; /* 컨테이너의 크기를 벗어나는 내용을 숨깁니다. */\n  margin-top: 30px; /* 위쪽 마진을 추가합니다. */\n}\n\n.dataset-header {\n  text-align: left; /* 텍스트를 왼쪽에 정렬합니다. */\n  padding: 15px 20px; /* 헤더에 내부 여백을 추가합니다. */\n  background: #f8f8f8; /* 헤더 배경색을 연한 회색으로 설정합니다. */\n  font-size: 32px; /* 글꼴 크기를 설정합니다. */\n  font-weight: 600; /* 글꼴 두께를 강조합니다. */\n  color: #333; /* 글꼴 색상을 어두운 회색으로 설정합니다. */\n  border-bottom: 1px solid #ddd; /* 헤더 아래에 경계선을 추가합니다. */\n  margin-bottom: 0px;   /* 마진 0으로 안하면 리스트와 헤더 사이에 붕 뜸*/\n}\n\n.dataset-content {\n  display: flex; /* 데이터셋 리스트와 설명을 가로로 나란히 정렬합니다. */\n}\n\n.dataset-list ul {\n  list-style-type: none; /* 리스트의 기본 스타일을 없앱니다. */\n  padding: 0; /* 내부 여백을 제거합니다. */\n  margin: 0; /* 외부 여백을 제거합니다. */\n  width: 250px; /* 너비를 설정합니다. */\n  border-right: 1px solid #ddd; /* 오른쪽에 경계선을 추가합니다. */\n}\n\n.dataset-list li {\n  padding: 15px 20px; /* 리스트 아이템에 내부 여백을 추가합니다. */\n  cursor: pointer; /* 마우스 커서를 포인터로 변경합니다. */\n  transition: background-color 0.3s; /* 배경색 변경시 트랜지션 효과를 적용합니다. */\n  font-size: 20px; /* 글꼴 크기를 설정합니다. */\n  color: #333; /* 글꼴 색상을 어두운 회색으로 설정합니다. */\n  border-bottom: 1px solid #eee; /* 아래쪽에 경계선을 추가합니다. */\n}\n\n.dataset-list li:hover,\n.dataset-list li.selected {\n  background-color: #e3f2fd; /* 호버 또는 선택된 상태에서 배경색을 변경합니다. */\n}\n\n.dataset-description {\n  \n  padding: 20px; /* 설명 부분에 여백을 추가합니다. */\n  flex-grow: 1; /* 남은 공간을 모두 채웁니다. */\n  background-color: #fafafa; /* 배경색을 연한 회색으로 설정합니다. */\n  border-radius: 0 12px 12px 0; /* 오른쪽 모서리를 둥글게 처리합니다. */\n}\n\n.dataset-description p\n{\n  \n  font-size: 22px; /* 글꼴 크기 */\n  color: #666; /* 글꼴 색상 */\n  margin-bottom: 10px; /* 아래쪽 마진 추가 */\n  line-height: 1.4; /* 줄 간격 설정 */\n\n}\n.dataset-description h3 {\n  \n  margin-top: 0; /* 위쪽 마진 제거 */\n  font-size: 25px; /* 글꼴 크기 */\n  color: #333; /* 글꼴 색상 */\n}\n\n@media (max-width: 768px) {\n  .dataset-selector-container {\n    flex-direction: column; /* 화면 크기가 작을 때 세로로 정렬합니다. */\n  }\n\n  .dataset-list ul {\n    width: auto; /* 너비를 자동으로 조절합니다. */\n    border-right: none; /* 오른쪽 경계선을 제거합니다. */\n  }\n\n  .dataset-list li {\n    border-bottom: none; /* 아래쪽 경계선을 제거합니다. */\n  }\n}\n\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAA4B;gEACrCC,mBAAA,CAAyC;EAArCD,KAAK,EAAC;AAAgB,GAAC,WAAS;;EAC/BA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAc;mBAJ/B;;EAkBWA,KAAK,EAAC;AAAqB;;uBAjBpCE,mBAAA,CAsBM,OAtBNC,UAsBM,GArBJC,UAAyC,EACzCH,mBAAA,CAmBM,OAnBNI,UAmBM,GAlBJJ,mBAAA,CAaM,OAbNK,UAaM,GAZJL,mBAAA,CAWK,c,kBAVHC,mBAAA,CASKK,SAAA,QAffC,WAAA,CAO8BC,MAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBADhBT,mBAAA,CASK;MAPFU,GAAG,EAAED,OAAO,CAACE,UAAU;MACvBC,OAAK,EAAAC,MAAA,IAAEN,MAAA,CAAAO,qBAAqB,CAACL,OAAO;MACpCX,KAAK,EAVlBiB,eAAA;kBAU8CN,OAAO,CAACE,UAAU,KAAKJ,MAAA,CAAAS,eAAe,CAACL;;wBAItEF,OAAO,CAACQ,IAAI,gCAd3BC,UAAA;sCAkBMnB,mBAAA,CAGM,OAHNoB,UAGM,GAFJpB,mBAAA,CAA6D,YAAAqB,gBAAA,CAAtDb,MAAA,CAAAS,eAAe,EAAEC,IAAI,2CAC5BlB,mBAAA,CAA+C,WAAAqB,gBAAA,CAAzCb,MAAA,CAAAS,eAAe,EAAEK,WAAW,uB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}