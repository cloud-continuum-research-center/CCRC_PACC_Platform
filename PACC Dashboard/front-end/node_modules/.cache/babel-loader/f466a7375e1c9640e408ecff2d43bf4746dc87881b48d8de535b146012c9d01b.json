{"ast":null,"code":"import { ref, onMounted, watch, computed } from 'vue';\nimport Chart from \"chart.js/auto\";\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nexport default {\n  __name: 'GaugeComponent',\n  props: {\n    totalSize: Number,\n    remainingSize: Number,\n    nodeName: String\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const chartCanvas = ref(null);\n    let myChart = null;\n    const createChartData = (totalSize, remainingSize) => {\n      const usedSize = totalSize - remainingSize;\n      return {\n        labels: [\"Used\", \"Free\"],\n        datasets: [{\n          label: 'Memory Usage',\n          data: [usedSize, remainingSize],\n          backgroundColor: [\"#42A5F5\", \"#ddd\"],\n          borderWidth: 0\n        }]\n      };\n    };\n    const memoryUsageData = computed(() => createChartData(props.totalSize, props.remainingSize)); // Now using computed\n\n    // Chart.js chart configuration\n    const createChartConfig = (chartData, nodeName) => {\n      return {\n        type: \"doughnut\",\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          animation: {\n            animateRotate: true,\n            animateScale: false\n          },\n          circumference: 180,\n          rotation: 270,\n          plugins: {\n            tooltip: {\n              enabled: false // Disable default tooltips\n            },\n            datalabels: {\n              color: '#ff0000',\n              // Red color for the percentage in the center\n              textAlign: 'center',\n              font: {\n                weight: 'bold',\n                size: 18 // Slightly larger font size for the percentage\n              },\n              formatter: (value, context) => {\n                // Display the label only for the first dataset (Used memory)\n                if (context.dataIndex === 0) {\n                  const percentage = (value / totalSize * 100).toFixed(2) + '%';\n                  return percentage;\n                }\n                return null; // Return null for other data to avoid duplication\n              },\n              anchor: 'center',\n              align: 'center',\n              offset: 0\n            },\n            title: {\n              display: true,\n              text: nodeName,\n              position: 'top',\n              color: '#666',\n              font: {\n                size: 16\n              }\n            }\n          }\n        },\n        plugins: [ChartDataLabels] // Register the plugin here\n      };\n    };\n    onMounted(() => {\n      const chartData = createChartData(props.totalSize, props.remainingSize);\n      const config = createChartConfig(chartData, props.nodeName, props.totalSize);\n      const context = chartCanvas.value.getContext('2d');\n      myChart = new Chart(context, config);\n    });\n    watch(() => [props.totalSize, props.remainingSize], newValues => {\n      const [totalSize, remainingSize] = newValues;\n      const newChartData = createChartData(totalSize, remainingSize);\n      if (myChart) {\n        myChart.data.datasets[0].data = newChartData.datasets[0].data;\n        myChart.options.plugins.title.text = props.nodeName;\n        myChart.update();\n      }\n    }, {\n      immediate: true\n    });\n    const __returned__ = {\n      props,\n      chartCanvas,\n      get myChart() {\n        return myChart;\n      },\n      set myChart(v) {\n        myChart = v;\n      },\n      createChartData,\n      memoryUsageData,\n      createChartConfig,\n      ref,\n      onMounted,\n      watch,\n      computed,\n      get Chart() {\n        return Chart;\n      },\n      get ChartDataLabels() {\n        return ChartDataLabels;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","computed","Chart","ChartDataLabels","props","__props","chartCanvas","myChart","createChartData","totalSize","remainingSize","usedSize","labels","datasets","label","data","backgroundColor","borderWidth","memoryUsageData","createChartConfig","chartData","nodeName","type","options","responsive","maintainAspectRatio","animation","animateRotate","animateScale","circumference","rotation","plugins","tooltip","enabled","datalabels","color","textAlign","font","weight","size","formatter","value","context","dataIndex","percentage","toFixed","anchor","align","offset","title","display","text","position","config","getContext","newValues","newChartData","update","immediate"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/GaugeComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <canvas ref=\"chartCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, watch, defineProps, computed } from 'vue';\r\nimport Chart from \"chart.js/auto\";\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\n\r\nconst props = defineProps({\r\n  totalSize: Number,\r\n  remainingSize: Number,\r\n  nodeName: String\r\n});\r\n\r\nconst chartCanvas = ref(null);\r\nlet myChart = null;\r\n\r\nconst createChartData = (totalSize, remainingSize) => {\r\n  const usedSize = totalSize - remainingSize;\r\n  return {\r\n    labels: [\"Used\", \"Free\"],\r\n    datasets: [\r\n      {\r\n        label: 'Memory Usage',\r\n        data: [usedSize, remainingSize],\r\n        backgroundColor: [\"#42A5F5\", \"#ddd\"],\r\n        borderWidth: 0,\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\nconst memoryUsageData = computed(() => createChartData(props.totalSize, props.remainingSize)); // Now using computed\r\n\r\n// Chart.js chart configuration\r\nconst createChartConfig = (chartData, nodeName) => {\r\n  return {\r\n    type: \"doughnut\",\r\n    data: chartData,\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        animateRotate: true,\r\n        animateScale: false,\r\n      },\r\n      circumference: 180,\r\n      rotation: 270,\r\n      plugins: {\r\n        tooltip: {\r\n          enabled: false, // Disable default tooltips\r\n        },\r\n        datalabels: {\r\n          color: '#ff0000', // Red color for the percentage in the center\r\n          textAlign: 'center',\r\n          font: {\r\n            weight: 'bold',\r\n            size: 18, // Slightly larger font size for the percentage\r\n          },\r\n          formatter: (value, context) => {\r\n            // Display the label only for the first dataset (Used memory)\r\n            if (context.dataIndex === 0) {\r\n              const percentage = (value / totalSize * 100).toFixed(2) + '%';\r\n              return percentage;\r\n            }\r\n            return null; // Return null for other data to avoid duplication\r\n          },\r\n          anchor: 'center',\r\n          align: 'center',\r\n          offset: 0,\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: nodeName,\r\n          position: 'top',\r\n          color: '#666',\r\n          font: {\r\n            size: 16,\r\n          },\r\n        },\r\n      }\r\n    },\r\n    plugins: [ChartDataLabels], // Register the plugin here\r\n  };\r\n};\r\n\r\nonMounted(() => {\r\n  const chartData = createChartData(props.totalSize, props.remainingSize);\r\n  const config = createChartConfig(chartData, props.nodeName, props.totalSize);\r\n\r\n  const context = chartCanvas.value.getContext('2d');\r\n  myChart = new Chart(context, config);\r\n});\r\n\r\nwatch(() => [props.totalSize, props.remainingSize], (newValues) => {\r\n  const [totalSize, remainingSize] = newValues;\r\n  const newChartData = createChartData(totalSize, remainingSize);\r\n\r\n  if (myChart) {\r\n    myChart.data.datasets[0].data = newChartData.datasets[0].data;\r\n    myChart.options.plugins.title.text = props.nodeName;\r\n    myChart.update();\r\n  }\r\n}, { immediate: true });\r\n\r\n</script>\r\n\r\n<style>\r\n.chart-container {\r\n  overflow: visible; /* Ensures no clipping */\r\n  opacity: 1; /* Checks that it's not hidden */\r\n  position: relative;\r\n  height: 40vh;\r\n  width: 80vw;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}