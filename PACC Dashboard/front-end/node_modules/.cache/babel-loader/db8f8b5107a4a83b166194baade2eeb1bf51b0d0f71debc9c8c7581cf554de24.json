{"ast":null,"code":"import { createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"memory-info\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"ProjectList\"]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNodes, node => {\n    return _openBlock(), _createBlock($setup[\"MemoryGauge\"], {\n      key: node.id,\n      nodeName: node.name,\n      \"total-size\": node?.total_memory_mb,\n      \"remaining-size\": $setup.getNodeFreeMemory(node.name)\n    }, null, 8 /* PROPS */, [\"nodeName\", \"total-size\", \"remaining-size\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_2, [_createTextVNode(\" Total Memory: \" + _toDisplayString(_ctx.node.total_memory_mb) + \" MB \", 1 /* TEXT */), _hoisted_3, _createTextVNode(\" Free Memory: \" + _toDisplayString($setup.getNodeFreeMemory(_ctx.node.name)) + \" MB \", 1 /* TEXT */)])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_createVNode","$setup","_Fragment","_renderList","filteredNodes","node","_createBlock","key","id","nodeName","name","total_memory_mb","getNodeFreeMemory","_hoisted_2","_createTextVNode","_toDisplayString","_ctx","_hoisted_3"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n\r\nconst getNodeFreeMemory = (nodeName) => {\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  if (selectedNodeNames.includes(nodeName)) {\r\n    return store.getters.getNodeMemory(nodeName) || 0;\r\n  }\r\n  return 0; // If the node is not part of the selected project, return 0\r\n};\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <ProjectList />\r\n    <MemoryGauge\r\n      v-for=\"node in filteredNodes\"\r\n      :key=\"node.id\"\r\n      :nodeName=\"node.name\"\r\n      :total-size=\"node?.total_memory_mb\"\r\n      :remaining-size=\"getNodeFreeMemory(node.name)\"\r\n    />\r\n    <div class=\"memory-info\">\r\n        Total Memory: {{ node.total_memory_mb }} MB\r\n        <br>\r\n        Free Memory: {{ getNodeFreeMemory(node.name) }} MB\r\n      </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style>\r\n"],"mappings":";;EAyDOA,KAAK,EAAC;AAAW;;EASfA,KAAK,EAAC;AAAa;gCAEpBC,mBAAA,CAAI;;uBAXVC,mBAAA,CAcM,OAdNC,UAcM,GAbJC,YAAA,CAAeC,MAAA,mB,kBACfH,mBAAA,CAMEI,SAAA,QAjENC,WAAA,CA4DqBF,MAAA,CAAAG,aAAa,EAArBC,IAAI;yBADbC,YAAA,CAMEL,MAAA;MAJCM,GAAG,EAAEF,IAAI,CAACG,EAAE;MACZC,QAAQ,EAAEJ,IAAI,CAACK,IAAI;MACnB,YAAU,EAAEL,IAAI,EAAEM,eAAe;MACjC,gBAAc,EAAEV,MAAA,CAAAW,iBAAiB,CAACP,IAAI,CAACK,IAAI;;kCAE9Cb,mBAAA,CAIQ,OAJRgB,UAIQ,GAtEZC,gBAAA,CAkE6B,iBACP,GAAAC,gBAAA,CAAGC,IAAA,CAAAX,IAAI,CAACM,eAAe,IAAG,MACxC,iBAAAM,UAAI,EApEZH,gBAAA,CAoEY,gBACS,GAAAC,gBAAA,CAAGd,MAAA,CAAAW,iBAAiB,CAACI,IAAA,CAAAX,IAAI,CAACK,IAAI,KAAI,MACjD,gB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}