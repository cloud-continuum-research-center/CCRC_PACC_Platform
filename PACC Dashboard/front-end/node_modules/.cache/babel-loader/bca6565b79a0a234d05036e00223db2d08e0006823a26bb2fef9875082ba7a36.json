{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"project-list-container\"\n};\nconst _hoisted_3 = {\n  class: \"chart-list-container\"\n};\nconst _hoisted_4 = {\n  class: \"chart-display-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Project List remains the same \"), _createElementVNode(\"div\", _hoisted_2, [_createVNode($setup[\"ProjectList\"])]), _createCommentVNode(\" Chart List container \"), _createElementVNode(\"div\", _hoisted_3, [_createVNode($setup[\"ChartList\"], {\n    nodes: $setup.filteredNodes,\n    onChartSelected: $setup.handleChartSelection\n  }, null, 8 /* PROPS */, [\"nodes\"])]), _createCommentVNode(\" Chart Display Container \"), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNodes, node => {\n    return _withDirectives((_openBlock(), _createElementBlock(\"div\", {\n      key: node.id\n    }, [$setup.selectedChart === 'Memory Usage' ? (_openBlock(), _createBlock($setup[\"MemoryGauge\"], {\n      key: 0,\n      nodeName: node.name,\n      \"total-size\": node.total_memory_mb,\n      \"remaining-size\": $setup.nodeFreeMemories[node.name]\n    }, null, 8 /* PROPS */, [\"nodeName\", \"total-size\", \"remaining-size\"])) : _createCommentVNode(\"v-if\", true), $setup.selectedChart === 'Disk Usage' ? (_openBlock(), _createBlock($setup[\"DiskGauge\"], {\n      key: 1,\n      nodeName: node.name,\n      \"total-size\": node.total_disk_mb,\n      \"remaining-size\": $setup.nodeFreeDisk[node.name]\n    }, null, 8 /* PROPS */, [\"nodeName\", \"total-size\", \"remaining-size\"])) : _createCommentVNode(\"v-if\", true)])), [[_vShow, _ctx.selectedChartName === node.name]]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_createVNode","$setup","_hoisted_3","nodes","filteredNodes","onChartSelected","handleChartSelection","_hoisted_4","_Fragment","_renderList","node","key","id","selectedChart","_createBlock","nodeName","name","total_memory_mb","nodeFreeMemories","total_disk_mb","nodeFreeDisk","_ctx","selectedChartName"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport { onMounted, onUnmounted, computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport ProjectList from './components/ProjectsList.vue';\r\nimport ChartList from './components/ChartList.vue';\r\nimport MemoryGauge from './components/MemoryGaugeComponent.vue';\r\nimport DiskGauge from './components/DiskGaugeComponent.vue';\r\n\r\nconst store = useStore();\r\n\r\n\r\nconst selectedChart = ref('');\r\nconst handleChartSelection = chartName => {\r\n  selectedChart.value = chartName;\r\n};\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \")\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)))\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const memory = store.getters.getNodeMemory(node.name) || 0;\r\n    memories[node.name] = memory;\r\n    console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\r\n  });\r\n  return memories;\r\n});\r\n\r\nconst nodeFreeDisk = computed(() => {\r\n  const Disks = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 디스크 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const Disk = store.getters.getNodeDisk(node.name) || 0;\r\n    Disks[node.name] = Disk;\r\n    console.log(\"남은 디스크가져오는 중: \", node.name, Disk);\r\n  });\r\n  return Disks;\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <!-- Project List remains the same -->\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <!-- Chart List container -->\r\n    <div class=\"chart-list-container\">\r\n      <ChartList :nodes=\"filteredNodes\" @chart-selected=\"handleChartSelection\" />\r\n    </div>\r\n    <!-- Chart Display Container -->\r\n    <div class=\"chart-display-container\">\r\n      <div\r\n        v-for=\"node in filteredNodes\"\r\n        :key=\"node.id\"\r\n        v-show=\"selectedChartName === node.name\"\r\n      >\r\n        <MemoryGauge\r\n          v-if=\"selectedChart === 'Memory Usage'\"\r\n          :nodeName=\"node.name\"\r\n          :total-size=\"node.total_memory_mb\"\r\n          :remaining-size=\"nodeFreeMemories[node.name]\"\r\n        />\r\n        <DiskGauge\r\n          v-if=\"selectedChart === 'Disk Usage'\"\r\n          :nodeName=\"node.name\"\r\n          :total-size=\"node.total_disk_mb\"\r\n          :remaining-size=\"nodeFreeDisk[node.name]\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.project-list-container {\r\n  flex-basis: 100%;\r\n  max-width: 100%;\r\n}\r\n\r\n.memory-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.memory-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.memory-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(50% - 30px); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(50% - 30px); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.disk-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.disk-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.disk-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(50% - 30px); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(50% - 30px); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style>"],"mappings":";;EAkFOA,KAAK,EAAC;AAAW;;EAEfA,KAAK,EAAC;AAAwB;;EAI9BA,KAAK,EAAC;AAAsB;;EAI5BA,KAAK,EAAC;AAAyB;;uBAVtCC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BJC,mBAAA,mCAAsC,EACtCC,mBAAA,CAEM,OAFNC,UAEM,GADJC,YAAA,CAAeC,MAAA,iB,GAEjBJ,mBAAA,0BAA6B,EAC7BC,mBAAA,CAEM,OAFNI,UAEM,GADJF,YAAA,CAA2EC,MAAA;IAA/DE,KAAK,EAAEF,MAAA,CAAAG,aAAa;IAAGC,eAAc,EAAEJ,MAAA,CAAAK;wCAErDT,mBAAA,6BAAgC,EAChCC,mBAAA,CAmBM,OAnBNS,UAmBM,I,kBAlBJZ,mBAAA,CAiBMa,SAAA,QA9GZC,WAAA,CA8FuBR,MAAA,CAAAG,aAAa,EAArBM,IAAI;0CADbf,mBAAA,CAiBM;MAfHgB,GAAG,EAAED,IAAI,CAACE;QAIHX,MAAA,CAAAY,aAAa,uB,cADrBC,YAAA,CAKEb,MAAA;MAvGVU,GAAA;MAoGWI,QAAQ,EAAEL,IAAI,CAACM,IAAI;MACnB,YAAU,EAAEN,IAAI,CAACO,eAAe;MAChC,gBAAc,EAAEhB,MAAA,CAAAiB,gBAAgB,CAACR,IAAI,CAACM,IAAI;6EAtGrDnB,mBAAA,gBAyGgBI,MAAA,CAAAY,aAAa,qB,cADrBC,YAAA,CAKEb,MAAA;MA7GVU,GAAA;MA0GWI,QAAQ,EAAEL,IAAI,CAACM,IAAI;MACnB,YAAU,EAAEN,IAAI,CAACS,aAAa;MAC9B,gBAAc,EAAElB,MAAA,CAAAmB,YAAY,CAACV,IAAI,CAACM,IAAI;6EA5GjDnB,mBAAA,e,cAgGgBwB,IAAA,CAAAC,iBAAiB,KAAKZ,IAAI,CAACM,IAAI,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}