{"ast":null,"code":"import { ref, watch } from \"vue\";\nexport default {\n  __name: 'HyperparameterSelector',\n  props: {\n    modelValue: {\n      type: Object,\n      default: () => ({\n        learningRate: 0.0001,\n        batchSize: 32,\n        epochs: 10,\n        optimizer: 'adam',\n        lossFunction: 'categorical_crossentropy'\n      })\n    }\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const localHyperparameters = ref({\n      ...props.modelValue\n    });\n\n    // Watches for external changes to modelValue and updates localHyperparameters accordingly\n    watch(() => props.modelValue, newValue => {\n      localHyperparameters.value = newValue ? {\n        ...newValue\n      } : localHyperparameters.value;\n    }, {\n      deep: true\n    });\n\n    // Handle input changes for numeric values\n    const handleInput = (key, value) => {\n      // 숫자와 소수점(.)을 포함할 수 있는 정규식을 사용하여 입력 검증\n      if (value === '' || /^(\\d+\\.?\\d*|\\.\\d+)$/.test(value)) {\n        const newValue = value === '' ? '' : value; // 빈 문자열을 허용\n        localHyperparameters.value[key] = newValue;\n        // 숫자로 변환 가능한 경우에만 updateModelValue 호출\n        if (!isNaN(parseFloat(newValue))) {\n          updateModelValue();\n        }\n      }\n    };\n    const updateModelValue = () => {\n      emit('update:modelValue', {\n        ...localHyperparameters.value,\n        learningRate: parseFloat(localHyperparameters.value.learningRate) || 0 // 빈 문자열일 경우 0으로 설정\n      });\n    };\n    const __returned__ = {\n      props,\n      emit,\n      localHyperparameters,\n      handleInput,\n      updateModelValue,\n      ref,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","props","__props","emit","__emit","localHyperparameters","modelValue","newValue","value","deep","handleInput","key","test","isNaN","parseFloat","updateModelValue","learningRate"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/HyperparameterSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"hyperparameter-settings\">\r\n    <h2>Hyperparameter Settings</h2>\r\n    <div class=\"hyperparameters\">\r\n      <div class=\"form-group\">\r\n        <label for=\"learningRate\">Learning Rate</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"learningRate\"\r\n          :value=\"localHyperparameters.learningRate ? localHyperparameters.learningRate.toString() : ''\"\r\n          @input=\"handleInput('learningRate', $event.target.value)\"\r\n          min=\"0\"\r\n          step=\"0.0001\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"batchSize\">Batch Size</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"batchSize\"\r\n          @input=\"updateHyperparameters('batchSize',$event.target.valueAsNumber )\"\r\n          min=\"1\"\r\n          step=\"1\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"epochs\">Epochs</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"epochs\"\r\n          @input=\"updateHyperparameters('epochs',$event.target.valueAsNumber )\"\r\n          min=\"1\"\r\n          step=\"1\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"optimizer\">Optimizer</label>\r\n        <select id=\"optimizer\" v-model=\"localHyperparameters.optimizer\">\r\n            <option value=\"adam\" selected v-if=\"!localHyperparameters.optimizer\">Adam</option>\r\n          <option value=\"adam\">Adam</option>\r\n          <option value=\"sgd\">SGD</option>\r\n          <option value=\"rmsprop\">RMSprop</option>\r\n          <!-- Add more optimizers as needed -->\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"lossFunction\">Loss Function</label>\r\n        <select id=\"lossFunction\" v-model=\"localHyperparameters.lossFunction\">\r\n          <option value=\"categorical_crossentropy\">\r\n            Categorical Crossentropy\r\n          </option>\r\n          <option value=\"sparse_categorical_crossentropy\">\r\n            Sparse Categorical Crossentropy\r\n          </option>\r\n          <option value=\"mean_squared_error\">Mean Squared Error</option>\r\n          <!-- Add more loss functions as needed -->\r\n        </select>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref, watch, defineProps, defineEmits } from \"vue\";\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: Object,\r\n    default: () => ({\r\n      learningRate: 0.0001,\r\n      batchSize: 32,\r\n      epochs: 10,\r\n      optimizer: 'adam',\r\n      lossFunction: 'categorical_crossentropy',\r\n    }),\r\n  },\r\n});\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nconst localHyperparameters = ref({ ...props.modelValue });\r\n\r\n// Watches for external changes to modelValue and updates localHyperparameters accordingly\r\nwatch(() => props.modelValue, (newValue) => {\r\n  localHyperparameters.value = newValue ? { ...newValue } : localHyperparameters.value;\r\n}, { deep: true });\r\n\r\n// Handle input changes for numeric values\r\nconst handleInput = (key, value) => {\r\n  // 숫자와 소수점(.)을 포함할 수 있는 정규식을 사용하여 입력 검증\r\n  if (value === '' || /^(\\d+\\.?\\d*|\\.\\d+)$/.test(value)) {\r\n    const newValue = value === '' ? '' : value; // 빈 문자열을 허용\r\n    localHyperparameters.value[key] = newValue;\r\n    // 숫자로 변환 가능한 경우에만 updateModelValue 호출\r\n    if (!isNaN(parseFloat(newValue))) {\r\n      updateModelValue();\r\n    }\r\n  }\r\n};\r\n\r\nconst updateModelValue = () => {\r\n  emit('update:modelValue', {\r\n    ...localHyperparameters.value,\r\n    learningRate: parseFloat(localHyperparameters.value.learningRate) || 0, // 빈 문자열일 경우 0으로 설정\r\n  });\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.hyperparameter-settings {\r\n  max-width: 100%;\r\n}\r\n\r\n.hyperparameters {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n}\r\n\r\n.form-group {\r\n  flex: 1;\r\n  min-width: 160px; /* Adjust the minimum width as needed */\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.form-group input,\r\n.form-group select {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>\r\n"],"mappings":"AA+DA,SAAQA,GAAG,EAAEC,KAA+B,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;;IAEzD,MAAMC,KAAK,GAAGC,OAWZ;IACF,MAAMC,IAAI,GAAGC,MAAkC;IAE/C,MAAMC,oBAAoB,GAAGN,GAAG,CAAC;MAAE,GAAGE,KAAK,CAACK;IAAW,CAAC,CAAC;;IAEzD;IACAN,KAAK,CAAC,MAAMC,KAAK,CAACK,UAAU,EAAGC,QAAQ,IAAK;MAC1CF,oBAAoB,CAACG,KAAK,GAAGD,QAAQ,GAAG;QAAE,GAAGA;MAAS,CAAC,GAAGF,oBAAoB,CAACG,KAAK;IACtF,CAAC,EAAE;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC;;IAElB;IACA,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEH,KAAK,KAAK;MAClC;MACA,IAAIA,KAAK,KAAK,EAAE,IAAI,qBAAqB,CAACI,IAAI,CAACJ,KAAK,CAAC,EAAE;QACrD,MAAMD,QAAQ,GAAGC,KAAK,KAAK,EAAE,GAAG,EAAE,GAAGA,KAAK,CAAC,CAAC;QAC5CH,oBAAoB,CAACG,KAAK,CAACG,GAAG,CAAC,GAAGJ,QAAQ;QAC1C;QACA,IAAI,CAACM,KAAK,CAACC,UAAU,CAACP,QAAQ,CAAC,CAAC,EAAE;UAChCQ,gBAAgB,CAAC,CAAC;QACpB;MACF;IACF,CAAC;IAED,MAAMA,gBAAgB,GAAGA,CAAA,KAAM;MAC7BZ,IAAI,CAAC,mBAAmB,EAAE;QACxB,GAAGE,oBAAoB,CAACG,KAAK;QAC7BQ,YAAY,EAAEF,UAAU,CAACT,oBAAoB,CAACG,KAAK,CAACQ,YAAY,CAAC,IAAI,CAAC,CAAE;MAC1E,CAAC,CAAC;IACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}