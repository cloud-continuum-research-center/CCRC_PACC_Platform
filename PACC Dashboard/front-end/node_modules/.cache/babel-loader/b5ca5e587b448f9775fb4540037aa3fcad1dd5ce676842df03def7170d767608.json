{"ast":null,"code":"import { ref, computed, onMounted } from \"vue\";\nimport { useStore } from 'vuex';\nexport default {\n  __name: 'NodeSelector',\n  props: {\n    modelValue: Array\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const store = useStore();\n    const nodes = computed(() => store.getters.userNodes);\n    const props = __props;\n    const emit = __emit;\n    onMounted(async () => {\n      await store.dispatch('fetchNodes'); // 노드 정보 가져와서 마운트하기. \n    });\n    const selectedNode = ref(null);\n    const isSelected = node => props.modelValue.some(selectedNode => selectedNode.id === node.id);\n\n    // const toggleNodeSelection = (node) => {\n    //   const index = props.modelValue.findIndex(\n    //     (selectedNode) => selectedNode.id === node.id,\n    //   );\n    //   if (index === -1) {\n    //     emit(\"update:modelValue\", [...props.modelValue, node]);\n    //   } else {\n    //     const newSelection = [...props.modelValue];\n    //     newSelection.splice(index, 1);\n    //     emit(\"update:modelValue\", newSelection);\n    //   }\n    //   selectedNode.value = node;\n    // };\n\n    const toggleNodeSelection = node => {\n      node.selected = !node.selected; // Toggle the 'selected' property of the clicked node\n      emit('update:modelValue', nodes.value.filter(n => n.selected)); // Emit only selected nodes\n      selectedNode.value = node.selected ? node : null; // Set or unset the selected node\n    };\n    const nodeStatusDescription = computed(() => {\n      const statusMap = {\n        0: 'waiting',\n        1: 'learning',\n        2: 'learning complete'\n      };\n      return selectedNode.value ? statusMap[selectedNode.value.status] || 'Unknown status' : '';\n    });\n    const sortedSelectedNodes = computed(() => {\n      return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\n    });\n    const __returned__ = {\n      store,\n      nodes,\n      props,\n      emit,\n      selectedNode,\n      isSelected,\n      toggleNodeSelection,\n      nodeStatusDescription,\n      sortedSelectedNodes,\n      ref,\n      computed,\n      onMounted,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","store","nodes","getters","userNodes","props","__props","emit","__emit","dispatch","selectedNode","isSelected","node","modelValue","some","id","toggleNodeSelection","selected","value","filter","n","nodeStatusDescription","statusMap","status","sortedSelectedNodes","sort","a","b","name","localeCompare"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/NodeSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"node-selector-container\">\r\n    <!-- Header above the entire container -->\r\n    <div class=\"node-header\">\r\n      <h2>Node Selection</h2>\r\n    </div>\r\n    <!-- Main content area for node selection -->\r\n    <div class=\"node-content\">\r\n      <!-- Node list on the far left -->\r\n      <div class=\"node-list\">\r\n        <ul>\r\n          <li\r\n            v-for=\"node in nodes\"\r\n            :key=\"node.id\"\r\n            @click=\"toggleNodeSelection(node)\"\r\n            :class=\"{ selected: isSelected(node) }\"\r\n          >\r\n            {{ node.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"node-description\" v-if=\"selectedNode\">\r\n  <h3>{{ selectedNode.name }} Description</h3>\r\n  <!-- Display additional node details -->\r\n  <p>CPU Count: {{ selectedNode.cpu_count }}</p>\r\n  <p>Total Memory: {{ selectedNode.total_memory }} GB</p>\r\n  <p>Total Disk: {{ selectedNode.total_disk }} GB</p>\r\n  <p>Status: {{ nodeStatusDescription }}</p>\r\n</div>\r\n<div class=\"node-description\" v-else>\r\n  <p>Select a node to see its description.</p>\r\n</div>\r\n\r\n      <!-- List of selected nodes on the far right -->\r\n      <div class=\"selected-nodes\">\r\n        <h3>Selected Nodes</h3>\r\n        <ul>\r\n          <li v-for=\"node in sortedSelectedNodes\" :key=\"node.id\">\r\n            {{ node.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, defineEmits, computed, onMounted } from \"vue\";\r\nimport { useStore } from 'vuex';\r\n\r\nconst store = useStore();\r\nconst nodes = computed(() => store.getters.userNodes);\r\n\r\nconst props = defineProps({\r\n  modelValue: Array,\r\n});\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nonMounted(async () => {\r\n  await store.dispatch('fetchNodes'); // 노드 정보 가져와서 마운트하기. \r\n});\r\n\r\nconst selectedNode = ref(null);\r\nconst isSelected = (node) =>\r\n  props.modelValue.some((selectedNode) => selectedNode.id === node.id);\r\n\r\n// const toggleNodeSelection = (node) => {\r\n//   const index = props.modelValue.findIndex(\r\n//     (selectedNode) => selectedNode.id === node.id,\r\n//   );\r\n//   if (index === -1) {\r\n//     emit(\"update:modelValue\", [...props.modelValue, node]);\r\n//   } else {\r\n//     const newSelection = [...props.modelValue];\r\n//     newSelection.splice(index, 1);\r\n//     emit(\"update:modelValue\", newSelection);\r\n//   }\r\n//   selectedNode.value = node;\r\n// };\r\n\r\nconst toggleNodeSelection = (node) => {\r\n  node.selected = !node.selected; // Toggle the 'selected' property of the clicked node\r\n  emit('update:modelValue', nodes.value.filter(n => n.selected)); // Emit only selected nodes\r\n  selectedNode.value = node.selected ? node : null; // Set or unset the selected node\r\n};\r\n\r\nconst nodeStatusDescription = computed(() => {\r\n  const statusMap = {\r\n    0: 'waiting',\r\n    1: 'learning',\r\n    2: 'learning complete',\r\n  };\r\n  return selectedNode.value ? statusMap[selectedNode.value.status] || 'Unknown status' : '';\r\n});\r\n\r\nconst sortedSelectedNodes = computed(() => {\r\n  return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.node-selector-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid #ddd;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n}\r\n\r\n.node-header {\r\n  padding: 10px 20px;\r\n  background-color: #f5f5f5;\r\n  text-align: left;\r\n  font-size: 1.25rem;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.node-content {\r\n  display: flex;\r\n}\r\n\r\n.node-list,\r\n.node-description,\r\n.selected-nodes {\r\n  padding: 20px;\r\n  flex-basis: 33.3333%;\r\n  flex-grow: 1;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.node-list ul,\r\n.selected-nodes ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.node-list li,\r\n.selected-nodes li {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.node-list li:hover,\r\n.node-list li.selected,\r\n.selected-nodes li:hover {\r\n  background-color: #b1f397;\r\n}\r\n\r\n/* Remove border from the last element of the main content */\r\n.selected-nodes {\r\n  border-right: none;\r\n}\r\n\r\n/* Optional: Add some responsive styling */\r\n@media (max-width: 768px) {\r\n  .node-content {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .node-list,\r\n  .node-description,\r\n  .selected-nodes {\r\n    border-right: none;\r\n    border-bottom: 1px solid #ddd;\r\n    flex-basis: auto;\r\n  }\r\n\r\n  .selected-nodes {\r\n    border-bottom: none;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AAgDA,SAASA,GAA6B,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,KAAK;AACxE,SAASC,QAAQ,QAAQ,MAAM;;;;;;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IACxB,MAAME,KAAK,GAAGJ,QAAQ,CAAC,MAAMG,KAAK,CAACE,OAAO,CAACC,SAAS,CAAC;IAErD,MAAMC,KAAK,GAAGC,OAEZ;IACF,MAAMC,IAAI,GAAGC,MAAkC;IAE/CT,SAAS,CAAC,YAAY;MACpB,MAAME,KAAK,CAACQ,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAGb,GAAG,CAAC,IAAI,CAAC;IAC9B,MAAMc,UAAU,GAAIC,IAAI,IACtBP,KAAK,CAACQ,UAAU,CAACC,IAAI,CAAEJ,YAAY,IAAKA,YAAY,CAACK,EAAE,KAAKH,IAAI,CAACG,EAAE,CAAC;;IAEtE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMC,mBAAmB,GAAIJ,IAAI,IAAK;MACpCA,IAAI,CAACK,QAAQ,GAAG,CAACL,IAAI,CAACK,QAAQ,CAAC,CAAC;MAChCV,IAAI,CAAC,mBAAmB,EAAEL,KAAK,CAACgB,KAAK,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;MAChEP,YAAY,CAACQ,KAAK,GAAGN,IAAI,CAACK,QAAQ,GAAGL,IAAI,GAAG,IAAI,CAAC,CAAC;IACpD,CAAC;IAED,MAAMS,qBAAqB,GAAGvB,QAAQ,CAAC,MAAM;MAC3C,MAAMwB,SAAS,GAAG;QAChB,CAAC,EAAE,SAAS;QACZ,CAAC,EAAE,UAAU;QACb,CAAC,EAAE;MACL,CAAC;MACD,OAAOZ,YAAY,CAACQ,KAAK,GAAGI,SAAS,CAACZ,YAAY,CAACQ,KAAK,CAACK,MAAM,CAAC,IAAI,gBAAgB,GAAG,EAAE;IAC3F,CAAC,CAAC;IAEF,MAAMC,mBAAmB,GAAG1B,QAAQ,CAAC,MAAM;MACzC,OAAO,CAAC,GAAGO,KAAK,CAACQ,UAAU,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC;IAC3E,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}