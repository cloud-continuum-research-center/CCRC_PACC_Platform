{"ast":null,"code":"import { computed, ref, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport axios from \"axios\";\nexport default {\n  __name: 'ProjectsList',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const projects = computed(() => store.getters.userProjects);\n    const selectedProject = ref({});\n    watch(() => store.getters.userProjects, newProjects => {\n      // This watcher ensures that if the selected project updates in the store, it reflects in the component\n      if (selectedProject.value && newProjects.length) {\n        const updatedProject = newProjects.find(p => p.id === selectedProject.value.id);\n        if (updatedProject) {\n          selectedProject.value = updatedProject;\n        }\n      }\n    }, {\n      deep: true\n    });\n    const selectProject = project => {\n      selectedProject.value = project;\n    };\n    const parseNodes = nodesJson => {\n      try {\n        return JSON.parse(nodesJson).join(\", \"); // Assuming the nodes are stored in a simple array\n      } catch (e) {\n        return \"Error parsing nodes\";\n      }\n    };\n    const stopTraining = async () => {\n      if (!selectedProject.value || !selectedProject.value.id) {\n        console.error(\"No project selected or selected project does not have an id\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/stop-training\", {\n          projectId: selectedProject.value.id\n        }, {\n          headers: {\n            Authorization: `Bearer ${store.state.authToken}`\n          }\n        });\n        if (response.data.success) {\n          console.log(\"학습 중단 요청 성공\", selectedProject.value.id);\n          alert(\"학습 중단 요청이 성공했습니다.\"); // Alert for success\n          // Refetch projects to update the list\n          await store.dispatch(\"fetchProjects\");\n          // Update selectedProject to reflect the changes if it's still selected\n          const updatedProject = store.getters.userProjects.find(p => p.id === selectedProject.value.id);\n          if (updatedProject) {\n            selectedProject.value = updatedProject;\n          }\n        } else {\n          // Handle case where response.data.success is false\n          throw new Error(\"학습 중단 요청이 실패했습니다.\");\n        }\n      } catch (error) {\n        console.error(\"학습 중단 요청 실패\", selectedProject.value.id, error);\n        // Display an error message to the user\n        alert(\"학습 중지 요청에 실패하였습니다.\"); // Use a more user-friendly error handling instead of alert\n      }\n    };\n    const __returned__ = {\n      store,\n      projects,\n      selectedProject,\n      selectProject,\n      parseNodes,\n      stopTraining,\n      computed,\n      ref,\n      watch,\n      get useStore() {\n        return useStore;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","ref","watch","useStore","axios","store","projects","getters","userProjects","selectedProject","newProjects","value","length","updatedProject","find","p","id","deep","selectProject","project","parseNodes","nodesJson","JSON","parse","join","e","stopTraining","console","error","response","post","projectId","headers","Authorization","state","authToken","data","success","log","alert","dispatch","Error"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/ProjectsList.vue"],"sourcesContent":["<template>\r\n  <div class=\"project-widget\">\r\n    <h4 class=\"project-widget-header\">Project List</h4>\r\n    <div class=\"project-widget-body\">\r\n      <div class=\"project-list-container\">\r\n        <ul class=\"project-list\">\r\n          <li\r\n            v-for=\"(project, index) in projects\"\r\n            :key=\"index\"\r\n            @click=\"selectProject(project)\"\r\n            :class=\"{ 'is-selected': project.id === selectedProject.id }\"\r\n          >\r\n            {{ project.model_name }} - {{ project.dataset_name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"project-description-container\">\r\n        <h4>{{ selectedProject.model_name || \"No project selected\" }}</h4>\r\n        <p>{{ selectedProject.dataset_name }}</p>\r\n        <p>Status: {{ selectedProject.status }}</p>\r\n        <p>Created At: {{ selectedProject.created_at }}</p>\r\n        <p v-if=\"selectedProject.project_nodes\">\r\n          Nodes: {{ parseNodes(selectedProject.project_nodes) }}\r\n        </p>\r\n      </div>\r\n      <div class=\"project-actions-container\">\r\n        <button\r\n          v-if=\"selectedProject.status === '학습 중'\"\r\n          @click=\"stopTraining(selectedProject.id)\"\r\n        >\r\n          학습 중단\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed, ref, watch} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport axios from \"axios\";\r\n\r\nconst store = useStore();\r\nconst projects = computed(() => store.getters.userProjects);\r\nconst selectedProject = ref({});\r\n\r\nwatch(() => store.getters.userProjects, (newProjects) => {\r\n  // This watcher ensures that if the selected project updates in the store, it reflects in the component\r\n  if (selectedProject.value && newProjects.length) {\r\n    const updatedProject = newProjects.find(p => p.id === selectedProject.value.id);\r\n    if (updatedProject) {\r\n      selectedProject.value = updatedProject;\r\n    }\r\n  }\r\n}, { deep: true });\r\n\r\nconst selectProject = (project) => {\r\n  selectedProject.value = project;\r\n};\r\n\r\nconst parseNodes = (nodesJson) => {\r\n  try {\r\n    return JSON.parse(nodesJson).join(\", \"); // Assuming the nodes are stored in a simple array\r\n  } catch (e) {\r\n    return \"Error parsing nodes\";\r\n  }\r\n};\r\n\r\nconst stopTraining = async () => {\r\n  if (!selectedProject.value || !selectedProject.value.id) {\r\n    console.error(\r\n      \"No project selected or selected project does not have an id\",\r\n    );\r\n    return;\r\n  }\r\n  try {\r\n    const response = await axios.post(\r\n      \"http://localhost:5000/api/stop-training\",\r\n      { projectId: selectedProject.value.id },\r\n      { headers: { Authorization: `Bearer ${store.state.authToken}` } },\r\n    );\r\n    if (response.data.success) {\r\n      console.log(\"학습 중단 요청 성공\", selectedProject.value.id);\r\n      alert(\"학습 중단 요청이 성공했습니다.\"); // Alert for success\r\n      // Refetch projects to update the list\r\n      await store.dispatch(\"fetchProjects\");\r\n      // Update selectedProject to reflect the changes if it's still selected\r\n      const updatedProject = store.getters.userProjects.find(\r\n        (p) => p.id === selectedProject.value.id,\r\n      );\r\n      if (updatedProject) {\r\n        selectedProject.value = updatedProject;\r\n      }\r\n    } else {\r\n      // Handle case where response.data.success is false\r\n      throw new Error(\"학습 중단 요청이 실패했습니다.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"학습 중단 요청 실패\", selectedProject.value.id, error);\r\n    // Display an error message to the user\r\n    alert(\"학습 중지 요청에 실패하였습니다.\"); // Use a more user-friendly error handling instead of alert\r\n  }\r\n};\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.project-widget {\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  background-color: #fff;\r\n  margin: 0 auto; /* Center the widget */\r\n  margin-bottom: 20px; /* Add bottom margin */\r\n  width: calc(100% - 10px); /* Reduce the total width by 20px from each side */\r\n  max-width: 1200px; /* Optionally add a max-width if you want to limit the size on larger screens */\r\n}\r\n\r\n.project-widget-header {\r\n  background-color: #f9f9f9;\r\n  padding: 12px 16px;\r\n  margin: 0;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.project-widget-body {\r\n  display: flex;\r\n}\r\n\r\n.project-list-container {\r\n  max-height: 400px; /* Set this to whatever height you want */\r\n  overflow-y: auto; /* This will allow scrolling */\r\n  border-right: 1px solid #ddd;\r\n  flex: 1;\r\n}\r\n.project-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.project-list li {\r\n  padding: 8px 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.project-list li:hover,\r\n.project-list li.is-selected {\r\n  background-color: #e8f0f9;\r\n}\r\n\r\n.project-description-container {\r\n  flex: 2;\r\n  padding: 16px;\r\n}\r\n\r\n.project-actions-container {\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n}\r\n\r\nbutton {\r\n  border-radius: 5px; /* Adjust the pixel value to control the roundness */\r\n  background-color: #90ee90; /* This is a light green color */\r\n  border: none; /* Removes the default border */\r\n  padding: 10px 20px; /* Adds some padding inside the button */\r\n  color: rgb(0, 0, 0); /* Changes the text color to white */\r\n  font-size: 16px; /* Adjust the font size as needed */\r\n  cursor: pointer; /* Changes the cursor to a pointer when hovering over the button */\r\n  transition: background-color 0.3s; /* Smooth transition for background color */\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #76c893; /* Slightly darker green color for the hover state */\r\n}\r\n</style>\r\n"],"mappings":"AAsCA,SAASA,QAAQ,EAAEC,GAAG,EAAEC,KAAK,QAAO,KAAK;AACzC,SAASC,QAAQ,QAAQ,MAAM;AAC/B,OAAOC,KAAK,MAAM,OAAO;;;;;;;IAEzB,MAAMC,KAAK,GAAGF,QAAQ,CAAC,CAAC;IACxB,MAAMG,QAAQ,GAAGN,QAAQ,CAAC,MAAMK,KAAK,CAACE,OAAO,CAACC,YAAY,CAAC;IAC3D,MAAMC,eAAe,GAAGR,GAAG,CAAC,CAAC,CAAC,CAAC;IAE/BC,KAAK,CAAC,MAAMG,KAAK,CAACE,OAAO,CAACC,YAAY,EAAGE,WAAW,IAAK;MACvD;MACA,IAAID,eAAe,CAACE,KAAK,IAAID,WAAW,CAACE,MAAM,EAAE;QAC/C,MAAMC,cAAc,GAAGH,WAAW,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKP,eAAe,CAACE,KAAK,CAACK,EAAE,CAAC;QAC/E,IAAIH,cAAc,EAAE;UAClBJ,eAAe,CAACE,KAAK,GAAGE,cAAc;QACxC;MACF;IACF,CAAC,EAAE;MAAEI,IAAI,EAAE;IAAK,CAAC,CAAC;IAElB,MAAMC,aAAa,GAAIC,OAAO,IAAK;MACjCV,eAAe,CAACE,KAAK,GAAGQ,OAAO;IACjC,CAAC;IAED,MAAMC,UAAU,GAAIC,SAAS,IAAK;MAChC,IAAI;QACF,OAAOC,IAAI,CAACC,KAAK,CAACF,SAAS,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MAC3C,CAAC,CAAC,OAAOC,CAAC,EAAE;QACV,OAAO,qBAAqB;MAC9B;IACF,CAAC;IAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACjB,eAAe,CAACE,KAAK,IAAI,CAACF,eAAe,CAACE,KAAK,CAACK,EAAE,EAAE;QACvDW,OAAO,CAACC,KAAK,CACX,6DACF,CAAC;QACD;MACF;MACA,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAC/B,yCAAyC,EACzC;UAAEC,SAAS,EAAEtB,eAAe,CAACE,KAAK,CAACK;QAAG,CAAC,EACvC;UAAEgB,OAAO,EAAE;YAAEC,aAAa,EAAG,UAAS5B,KAAK,CAAC6B,KAAK,CAACC,SAAU;UAAE;QAAE,CAClE,CAAC;QACD,IAAIN,QAAQ,CAACO,IAAI,CAACC,OAAO,EAAE;UACzBV,OAAO,CAACW,GAAG,CAAC,aAAa,EAAE7B,eAAe,CAACE,KAAK,CAACK,EAAE,CAAC;UACpDuB,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;UAC5B;UACA,MAAMlC,KAAK,CAACmC,QAAQ,CAAC,eAAe,CAAC;UACrC;UACA,MAAM3B,cAAc,GAAGR,KAAK,CAACE,OAAO,CAACC,YAAY,CAACM,IAAI,CACnDC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKP,eAAe,CAACE,KAAK,CAACK,EACxC,CAAC;UACD,IAAIH,cAAc,EAAE;YAClBJ,eAAe,CAACE,KAAK,GAAGE,cAAc;UACxC;QACF,CAAC,MAAM;UACL;UACA,MAAM,IAAI4B,KAAK,CAAC,mBAAmB,CAAC;QACtC;MACF,CAAC,CAAC,OAAOb,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,aAAa,EAAEnB,eAAe,CAACE,KAAK,CAACK,EAAE,EAAEY,KAAK,CAAC;QAC7D;QACAW,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;MAC/B;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}