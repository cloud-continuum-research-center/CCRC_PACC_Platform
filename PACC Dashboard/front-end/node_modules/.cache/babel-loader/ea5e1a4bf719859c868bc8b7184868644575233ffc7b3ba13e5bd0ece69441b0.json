{"ast":null,"code":"import { ref, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'DatasetSelector',\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const emit = __emit;\n    const store = useStore();\n    const datasets = computed(() => store.state.datasets);\n    const selectedDataset = ref({});\n    onMounted(async () => {\n      await store.dispatch('fetchDatasets');\n      if (datasets.value.length > 0) {\n        selectedDataset.value = datasets.value[0]; // Set the first dataset as selected\n        emit('update:modelValue', datasets.value[0].dataset_id); // Emit its dataset_id\n      }\n    });\n    function updateSelectedDataset(dataset) {\n      if (dataset) {\n        selectedDataset.value = dataset;\n        emit('update:modelValue', dataset.dataset_id); // Emit the dataset_id\n      }\n    }\n    const __returned__ = {\n      emit,\n      store,\n      datasets,\n      selectedDataset,\n      updateSelectedDataset,\n      ref,\n      computed,\n      onMounted,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","emit","__emit","store","datasets","state","selectedDataset","dispatch","value","length","dataset_id","updateSelectedDataset","dataset"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/DatasetSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"dataset-selector-container\">\r\n    <h2 class=\"dataset-header\">Dataset Selection</h2>\r\n    <div class=\"dataset-content\">\r\n      <div class=\"dataset-list\">\r\n        <ul>\r\n          <li\r\n            v-for=\"dataset in datasets\"\r\n            :key=\"dataset.dataset_id\"\r\n            @click=\"selectDataset(dataset)\"\r\n            :class=\"{\r\n              selected: dataset.dataset_id === selectedDataset.dataset_id,\r\n            }\"\r\n          >\r\n            {{ dataset.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"dataset-description\">\r\n        <h3>{{ selectedDataset?.name || \"No dataset selected\" }}</h3>\r\n        <p>{{ selectedDataset?.description || \"\" }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, defineEmits } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nconst store = useStore();\r\nconst datasets = computed(() => store.state.datasets);\r\nconst selectedDataset = ref({});\r\n\r\nonMounted(async () => {\r\n  await store.dispatch('fetchDatasets');\r\n  if (datasets.value.length > 0) {\r\n    selectedDataset.value = datasets.value[0]; // Set the first dataset as selected\r\n    emit('update:modelValue', datasets.value[0].dataset_id); // Emit its dataset_id\r\n  }\r\n});\r\n\r\nfunction updateSelectedDataset(dataset) {\r\n  if (dataset) {\r\n    selectedDataset.value = dataset;\r\n    emit('update:modelValue', dataset.dataset_id); // Emit the dataset_id\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dataset-selector-container {\r\n  border: 1px solid #ddd;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n}\r\n.dataset-header {\r\n  text-align: left;\r\n  padding: 10px 20px;\r\n  background: #f5f5f5; /* Header background */\r\n  margin: 0; /* Remove default margin */\r\n  border-bottom: 1px solid #ddd; /* Separator */\r\n}\r\n\r\n.dataset-content {\r\n  display: flex;\r\n}\r\n\r\n.dataset-list ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  width: 250px;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.dataset-list li {\r\n  padding: 15px 20px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.dataset-list li:hover,\r\n.dataset-list li.selected {\r\n  background-color: #b1f397;\r\n}\r\n\r\n.dataset-description {\r\n  padding: 20px;\r\n  flex-grow: 1;\r\n  border-radius: 0 8px 8px 0;\r\n}\r\n\r\n.dataset-description h3 {\r\n  margin-top: 0;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .dataset-selector-container {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .dataset-list ul {\r\n    width: auto;\r\n    border-right: none;\r\n  }\r\n\r\n  .dataset-list li {\r\n    border-bottom: none;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AA2BA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAsB,QAAQ,KAAK;AAC3D,SAASC,QAAQ,QAAQ,MAAM;;;;;;;;;IAG/B,MAAMC,IAAI,GAAGC,MAAkC;IAE/C,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC;IACxB,MAAMI,QAAQ,GAAGN,QAAQ,CAAC,MAAMK,KAAK,CAACE,KAAK,CAACD,QAAQ,CAAC;IACrD,MAAME,eAAe,GAAGT,GAAG,CAAC,CAAC,CAAC,CAAC;IAE/BE,SAAS,CAAC,YAAY;MACpB,MAAMI,KAAK,CAACI,QAAQ,CAAC,eAAe,CAAC;MACrC,IAAIH,QAAQ,CAACI,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QAC7BH,eAAe,CAACE,KAAK,GAAGJ,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3CP,IAAI,CAAC,mBAAmB,EAAEG,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC,CAAC;MAC3D;IACF,CAAC,CAAC;IAEF,SAASC,qBAAqBA,CAACC,OAAO,EAAE;MACtC,IAAIA,OAAO,EAAE;QACXN,eAAe,CAACE,KAAK,GAAGI,OAAO;QAC/BX,IAAI,CAAC,mBAAmB,EAAEW,OAAO,CAACF,UAAU,CAAC,CAAC,CAAC;MACjD;IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}