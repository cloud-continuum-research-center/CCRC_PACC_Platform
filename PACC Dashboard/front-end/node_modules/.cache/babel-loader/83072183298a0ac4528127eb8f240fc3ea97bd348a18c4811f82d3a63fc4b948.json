{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { Chart, registerables } from 'chart.js';\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    Chart.register(...registerables);\n    const lineChart1 = ref(null);\n    const lineChart2 = ref(null);\n    const pieChart1 = ref(null);\n    const pieChart2 = ref(null);\n    const setupCharts = () => {\n      // Clear existing charts to prevent memory leaks\n      clearCharts();\n\n      // Initialize charts if canvas elements are available\n      initializeCharts();\n    };\n    function clearCharts() {\n      if (lineChart1.value && lineChart1.value.destroy) {\n        lineChart1.value.destroy();\n        lineChart1.value = null;\n      }\n      if (lineChart2.value && lineChart2.value.destroy) {\n        lineChart2.value.destroy();\n        lineChart2.value = null;\n      }\n      if (pieChart1.value && pieChart1.value.destroy) {\n        pieChart1.value.destroy();\n        pieChart1.value = null;\n      }\n      if (pieChart2.value && pieChart2.value.destroy) {\n        pieChart2.value.destroy();\n        pieChart2.value = null;\n      }\n    }\n    function initializeCharts() {\n      // Check if canvas elements are available in the DOM\n      if (lineChart1.value && lineChart2.value && pieChart1.value && pieChart2.value) {\n        const ctx1 = lineChart1.value.getContext('2d');\n        const ctx2 = lineChart2.value.getContext('2d');\n        const ctxPie1 = pieChart1.value.getContext('2d');\n        const ctxPie2 = pieChart2.value.getContext('2d');\n        createLineChart(ctx1, projectInfo.value.accuracyList, 'Model Accuracy', 'rgb(75, 192, 192)');\n        createLineChart(ctx2, projectInfo.value.lossList, 'Model Loss', 'rgb(255, 99, 132)');\n        createPieChart(ctxPie1, ['Red', 'Blue', 'Yellow'], [300, 50, 100], ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)']);\n        createPieChart(ctxPie2, ['Green', 'Purple', 'Orange'], [200, 150, 150], ['rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(255, 159, 64)']);\n      } else {\n        console.error(\"Canvas elements are not available for chart initialization.\");\n      }\n    }\n\n    // Example function to create a line chart\n    function createLineChart(context, data, label, borderColor) {\n      new Chart(context, {\n        type: 'line',\n        data: {\n          labels: data.map((_, index) => `Epoch ${index + 1}`),\n          datasets: [{\n            label: label,\n            data: data,\n            fill: false,\n            borderColor: borderColor,\n            tension: 0.1\n          }]\n        }\n      });\n    }\n\n    // Example function to create a pie chart\n    function createPieChart(context, labels, data, backgroundColor) {\n      new Chart(context, {\n        type: 'pie',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Dataset',\n            data: data,\n            backgroundColor: backgroundColor\n          }]\n        }\n      });\n    }\n    const store = useStore();\n    const intervalId = ref(null); // Use a ref to keep track of the interval ID\n\n    function startFetching(projectId) {\n      if (intervalId.value) {\n        clearInterval(intervalId.value); // Clear the current interval if it exists\n      }\n      intervalId.value = setInterval(() => {\n        store.dispatch(\"fetchProjectInfoById\", projectId);\n        setupCharts(); // Update charts every fetch\n      }, 3000); // Fetch every 3 seconds\n    }\n    onMounted(() => {\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // Assuming project ID is already selected somewhere and stored in the state\n        if (store.state.selectedProjectId) {\n          startFetching(store.state.selectedProjectId);\n        }\n      }\n      setupCharts();\n    });\n    watch(() => store.state.selectedProjectId, newId => {\n      if (newId && store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjectInfoById\", newId); // Fetch immediately when ID changes\n        startFetching(newId); // Start or restart the fetching interval\n      } else {\n        if (intervalId.value) {\n          clearInterval(intervalId.value); // Clear the interval if the ID becomes invalid\n          intervalId.value = null;\n        }\n      }\n    }, {\n      immediate: true\n    });\n    onUnmounted(() => {\n      // Clean up the interval when the component is destroyed\n      if (intervalId.value) {\n        clearInterval(intervalId.value);\n      }\n    });\n\n    // Computed property to display project info\n    const projectInfo = computed(() => {\n      const data = store.state.projectsInfo[store.state.selectedProjectId] || {};\n      return {\n        progress: data.progress || 0,\n        epoch: data.epoch || 0,\n        accuracy: data.accuracy && data.accuracy.length > 0 ? data.accuracy[data.accuracy.length - 1] : 0,\n        loss: data.loss && data.loss.length > 0 ? data.loss[data.loss.length - 1] : 0,\n        accuracyList: data.accuracy || [],\n        lossList: data.loss || []\n      };\n    });\n    const __returned__ = {\n      lineChart1,\n      lineChart2,\n      pieChart1,\n      pieChart2,\n      setupCharts,\n      clearCharts,\n      initializeCharts,\n      createLineChart,\n      createPieChart,\n      store,\n      intervalId,\n      startFetching,\n      projectInfo,\n      ProjectList,\n      onMounted,\n      watch,\n      computed,\n      onUnmounted,\n      ref,\n      get useStore() {\n        return useStore;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get registerables() {\n        return registerables;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","onMounted","watch","computed","onUnmounted","ref","useStore","Chart","registerables","register","lineChart1","lineChart2","pieChart1","pieChart2","setupCharts","clearCharts","initializeCharts","value","destroy","ctx1","getContext","ctx2","ctxPie1","ctxPie2","createLineChart","projectInfo","accuracyList","lossList","createPieChart","console","error","context","data","label","borderColor","type","labels","map","_","index","datasets","fill","tension","backgroundColor","store","intervalId","startFetching","projectId","clearInterval","setInterval","dispatch","state","authToken","userEmail","selectedProjectId","newId","immediate","projectsInfo","progress","epoch","accuracy","length","loss"],"sources":["D:/Git/ITRC_Front/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["\n<template>\n  <div class=\"dashboard\">\n    <div class=\"project-list-container\">\n      <ProjectList />\n    </div>\n    <div class=\"project-info-widget\" v-if=\"projectInfo\">\n    <div class=\"tarining-status-header\">\n    <h4>학습 상태</h4>\n    </div>\n    <p> </p> \n    <p> </p> \n    <p> </p> \n    <p class=\"project-info-highlight\">모델 학습 진행율: {{ projectInfo.progress ? `${projectInfo.progress}%` : '0' }}</p>\n    <p class=\"project-info-highlight epoch\">모델 훈련 횟수: {{ projectInfo.epoch !== undefined ? projectInfo.epoch : '0' }}</p>\n    <p class=\"project-info-highlight accuracy\">모델 정확도: {{ projectInfo.accuracy ? projectInfo.accuracy.toFixed(2) + '%' : '0' }}</p>\n    <p class=\"project-info-highlight loss\">모델 Loss 값: {{ projectInfo.loss ? projectInfo.loss.toFixed(4) : '0' }}</p>\n       \n  </div>\n  </div>\n  <div class=\"project-info-widget-chart\" v-if=\"projectInfo\">\n<canvas ref=\"lineChart1\" class=\"canvas-size\"></canvas>\n<canvas ref=\"lineChart2\" class=\"canvas-size\"></canvas>\n<canvas ref=\"pieChart1\" class=\"canvas-size\"></canvas>\n<canvas ref=\"pieChart2\" class=\"canvas-size\"></canvas>\n    </div>\n</template>\n\n\n\n<script setup>\nimport ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\nconst lineChart1 = ref(null);\nconst lineChart2 = ref(null);\nconst pieChart1 = ref(null);\nconst pieChart2 = ref(null);\n\n\n\n\n\n\nconst setupCharts = () => {\n  // Clear existing charts to prevent memory leaks\n  clearCharts();\n\n  // Initialize charts if canvas elements are available\n  initializeCharts();\n};\n\nfunction clearCharts() {\n  if (lineChart1.value && lineChart1.value.destroy) {\n    lineChart1.value.destroy();\n    lineChart1.value = null;\n  }\n  if (lineChart2.value && lineChart2.value.destroy) {\n    lineChart2.value.destroy();\n    lineChart2.value = null;\n  }\n  if (pieChart1.value && pieChart1.value.destroy) {\n    pieChart1.value.destroy();\n    pieChart1.value = null;\n  }\n  if (pieChart2.value && pieChart2.value.destroy) {\n    pieChart2.value.destroy();\n    pieChart2.value = null;\n  }\n}\n\nfunction initializeCharts() {\n  // Check if canvas elements are available in the DOM\n  if (lineChart1.value && lineChart2.value && pieChart1.value && pieChart2.value) {\n    const ctx1 = lineChart1.value.getContext('2d');\n    const ctx2 = lineChart2.value.getContext('2d');\n    const ctxPie1 = pieChart1.value.getContext('2d');\n    const ctxPie2 = pieChart2.value.getContext('2d');\n\n    createLineChart(ctx1, projectInfo.value.accuracyList, 'Model Accuracy', 'rgb(75, 192, 192)');\n    createLineChart(ctx2, projectInfo.value.lossList, 'Model Loss', 'rgb(255, 99, 132)');\n    createPieChart(ctxPie1, ['Red', 'Blue', 'Yellow'], [300, 50, 100], ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)']);\n    createPieChart(ctxPie2, ['Green', 'Purple', 'Orange'], [200, 150, 150], ['rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(255, 159, 64)']);\n  } else {\n    console.error(\"Canvas elements are not available for chart initialization.\");\n  }\n}\n\n// Example function to create a line chart\nfunction createLineChart(context, data, label, borderColor) {\n  new Chart(context, {\n    type: 'line',\n    data: {\n      labels: data.map((_, index) => `Epoch ${index + 1}`),\n      datasets: [{\n        label: label,\n        data: data,\n        fill: false,\n        borderColor: borderColor,\n        tension: 0.1\n      }]\n    }\n  });\n}\n\n// Example function to create a pie chart\nfunction createPieChart(context, labels, data, backgroundColor) {\n  new Chart(context, {\n    type: 'pie',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Dataset',\n        data: data,\n        backgroundColor: backgroundColor\n      }]\n    }\n  });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst store = useStore();\nconst intervalId = ref(null); // Use a ref to keep track of the interval ID\n\nfunction startFetching(projectId) {\n  if (intervalId.value) {\n    clearInterval(intervalId.value); // Clear the current interval if it exists\n  }\n  intervalId.value = setInterval(() => {\n    store.dispatch(\"fetchProjectInfoById\", projectId);\n    setupCharts(); // Update charts every fetch\n  }, 3000); // Fetch every 3 seconds\n}\n\nonMounted(() => {\n  if (store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjects\");\n    // Assuming project ID is already selected somewhere and stored in the state\n    if (store.state.selectedProjectId) {\n      startFetching(store.state.selectedProjectId);\n    }\n  }\n  setupCharts();\n});\n\nwatch(() => store.state.selectedProjectId, (newId) => {\n  if (newId && store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjectInfoById\", newId); // Fetch immediately when ID changes\n    startFetching(newId); // Start or restart the fetching interval\n  } else {\n    if (intervalId.value) {\n      clearInterval(intervalId.value); // Clear the interval if the ID becomes invalid\n      intervalId.value = null;\n    }\n  }\n}, { immediate: true });\n\nonUnmounted(() => {\n  // Clean up the interval when the component is destroyed\n  if (intervalId.value) {\n    clearInterval(intervalId.value);\n  }\n});\n\n// Computed property to display project info\nconst projectInfo = computed(() => {\n  const data = store.state.projectsInfo[store.state.selectedProjectId] || {};\n  return {\n    progress: data.progress || 0,\n    epoch: data.epoch || 0,\n    accuracy: (data.accuracy && data.accuracy.length > 0) ? data.accuracy[data.accuracy.length - 1] : 0,\n    loss: (data.loss && data.loss.length > 0) ? data.loss[data.loss.length - 1] : 0,\n    accuracyList: data.accuracy || [],\n    lossList: data.loss || []\n  };\n});\n</script>\n\n\n<style>\n\n.project-info-widget\n{\n  margin-left: 20px;\n}\n\n.project-info-widget-chart {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n  align-items: flex-start; /* 요소들을 컨테이너의 왼쪽에 정렬 */\n  justify-content: flex-start;\n\n  justify-content: space-around; /* 공간을 균등하게 분배 */\n}\n\n.canvas-size {\n  width: 350px !important; /* 너비 조정 */\n  height: 350px !important; /* 높이 조정 */\n}\n\n.dashboard {\n  display: flex;\n  align-items: flex-start; /* 요소들을 컨테이너의 상단에 정렬 */\n  justify-content: flex-start; /* 요소들을 컨테이너의 왼쪽에서 시작하도록 정렬 */\n  gap: 20px; /* 요소들 사이의 간격 */\n  padding: 20px; /* 대시보드 패딩 */\n  \n}\n\n\n.project-list-container {\n  min-width: 800px; /* 최소 너비 설정 */\n  max-height: 500px; /* 최대 높이 설정 */\n  height: 275px; /* 높이 100%로 설정 */\n\n}\n\n.project-info-widget {\n  flex: 1; /* 유연하게 너비 조정 */\n  flex-grow: 2; /* 컨테이너가 더 많은 공간을 차지하도록 설정 */\n  padding: 20px; \n  margin-top: 0; /* 위쪽 마진 제거 */\n  border: 1px solid #ccc; /* 테두리 설정 */\n  border-radius: 12px;\n  background-color: #fff;\n  box-shadow: 0 25px 30px rgba(0, 0, 0, 0.07);\n  height: 310px;\n}\n\n\n/* 헤더 스타일 */\nh4 {\n  margin-bottom: 20px; /* 여백을 더 줍니다 */\n  font-size: 22px; /* 크기를 키웁니다 */\n  font-weight: 600; /* 조금 더 강조된 두께 */\n  color: #333; /* 색상은 약간 어두운 회색으로 조정 */\n}\n\n/* 단락 스타일 */\np {\n  font-size: 18px; /* 텍스트 크기를 키웁니다 */\n  color: #666; /* 색상은 좀 더 연한 회색으로 조정 */\n  margin-bottom: 10px; /* 단락 사이의 여백을 조정 */\n  line-height: 1.4; /* 줄 간격을 조정하여 가독성을 높입니다 */\n}\n\n\n.project-info-highlight {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: 500; /* 더 강조된 폰트 두께 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #1a237e; /* 진한 파란색으로 변경 */\n}\n\n.progress {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #4caf50; /* 진한 녹색으로 변경 */\n}\n\n.epoch {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #ff9800; /* 주황색으로 변경 */\n}\n\n.accuracy {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #009688; /* 테일 그린색으로 변경 */\n}\n\n.loss {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #f44336; /* 빨간색으로 변경 */\n}\n\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}