{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const intervalId = ref(null); // Use a ref to keep track of the interval ID\n\n    function startFetching(projectId) {\n      if (intervalId.value) {\n        clearInterval(intervalId.value); // Clear the current interval if it exists\n      }\n      intervalId.value = setInterval(() => {\n        store.dispatch(\"fetchProjectInfoById\", projectId);\n      }, 3000); // Fetch every 3 seconds\n    }\n    onMounted(() => {\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // Assuming project ID is already selected somewhere and stored in the state\n        if (store.state.selectedProjectId) {\n          startFetching(store.state.selectedProjectId);\n        }\n      }\n    });\n    watch(() => store.state.selectedProjectId, newId => {\n      if (newId && store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjectInfoById\", newId); // Fetch immediately when ID changes\n        startFetching(newId); // Start or restart the fetching interval\n      } else {\n        if (intervalId.value) {\n          clearInterval(intervalId.value); // Clear the interval if the ID becomes invalid\n          intervalId.value = null;\n        }\n      }\n    }, {\n      immediate: true\n    });\n    onUnmounted(() => {\n      // Clean up the interval when the component is destroyed\n      if (intervalId.value) {\n        clearInterval(intervalId.value);\n      }\n    });\n\n    // Computed property to display project info\n    const projectInfo = computed(() => store.state.projectsInfo[store.state.selectedProjectId] || {});\n    const __returned__ = {\n      store,\n      intervalId,\n      startFetching,\n      projectInfo,\n      ProjectList,\n      onMounted,\n      watch,\n      computed,\n      onUnmounted,\n      ref,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","onMounted","watch","computed","onUnmounted","ref","useStore","store","intervalId","startFetching","projectId","value","clearInterval","setInterval","dispatch","state","authToken","userEmail","selectedProjectId","newId","immediate","projectInfo","projectsInfo"],"sources":["D:/Git/ITRC_Front/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<script setup>\nimport ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\n\nconst store = useStore();\nconst intervalId = ref(null); // Use a ref to keep track of the interval ID\n\nfunction startFetching(projectId) {\n  if (intervalId.value) {\n    clearInterval(intervalId.value); // Clear the current interval if it exists\n  }\n  intervalId.value = setInterval(() => {\n    store.dispatch(\"fetchProjectInfoById\", projectId);\n  }, 3000); // Fetch every 3 seconds\n}\n\nonMounted(() => {\n  if (store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjects\");\n    // Assuming project ID is already selected somewhere and stored in the state\n    if (store.state.selectedProjectId) {\n      startFetching(store.state.selectedProjectId);\n    }\n  }\n});\n\nwatch(() => store.state.selectedProjectId, (newId) => {\n  if (newId && store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjectInfoById\", newId); // Fetch immediately when ID changes\n    startFetching(newId); // Start or restart the fetching interval\n  } else {\n    if (intervalId.value) {\n      clearInterval(intervalId.value); // Clear the interval if the ID becomes invalid\n      intervalId.value = null;\n    }\n  }\n}, { immediate: true });\n\nonUnmounted(() => {\n  // Clean up the interval when the component is destroyed\n  if (intervalId.value) {\n    clearInterval(intervalId.value);\n  }\n});\n\n// Computed property to display project info\nconst projectInfo = computed(() => store.state.projectsInfo[store.state.selectedProjectId] || {});\n\n</script>\n\n<template>\n  <div class=\"dashboard\">\n    <div class=\"project-list-container\">\n      <ProjectList />\n    </div>\n    <div class=\"project-info-widget\" v-if=\"projectInfo\">\n      <h4>Project Info</h4>\n      <p>Progress: {{ projectInfo.progress ? `${projectInfo.progress}%` : 'N/A' }}</p>\n      <p>Estimated Time Remaining: {{ projectInfo.eta !== undefined ? `${projectInfo.eta} seconds` : 'N/A' }}</p>\n      <p>Current Epoch: {{ projectInfo.epoch !== undefined ? projectInfo.epoch : 'N/A' }}</p>\n      <p>Current Batch: {{ projectInfo.batch !== undefined ? projectInfo.batch : 'N/A' }}</p>\n      <p>Current Accuracy: {{ projectInfo.accuracy ? projectInfo.accuracy.toFixed(2) + '%' : 'N/A' }}</p>\n      <p>Current Loss: {{ projectInfo.loss ? projectInfo.loss.toFixed(4) : 'N/A' }}</p>\n    </div>\n  </div>\n</template>\n\n<style>\n.dashboard {\n  display: flex;\n  align-items: flex-start; /* 요소들을 컨테이너의 상단에 정렬 */\n  justify-content: flex-start; /* 요소들을 컨테이너의 왼쪽에서 시작하도록 정렬 */\n  gap: 20px; /* 요소들 사이의 간격 */\n  padding: 20px; /* 대시보드 패딩 */\n}\n\n.project-list-container {\n  min-width: 700px; /* 최소 너비 설정 */\n  max-height: 500px; /* 최대 높이 설정 */\n  height: 300px; /* 높이 100%로 설정 */\n}\n\n.project-info-widget {\n  flex: 1; /* 유연하게 너비 조정 */\n  max-width: 40%; /* 최대 너비를 40%로 설정 */\n  min-width: 200px; /* 최소 너비 설정 */\n  padding: 20px; \n  margin-top: 0; /* 위쪽 마진 제거 */\n  border: 1px solid #ccc; /* 테두리 설정 */\n  border-radius: 8px; /* 테두리 둥글게 처리 */\n  background-color: #f9f9f9; /* 배경색 설정 */\n}\n</style>\n"],"mappings":"AACA,OAAOA,WAAW,MAAM,+BAA+B;AACvD,SAASC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,GAAG,QAAQ,KAAK;AAClE,SAASC,QAAQ,QAAQ,MAAM;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IACxB,MAAME,UAAU,GAAGH,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;;IAE9B,SAASI,aAAaA,CAACC,SAAS,EAAE;MAChC,IAAIF,UAAU,CAACG,KAAK,EAAE;QACpBC,aAAa,CAACJ,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC;MACnC;MACAH,UAAU,CAACG,KAAK,GAAGE,WAAW,CAAC,MAAM;QACnCN,KAAK,CAACO,QAAQ,CAAC,sBAAsB,EAAEJ,SAAS,CAAC;MACnD,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ;IAEAT,SAAS,CAAC,MAAM;MACd,IAAIM,KAAK,CAACQ,KAAK,CAACC,SAAS,IAAIT,KAAK,CAACQ,KAAK,CAACE,SAAS,EAAE;QAClDV,KAAK,CAACO,QAAQ,CAAC,eAAe,CAAC;QAC/B;QACA,IAAIP,KAAK,CAACQ,KAAK,CAACG,iBAAiB,EAAE;UACjCT,aAAa,CAACF,KAAK,CAACQ,KAAK,CAACG,iBAAiB,CAAC;QAC9C;MACF;IACF,CAAC,CAAC;IAEFhB,KAAK,CAAC,MAAMK,KAAK,CAACQ,KAAK,CAACG,iBAAiB,EAAGC,KAAK,IAAK;MACpD,IAAIA,KAAK,IAAIZ,KAAK,CAACQ,KAAK,CAACC,SAAS,IAAIT,KAAK,CAACQ,KAAK,CAACE,SAAS,EAAE;QAC3DV,KAAK,CAACO,QAAQ,CAAC,sBAAsB,EAAEK,KAAK,CAAC,CAAC,CAAC;QAC/CV,aAAa,CAACU,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,MAAM;QACL,IAAIX,UAAU,CAACG,KAAK,EAAE;UACpBC,aAAa,CAACJ,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC;UACjCH,UAAU,CAACG,KAAK,GAAG,IAAI;QACzB;MACF;IACF,CAAC,EAAE;MAAES,SAAS,EAAE;IAAK,CAAC,CAAC;IAEvBhB,WAAW,CAAC,MAAM;MAChB;MACA,IAAII,UAAU,CAACG,KAAK,EAAE;QACpBC,aAAa,CAACJ,UAAU,CAACG,KAAK,CAAC;MACjC;IACF,CAAC,CAAC;;IAEF;IACA,MAAMU,WAAW,GAAGlB,QAAQ,CAAC,MAAMI,KAAK,CAACQ,KAAK,CAACO,YAAY,CAACf,KAAK,CAACQ,KAAK,CAACG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}