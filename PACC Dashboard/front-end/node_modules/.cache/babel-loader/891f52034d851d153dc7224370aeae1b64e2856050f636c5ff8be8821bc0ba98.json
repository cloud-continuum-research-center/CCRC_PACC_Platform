{"ast":null,"code":"import { ref, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'NodeSelector',\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => [] // Provide a default empty array\n    }\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const store = useStore();\n    const nodes = computed(() => {\n      const unsortedNodes = store.getters.userNodes || [];\n      return unsortedNodes.sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically by name\n    });\n    const props = __props;\n    const canSelectNode = node => {\n      return node.status === 0; // 예를 들어, status가 0이면 선택 가능한 상태라고 가정\n    };\n    const isNodeSelected = node => {\n      return props.modelValue.some(selectedNode => selectedNode.node_id === node.node_id);\n    };\n    const emit = __emit;\n    onMounted(async () => {\n      await store.dispatch(\"fetchNodes\"); // 노드 정보 가져와서 마운트하기.\n    });\n    const selectedNode = ref(null);\n    const toggleNodeSelection = node => {\n      if (node.status !== 0) {\n        // If the node is not in a waiting state, display its details without selecting it\n        selectedNode.value = node;\n        console.error(\"Node is not in a waiting state and cannot be selected.\");\n        return; // Exit early without changing the selection\n      }\n      const isSelected = props.modelValue.some(selectedNode => selectedNode.node_id === node.node_id);\n      let newSelectedNodes = isSelected ? props.modelValue.filter(selectedNode => selectedNode.node_id !== node.node_id) : [...props.modelValue, node];\n      emit(\"update:modelValue\", newSelectedNodes);\n\n      // Set or unset the selectedNode for displaying details\n      selectedNode.value = isSelected ? null : node;\n    };\n    const nodeStatusDescription = status => {\n      const statusMap = {\n        0: \"대기중\",\n        1: \"학습중\",\n        2: \"학습완료\"\n      };\n      return statusMap[status] || \"Unknown status\";\n    };\n    const sortedSelectedNodes = computed(() => {\n      if (!Array.isArray(props.modelValue)) {\n        return []; // Return an empty array if props.modelValue is not an array\n      }\n      // Proceed with sorting if props.modelValue is an array\n      return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\n    });\n    const __returned__ = {\n      store,\n      nodes,\n      props,\n      canSelectNode,\n      isNodeSelected,\n      emit,\n      selectedNode,\n      toggleNodeSelection,\n      nodeStatusDescription,\n      sortedSelectedNodes,\n      ref,\n      computed,\n      onMounted,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","store","nodes","unsortedNodes","getters","userNodes","sort","a","b","name","localeCompare","props","__props","canSelectNode","node","status","isNodeSelected","modelValue","some","selectedNode","node_id","emit","__emit","dispatch","toggleNodeSelection","value","console","error","isSelected","newSelectedNodes","filter","nodeStatusDescription","statusMap","sortedSelectedNodes","Array","isArray"],"sources":["D:/Git/ITRC_Front/vue-flask-dashboard/front-end/src/views/components/NodeSelector.vue"],"sourcesContent":["<template>\n  <div class=\"node-selector-container\">\n    <!-- Header above the entire container -->\n    <div class=\"node-header\">\n      <h2>학습 노드 선택</h2>\n    </div>\n    <!-- Main content area for node selection -->\n    <div class=\"node-content\">\n      <!-- Node list on the far left -->\n      <div class=\"node-list\">\n        <ul>\n          <li\n      v-for=\"node in nodes\"\n      :key=\"node.id\"\n      @click=\"toggleNodeSelection(node)\"\n      :class=\"{\n        selected: isNodeSelected(node),\n        'not-selectable': !canSelectNode(node)\n      }\"\n    >\n      {{ node.name }}\n    </li>\n        </ul>\n      </div>\n\n      <div class=\"node-description\" v-if=\"selectedNode\">\n        <h3>{{ selectedNode.name }} 설명</h3>\n        <!-- Display additional node details -->\n        <div class=\"node-details\">\n          <p>CPU 코어 갯수: {{ selectedNode.cpu_core_count }}</p>\n          <p>총 메모리 크기: {{ selectedNode.total_memory_mb }} MB</p>\n          <p>총 디스크 크기: {{ selectedNode.total_disk_mb }} MB</p>\n          <p>상태: {{ nodeStatusDescription(selectedNode.status) }}</p>\n          <p v-if=\"selectedNode.instance\">\n            인스턴스: {{ selectedNode.instance }}\n          </p>\n          <p v-if=\"selectedNode.gpu_info\">\n            GPU 정보: {{ selectedNode.gpu_info }}\n          </p>\n\n          </div>\n      </div>\n      <div class=\"node-description\" v-else>\n        <h3>학습 노드를 선택해주세요.</h3>\n      </div>\n\n      <!-- List of selected nodes on the far right -->\n      <div class=\"selected-nodes\">\n        <h3>{{ sortedSelectedNodes.length > 0 ? '선택된 노드' : '선택된 노드가 없습니다.' }}</h3>\n        <ul v-if=\"sortedSelectedNodes.length > 0\">\n          <li v-for=\"node in sortedSelectedNodes\" :key=\"node.id\">\n            {{ node.name }}\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, defineProps, defineEmits, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\n\nconst store = useStore();\n\nconst nodes = computed(() => {\n  const unsortedNodes = store.getters.userNodes || [];\n  return unsortedNodes.sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically by name\n});\n\nconst props = defineProps({\n  modelValue: {\n    type: Array,\n    default: () => [], // Provide a default empty array\n  },\n});\n\nconst canSelectNode = (node) => {\n  return node.status === 0; // 예를 들어, status가 0이면 선택 가능한 상태라고 가정\n};\n\n\nconst isNodeSelected = (node) => {\n  return props.modelValue.some(\n    (selectedNode) => selectedNode.node_id === node.node_id,\n  );\n};\n\nconst emit = defineEmits([\"update:modelValue\"]);\n\nonMounted(async () => {\n  await store.dispatch(\"fetchNodes\"); // 노드 정보 가져와서 마운트하기.\n});\n\nconst selectedNode = ref(null);\n\nconst toggleNodeSelection = (node) => {\n  if (node.status !== 0) {\n    // If the node is not in a waiting state, display its details without selecting it\n    selectedNode.value = node;\n    console.error(\"Node is not in a waiting state and cannot be selected.\");\n    return; // Exit early without changing the selection\n  }\n\n  const isSelected = props.modelValue.some(\n    (selectedNode) => selectedNode.node_id === node.node_id,\n  );\n  let newSelectedNodes = isSelected\n    ? props.modelValue.filter(\n        (selectedNode) => selectedNode.node_id !== node.node_id,\n      )\n    : [...props.modelValue, node];\n\n  emit(\"update:modelValue\", newSelectedNodes);\n\n  // Set or unset the selectedNode for displaying details\n  selectedNode.value = isSelected ? null : node;\n};\n\nconst nodeStatusDescription = (status) => {\n  const statusMap = {\n    0: \"대기중\",\n    1: \"학습중\",\n    2: \"학습완료\",\n  };\n  return statusMap[status] || \"Unknown status\";\n};\n\nconst sortedSelectedNodes = computed(() => {\n  if (!Array.isArray(props.modelValue)) {\n    return []; // Return an empty array if props.modelValue is not an array\n  }\n  // Proceed with sorting if props.modelValue is an array\n  return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\n});\n</script>\n\n<style scoped>\n\n.node-description h3\n{\n  font-size: 30px;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n.node-selector-container {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #e0e0e0;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n.node-description p {\n  font-size: 19px; /* 폰트 사이즈를 25px에서 16px로 변경 */\n  margin-bottom: 5px; /* 위아래 간격을 적절하게 조절 */\n  font-weight: bold;\n}\n\n.node-header {\n  padding: 15px 20px;\n  background-color: #f8f8f8;\n  text-align: left;\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  border-bottom: 1px solid #ddd;\n}\n\n.node-header h2 {\n  margin: 0;\n  font-size: 34px;\n}\n\n.node-content {\n  display: flex;\n  flex-wrap: wrap; /* Enables the content to wrap onto the next line as needed */\n}\n\n.node-list,\n.node-description,\n.selected-nodes {\n  padding: 20px;\n  flex-basis: 33.3333%;\n  flex-grow: 1;\n  border-right: 1px solid #ddd;\n}\n.node-list li.not-selectable {\n  color: #007BFF; /* 부트스트랩의 기본 파란색 */\n  cursor: not-allowed; /* 선택할 수 없음을 나타내는 커서 스타일 */\n  background-color: #E3F2FD; /* 부트스트랩의 light 파란색 배경 */\n}\n\n.node-list ul,\n.selected-nodes ul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n.node-list li,\n.selected-nodes li {\n  padding: 10px;\n  cursor: pointer;\n  border-bottom: 1px solid #eee;\n  transition: background-color 0.3s;\n  font-size: 20px;\n  color: #333;\n  font-weight: bold;\n}\n\n.node-list li:hover,\n.node-list li.selected,\n.selected-nodes li:hover {\n  background-color: #e3f2fd;\n}\n\n/* Remove border from the last element of the main content */\n.selected-nodes {\n  border-right: none;\n}\n\n@media (max-width: 768px) {\n  .node-content {\n    flex-direction: column;\n  }\n\n  .node-list,\n  .node-description,\n  .selected-nodes {\n    border-right: none;\n    border-bottom: 1px solid #ddd;\n    flex-basis: auto;\n  }\n\n\n\n  .selected-nodes {\n    border-bottom: none;\n  }\n}\n\n</style>\n"],"mappings":"AA4DA,SAASA,GAA6B,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,KAAK;AACxE,SAASC,QAAQ,QAAQ,MAAM;;;;;;;;;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IAExB,MAAME,KAAK,GAAGJ,QAAQ,CAAC,MAAM;MAC3B,MAAMK,aAAa,GAAGF,KAAK,CAACG,OAAO,CAACC,SAAS,IAAI,EAAE;MACnD,OAAOF,aAAa,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC;IAEF,MAAME,KAAK,GAAGC,OAKZ;IAEF,MAAMC,aAAa,GAAIC,IAAI,IAAK;MAC9B,OAAOA,IAAI,CAACC,MAAM,KAAK,CAAC,CAAC,CAAC;IAC5B,CAAC;IAGD,MAAMC,cAAc,GAAIF,IAAI,IAAK;MAC/B,OAAOH,KAAK,CAACM,UAAU,CAACC,IAAI,CACzBC,YAAY,IAAKA,YAAY,CAACC,OAAO,KAAKN,IAAI,CAACM,OAClD,CAAC;IACH,CAAC;IAED,MAAMC,IAAI,GAAGC,MAAkC;IAE/CvB,SAAS,CAAC,YAAY;MACpB,MAAME,KAAK,CAACsB,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,MAAMJ,YAAY,GAAGtB,GAAG,CAAC,IAAI,CAAC;IAE9B,MAAM2B,mBAAmB,GAAIV,IAAI,IAAK;MACpC,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QACrB;QACAI,YAAY,CAACM,KAAK,GAAGX,IAAI;QACzBY,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAC;QACvE,OAAO,CAAC;MACV;MAEA,MAAMC,UAAU,GAAGjB,KAAK,CAACM,UAAU,CAACC,IAAI,CACrCC,YAAY,IAAKA,YAAY,CAACC,OAAO,KAAKN,IAAI,CAACM,OAClD,CAAC;MACD,IAAIS,gBAAgB,GAAGD,UAAU,GAC7BjB,KAAK,CAACM,UAAU,CAACa,MAAM,CACpBX,YAAY,IAAKA,YAAY,CAACC,OAAO,KAAKN,IAAI,CAACM,OAClD,CAAC,GACD,CAAC,GAAGT,KAAK,CAACM,UAAU,EAAEH,IAAI,CAAC;MAE/BO,IAAI,CAAC,mBAAmB,EAAEQ,gBAAgB,CAAC;;MAE3C;MACAV,YAAY,CAACM,KAAK,GAAGG,UAAU,GAAG,IAAI,GAAGd,IAAI;IAC/C,CAAC;IAED,MAAMiB,qBAAqB,GAAIhB,MAAM,IAAK;MACxC,MAAMiB,SAAS,GAAG;QAChB,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE;MACL,CAAC;MACD,OAAOA,SAAS,CAACjB,MAAM,CAAC,IAAI,gBAAgB;IAC9C,CAAC;IAED,MAAMkB,mBAAmB,GAAGnC,QAAQ,CAAC,MAAM;MACzC,IAAI,CAACoC,KAAK,CAACC,OAAO,CAACxB,KAAK,CAACM,UAAU,CAAC,EAAE;QACpC,OAAO,EAAE,CAAC,CAAC;MACb;MACA;MACA,OAAO,CAAC,GAAGN,KAAK,CAACM,UAAU,CAAC,CAACX,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC;IAC3E,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}