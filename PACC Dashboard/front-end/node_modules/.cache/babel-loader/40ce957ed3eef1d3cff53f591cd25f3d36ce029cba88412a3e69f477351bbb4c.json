{"ast":null,"code":"import { onMounted, onUnmounted, computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport ProjectList from \"./components/ProjectsList.vue\";\nimport ChartList from \"./components/ChartList.vue\";\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\nimport DiskGauge from \"./components/DiskGaugeComponent.vue\";\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const selectedChart = ref(\"\");\n\n    // Function to handle chart selection\n    const handleChartSelection = chartName => {\n      selectedChart.value = chartName; // Update the selected chart\n    };\n\n    // Computed property for nodes filtered by the selected project\n    const filteredNodes = computed(() => store.getters.userNodes.filter(node => store.state.selectedProjectNodeNames.includes(node.name)));\n\n    // 남은 메모리 정보를 저장하는 객체\n    const nodeFreeMemories = computed(() => {\n      const memories = {};\n      filteredNodes.value.forEach(node => {\n        memories[node.name] = store.getters.getNodeMemory(node.name) || 0;\n      });\n      return memories;\n    });\n    const nodeFreeDisk = computed(() => {\n      const disks = {};\n      filteredNodes.value.forEach(node => {\n        disks[node.name] = store.getters.getNodeDisk(node.name) || 0;\n      });\n      return disks;\n    });\n    onMounted(() => {\n      // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // 실시간 데이터 가져오기를 시작합니다.\n        startFetchingNodeMonitoringData();\n      }\n    });\n\n    // 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\n    onUnmounted(() => {\n      stopFetchingNodeMonitoringData();\n    });\n\n    // 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\n    const dataInterval = ref(null);\n    function startFetchingNodeMonitoringData() {\n      stopFetchingNodeMonitoringData(); // Prevent multiple intervals\n      dataInterval.value = setInterval(() => {\n        store.dispatch(\"fetchData\");\n      }, 1000);\n    }\n    function stopFetchingNodeMonitoringData() {\n      if (dataInterval.value) {\n        clearInterval(dataInterval.value);\n        dataInterval.value = null;\n      }\n    }\n    const __returned__ = {\n      store,\n      selectedChart,\n      handleChartSelection,\n      filteredNodes,\n      nodeFreeMemories,\n      nodeFreeDisk,\n      dataInterval,\n      startFetchingNodeMonitoringData,\n      stopFetchingNodeMonitoringData,\n      onMounted,\n      onUnmounted,\n      computed,\n      ref,\n      get useStore() {\n        return useStore;\n      },\n      ProjectList,\n      ChartList,\n      MemoryGauge,\n      DiskGauge\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","onUnmounted","computed","ref","useStore","ProjectList","ChartList","MemoryGauge","DiskGauge","store","selectedChart","handleChartSelection","chartName","value","filteredNodes","getters","userNodes","filter","node","state","selectedProjectNodeNames","includes","name","nodeFreeMemories","memories","forEach","getNodeMemory","nodeFreeDisk","disks","getNodeDisk","authToken","userEmail","dispatch","startFetchingNodeMonitoringData","stopFetchingNodeMonitoringData","dataInterval","setInterval","clearInterval"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport { onMounted, onUnmounted, computed, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport ChartList from \"./components/ChartList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport DiskGauge from \"./components/DiskGaugeComponent.vue\";\r\n\r\nconst store = useStore();\r\n\r\nconst selectedChart = ref(\"\");\r\n\r\n// Function to handle chart selection\r\nconst handleChartSelection = (chartName) => {\r\n  selectedChart.value = chartName; // Update the selected chart\r\n};\r\n\r\n// Computed property for nodes filtered by the selected project\r\nconst filteredNodes = computed(() =>\r\n  store.getters.userNodes.filter((node) =>\r\n    store.state.selectedProjectNodeNames.includes(node.name),\r\n  ),\r\n);\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach((node) => {\r\n    memories[node.name] = store.getters.getNodeMemory(node.name) || 0;\r\n  });\r\n  return memories;\r\n});\r\n\r\nconst nodeFreeDisk = computed(() => {\r\n  const disks = {};\r\n  filteredNodes.value.forEach((node) => {\r\n    disks[node.name] = store.getters.getNodeDisk(node.name) || 0;\r\n  });\r\n  return disks;\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <div class=\"chart-list-container\">\r\n    <ChartList\r\n      :chartNames=\"['Memory Usage', 'Disk Usage']\"\r\n      @chart-selected=\"handleChartSelection\"\r\n    />\r\n    <!-- 새로운 차트 디스플레이 컨테이너 -->\r\n    <div class=\"chart-display-container\" v-if=\"selectedChart\">\r\n      <!-- 선택된 차트에 따라서 다른 컴포넌트를 렌더링합니다. -->\r\n      <!-- 예를 들어 MemoryGaugeComponent.vue 또는 DiskGaugeComponent.vue 등을 조건부로 렌더링 -->\r\n    </div>\r\n    </div>\r\n    <div v-if=\"filteredNodes.length > 0\" class=\"chart-display-container\">\r\n      <template v-for=\"node in filteredNodes\">\r\n        <MemoryGauge\r\n          v-if=\"selectedChart === 'Memory Usage'\"\r\n          :key=\"'memory-' + node.id\"\r\n          :nodeName=\"node.name\"\r\n          :totalSize=\"node.total_memory_mb\"\r\n          :remainingSize=\"nodeFreeMemories[node.name]\"\r\n        />\r\n        <DiskGauge\r\n          v-if=\"selectedChart === 'Disk Usage'\"\r\n          :key=\"'disk-' + node.id\"\r\n          :nodeName=\"node.name\"\r\n          :totalSize=\"node.total_disk_mb\"\r\n          :remainingSize=\"nodeFreeDisk[node.name]\"\r\n        />\r\n      </template>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.project-list-container {\r\n  flex-basis: 100%;\r\n  max-width: 100%;\r\n}\r\n\r\n.memory-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.memory-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.memory-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.disk-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.disk-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.disk-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style>\r\n"],"mappings":"AACA,SAASA,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,GAAG,QAAQ,KAAK;AAC3D,SAASC,QAAQ,QAAQ,MAAM;AAC/B,OAAOC,WAAW,MAAM,+BAA+B;AACvD,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,OAAOC,SAAS,MAAM,qCAAqC;;;;;;;IAE3D,MAAMC,KAAK,GAAGL,QAAQ,CAAC,CAAC;IAExB,MAAMM,aAAa,GAAGP,GAAG,CAAC,EAAE,CAAC;;IAE7B;IACA,MAAMQ,oBAAoB,GAAIC,SAAS,IAAK;MAC1CF,aAAa,CAACG,KAAK,GAAGD,SAAS,CAAC,CAAC;IACnC,CAAC;;IAED;IACA,MAAME,aAAa,GAAGZ,QAAQ,CAAC,MAC7BO,KAAK,CAACM,OAAO,CAACC,SAAS,CAACC,MAAM,CAAEC,IAAI,IAClCT,KAAK,CAACU,KAAK,CAACC,wBAAwB,CAACC,QAAQ,CAACH,IAAI,CAACI,IAAI,CACzD,CACF,CAAC;;IAED;IACA,MAAMC,gBAAgB,GAAGrB,QAAQ,CAAC,MAAM;MACtC,MAAMsB,QAAQ,GAAG,CAAC,CAAC;MACnBV,aAAa,CAACD,KAAK,CAACY,OAAO,CAAEP,IAAI,IAAK;QACpCM,QAAQ,CAACN,IAAI,CAACI,IAAI,CAAC,GAAGb,KAAK,CAACM,OAAO,CAACW,aAAa,CAACR,IAAI,CAACI,IAAI,CAAC,IAAI,CAAC;MACnE,CAAC,CAAC;MACF,OAAOE,QAAQ;IACjB,CAAC,CAAC;IAEF,MAAMG,YAAY,GAAGzB,QAAQ,CAAC,MAAM;MAClC,MAAM0B,KAAK,GAAG,CAAC,CAAC;MAChBd,aAAa,CAACD,KAAK,CAACY,OAAO,CAAEP,IAAI,IAAK;QACpCU,KAAK,CAACV,IAAI,CAACI,IAAI,CAAC,GAAGb,KAAK,CAACM,OAAO,CAACc,WAAW,CAACX,IAAI,CAACI,IAAI,CAAC,IAAI,CAAC;MAC9D,CAAC,CAAC;MACF,OAAOM,KAAK;IACd,CAAC,CAAC;IAEF5B,SAAS,CAAC,MAAM;MACd;MACA,IAAIS,KAAK,CAACU,KAAK,CAACW,SAAS,IAAIrB,KAAK,CAACU,KAAK,CAACY,SAAS,EAAE;QAClDtB,KAAK,CAACuB,QAAQ,CAAC,eAAe,CAAC;QAC/B;QACAC,+BAA+B,CAAC,CAAC;MACnC;IACF,CAAC,CAAC;;IAEF;IACAhC,WAAW,CAAC,MAAM;MAChBiC,8BAA8B,CAAC,CAAC;IAClC,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAY,GAAGhC,GAAG,CAAC,IAAI,CAAC;IAE9B,SAAS8B,+BAA+BA,CAAA,EAAG;MACzCC,8BAA8B,CAAC,CAAC,CAAC,CAAC;MAClCC,YAAY,CAACtB,KAAK,GAAGuB,WAAW,CAAC,MAAM;QACrC3B,KAAK,CAACuB,QAAQ,CAAC,WAAW,CAAC;MAC7B,CAAC,EAAE,IAAI,CAAC;IACV;IAEA,SAASE,8BAA8BA,CAAA,EAAG;MACxC,IAAIC,YAAY,CAACtB,KAAK,EAAE;QACtBwB,aAAa,CAACF,YAAY,CAACtB,KAAK,CAAC;QACjCsB,YAAY,CAACtB,KAAK,GAAG,IAAI;MAC3B;IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}