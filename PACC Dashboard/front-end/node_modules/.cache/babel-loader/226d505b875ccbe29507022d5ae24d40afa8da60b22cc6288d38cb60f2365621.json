{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"project-list-container\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"memory-gauge-header\"\n}, \"메모리 사용량\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"memory-gauge-wrapper\"\n};\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"disk-gauge-header\"\n}, \"디스크 사용량\", -1 /* HOISTED */);\nconst _hoisted_8 = {\n  class: \"disk-gauge-wrapper\"\n};\nconst _hoisted_9 = {\n  key: 2\n};\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"gpu-temp-header\"\n}, \"GPU 온도\", -1 /* HOISTED */);\nconst _hoisted_11 = {\n  class: \"gpu-temp-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode($setup[\"ProjectList\"])]), _createCommentVNode(\" Memory Usage Section \"), $setup.filteredNodes.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNodes, node => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"memory-gauge-container\",\n      key: node.id\n    }, [_createVNode($setup[\"MemoryGauge\"], {\n      nodeName: node.name,\n      \"total-size\": node.total_memory_mb,\n      \"remaining-size\": $setup.nodeFreeMemories[node.name]\n    }, null, 8 /* PROPS */, [\"nodeName\", \"total-size\", \"remaining-size\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Disk Usage Section \"), $setup.filteredNodes.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_hoisted_7, _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNodes, node => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"disk-gauge-container\",\n      key: node.id\n    }, [_createVNode($setup[\"DiskGauge\"], {\n      nodeName: node.name,\n      \"total-size\": node.total_disk_mb,\n      \"remaining-size\": $setup.nodeFreeDisk[node.name]\n    }, null, 8 /* PROPS */, [\"nodeName\", \"total-size\", \"remaining-size\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" GPU Temperature Section \"), $setup.filteredNodes.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_hoisted_10, _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNodes, node => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"gpu-temp-container\",\n      key: `gpu-${node.id}`\n    }, [_createVNode($setup[\"GpuTemperatureLineChart\"], {\n      nodeName: node.name\n    }, null, 8 /* PROPS */, [\"nodeName\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","$setup","_createCommentVNode","filteredNodes","length","_hoisted_3","_hoisted_4","_hoisted_5","_Fragment","_renderList","node","id","nodeName","name","total_memory_mb","nodeFreeMemories","_hoisted_6","_hoisted_7","_hoisted_8","total_disk_mb","nodeFreeDisk","_hoisted_9","_hoisted_10","_hoisted_11"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport DiskGauge from \"./components/DiskGaugeComponent.vue\";\r\nimport GpuTemperatureLineChart from \"./components/GpuTemperatureLineChart.vue\";\r\nimport { onMounted, onUnmounted, computed, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \");\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)));\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  return filteredNodes.value.reduce((acc, node) => {\r\n    acc[node.name] = store.getters.getNodeMemory(node.name) || 0;\r\n    return acc;\r\n  }, {});\r\n});\r\n\r\nconst nodeFreeDisk = computed(() => {\r\n  return filteredNodes.value.reduce((acc, node) => {\r\n    acc[node.name] = store.getters.getNodeDisk(node.name) || 0;\r\n    return acc;\r\n  }, {});\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 3000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <!-- Memory Usage Section -->\r\n    <div v-if=\"filteredNodes.length > 0\">\r\n      <h2 class=\"memory-gauge-header\">메모리 사용량</h2>\r\n      <div class=\"memory-gauge-wrapper\">\r\n        <div\r\n          class=\"memory-gauge-container\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"node.id\"\r\n        >\r\n          <MemoryGauge\r\n            :nodeName=\"node.name\"\r\n            :total-size=\"node.total_memory_mb\"\r\n            :remaining-size=\"nodeFreeMemories[node.name]\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Disk Usage Section -->\r\n    <div v-if=\"filteredNodes.length > 0\">\r\n      <h2 class=\"disk-gauge-header\">디스크 사용량</h2>\r\n      <div class=\"disk-gauge-wrapper\">\r\n        <div\r\n          class=\"disk-gauge-container\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"node.id\"\r\n        >\r\n          <DiskGauge\r\n            :nodeName=\"node.name\"\r\n            :total-size=\"node.total_disk_mb\"\r\n            :remaining-size=\"nodeFreeDisk[node.name]\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- GPU Temperature Section -->\r\n    <div v-if=\"filteredNodes.length > 0\">\r\n      <h2 class=\"gpu-temp-header\">GPU 온도</h2>\r\n      <div class=\"gpu-temp-wrapper\">\r\n        <div\r\n          class=\"gpu-temp-container\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"`gpu-${node.id}`\"\r\n        >\r\n          <GpuTemperatureLineChart :nodeName=\"node.name\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.project-list-container {\r\n  flex-basis: 100%;\r\n  max-width: 100%;\r\n}\r\n\r\n.memory-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.memory-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.memory-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.disk-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.disk-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.disk-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.gpu-temp-header {\r\n  width: 100%;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.gpu-temp-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n\r\n.gpu-temp-container {\r\n  flex: 1;\r\n  min-width: calc(50% - 30px);\r\n  max-width: calc(50% - 30px);\r\n}\r\n</style>\r\n"],"mappings":";;EAkEOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAwB;;EAnEvCC,GAAA;AAAA;gCAwEMC,mBAAA,CAA4C;EAAxCF,KAAK,EAAC;AAAqB,GAAC,SAAO;;EAClCA,KAAK,EAAC;AAAsB;;EAzEvCC,GAAA;AAAA;gCAyFMC,mBAAA,CAA0C;EAAtCF,KAAK,EAAC;AAAmB,GAAC,SAAO;;EAChCA,KAAK,EAAC;AAAoB;;EA1FrCC,GAAA;AAAA;iCA0GMC,mBAAA,CAAuC;EAAnCF,KAAK,EAAC;AAAiB,GAAC,QAAM;;EAC7BA,KAAK,EAAC;AAAkB;;uBAzCjCG,mBAAA,CAmDM,OAnDNC,UAmDM,GAlDJF,mBAAA,CAEM,OAFNG,UAEM,GADJC,YAAA,CAAeC,MAAA,iB,GAEjBC,mBAAA,0BAA6B,EAClBD,MAAA,CAAAE,aAAa,CAACC,MAAM,Q,cAA/BP,mBAAA,CAeM,OAtFVQ,UAAA,GAwEMC,UAA4C,EAC5CV,mBAAA,CAYM,OAZNW,UAYM,I,kBAXJV,mBAAA,CAUMW,SAAA,QApFdC,WAAA,CA4EyBR,MAAA,CAAAE,aAAa,EAArBO,IAAI;yBAFbb,mBAAA,CAUM;MATJH,KAAK,EAAC,wBAAwB;MAE7BC,GAAG,EAAEe,IAAI,CAACC;QAEXX,YAAA,CAIEC,MAAA;MAHCW,QAAQ,EAAEF,IAAI,CAACG,IAAI;MACnB,YAAU,EAAEH,IAAI,CAACI,eAAe;MAChC,gBAAc,EAAEb,MAAA,CAAAc,gBAAgB,CAACL,IAAI,CAACG,IAAI;;wCAlFvDX,mBAAA,gBAuFIA,mBAAA,wBAA2B,EAChBD,MAAA,CAAAE,aAAa,CAACC,MAAM,Q,cAA/BP,mBAAA,CAeM,OAvGVmB,UAAA,GAyFMC,UAA0C,EAC1CrB,mBAAA,CAYM,OAZNsB,UAYM,I,kBAXJrB,mBAAA,CAUMW,SAAA,QArGdC,WAAA,CA6FyBR,MAAA,CAAAE,aAAa,EAArBO,IAAI;yBAFbb,mBAAA,CAUM;MATJH,KAAK,EAAC,sBAAsB;MAE3BC,GAAG,EAAEe,IAAI,CAACC;QAEXX,YAAA,CAIEC,MAAA;MAHCW,QAAQ,EAAEF,IAAI,CAACG,IAAI;MACnB,YAAU,EAAEH,IAAI,CAACS,aAAa;MAC9B,gBAAc,EAAElB,MAAA,CAAAmB,YAAY,CAACV,IAAI,CAACG,IAAI;;wCAnGnDX,mBAAA,gBAwGIA,mBAAA,6BAAgC,EACrBD,MAAA,CAAAE,aAAa,CAACC,MAAM,Q,cAA/BP,mBAAA,CAWM,OApHVwB,UAAA,GA0GMC,WAAuC,EACvC1B,mBAAA,CAQM,OARN2B,WAQM,I,kBAPJ1B,mBAAA,CAMMW,SAAA,QAlHdC,WAAA,CA8GyBR,MAAA,CAAAE,aAAa,EAArBO,IAAI;yBAFbb,mBAAA,CAMM;MALJH,KAAK,EAAC,oBAAoB;MAEzBC,GAAG,SAASe,IAAI,CAACC,EAAE;QAEpBX,YAAA,CAAiDC,MAAA;MAAvBW,QAAQ,EAAEF,IAAI,CAACG;;wCAjHnDX,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}