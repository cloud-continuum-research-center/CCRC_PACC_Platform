{"ast":null,"code":"import { onMounted, onUnmounted, computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport ProjectList from './components/ProjectsList.vue';\nimport ChartList from './components/ChartList.vue';\nimport MemoryGauge from './components/MemoryGaugeComponent.vue';\nimport DiskGauge from './components/DiskGaugeComponent.vue';\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const selectedChart = ref('');\n    const handleChartSelection = chartName => {\n      selectedChart.value = chartName;\n    };\n    const filteredNodes = computed(() => {\n      const allNodes = store.getters.userNodes;\n      const selectedNodeNames = store.state.selectedProjectNodeNames;\n      console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \");\n      console.log(allNodes.filter(node => selectedNodeNames.includes(node.name)));\n      return allNodes.filter(node => selectedNodeNames.includes(node.name));\n    });\n\n    // 남은 메모리 정보를 저장하는 객체\n    const nodeFreeMemories = computed(() => {\n      const memories = {};\n      filteredNodes.value.forEach(node => {\n        // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\n        const memory = store.getters.getNodeMemory(node.name) || 0;\n        memories[node.name] = memory;\n        console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\n      });\n      return memories;\n    });\n    const nodeFreeDisk = computed(() => {\n      const Disks = {};\n      filteredNodes.value.forEach(node => {\n        // 여기에서 각 노드의 디스크 정보를 메모리 객체에 저장하고 바로 로그를 출력\n        const Disk = store.getters.getNodeDisk(node.name) || 0;\n        Disks[node.name] = Disk;\n        console.log(\"남은 디스크가져오는 중: \", node.name, Disk);\n      });\n      return Disks;\n    });\n    onMounted(() => {\n      // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // 실시간 데이터 가져오기를 시작합니다.\n        startFetchingNodeMonitoringData();\n      }\n    });\n\n    // 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\n    onUnmounted(() => {\n      stopFetchingNodeMonitoringData();\n    });\n\n    // 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\n    const dataInterval = ref(null);\n    function startFetchingNodeMonitoringData() {\n      stopFetchingNodeMonitoringData(); // Prevent multiple intervals\n      dataInterval.value = setInterval(() => {\n        store.dispatch(\"fetchData\");\n      }, 1000);\n    }\n    function stopFetchingNodeMonitoringData() {\n      if (dataInterval.value) {\n        clearInterval(dataInterval.value);\n        dataInterval.value = null;\n      }\n    }\n    const __returned__ = {\n      store,\n      selectedChart,\n      handleChartSelection,\n      filteredNodes,\n      nodeFreeMemories,\n      nodeFreeDisk,\n      dataInterval,\n      startFetchingNodeMonitoringData,\n      stopFetchingNodeMonitoringData,\n      onMounted,\n      onUnmounted,\n      computed,\n      ref,\n      get useStore() {\n        return useStore;\n      },\n      ProjectList,\n      ChartList,\n      MemoryGauge,\n      DiskGauge\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","onUnmounted","computed","ref","useStore","ProjectList","ChartList","MemoryGauge","DiskGauge","store","selectedChart","handleChartSelection","chartName","value","filteredNodes","allNodes","getters","userNodes","selectedNodeNames","state","selectedProjectNodeNames","console","log","filter","node","includes","name","nodeFreeMemories","memories","forEach","memory","getNodeMemory","nodeFreeDisk","Disks","Disk","getNodeDisk","authToken","userEmail","dispatch","startFetchingNodeMonitoringData","stopFetchingNodeMonitoringData","dataInterval","setInterval","clearInterval"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport { onMounted, onUnmounted, computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport ProjectList from './components/ProjectsList.vue';\r\nimport ChartList from './components/ChartList.vue';\r\nimport MemoryGauge from './components/MemoryGaugeComponent.vue';\r\nimport DiskGauge from './components/DiskGaugeComponent.vue';\r\n\r\nconst store = useStore();\r\n\r\n\r\nconst selectedChart = ref('');\r\nconst handleChartSelection = chartName => {\r\n  selectedChart.value = chartName;\r\n};\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \")\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)))\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const memory = store.getters.getNodeMemory(node.name) || 0;\r\n    memories[node.name] = memory;\r\n    console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\r\n  });\r\n  return memories;\r\n});\r\n\r\nconst nodeFreeDisk = computed(() => {\r\n  const Disks = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 디스크 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const Disk = store.getters.getNodeDisk(node.name) || 0;\r\n    Disks[node.name] = Disk;\r\n    console.log(\"남은 디스크가져오는 중: \", node.name, Disk);\r\n  });\r\n  return Disks;\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <!-- Project List remains the same -->\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <!-- Chart List container -->\r\n    <div class=\"chart-list-container\">\r\n      <ChartList :nodes=\"filteredNodes\" @chart-selected=\"handleChartSelection\" />\r\n    </div>\r\n    <!-- Chart Display Container -->\r\n    <div class=\"chart-display-container\">\r\n      <div\r\n        v-for=\"node in filteredNodes\"\r\n        :key=\"node.id\"\r\n        v-show=\"selectedChartName === node.name\"\r\n      >\r\n        <MemoryGauge\r\n          v-if=\"selectedChart === 'Memory Usage'\"\r\n          :nodeName=\"node.name\"\r\n          :total-size=\"node.total_memory_mb\"\r\n          :remaining-size=\"nodeFreeMemories[node.name]\"\r\n        />\r\n        <DiskGauge\r\n          v-if=\"selectedChart === 'Disk Usage'\"\r\n          :nodeName=\"node.name\"\r\n          :total-size=\"node.total_disk_mb\"\r\n          :remaining-size=\"nodeFreeDisk[node.name]\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.project-list-container {\r\n  flex-basis: 100%;\r\n  max-width: 100%;\r\n}\r\n\r\n.memory-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.memory-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.memory-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(50% - 30px); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(50% - 30px); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.disk-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.disk-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.disk-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(50% - 30px); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(50% - 30px); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}