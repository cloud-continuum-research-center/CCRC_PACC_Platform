{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nconst _hoisted_2 = {\n  ref: \"chartCanvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\components\\GaugeComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <canvas ref=\"chartCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, watch, defineProps } from \"vue\";\r\nimport Chart from \"chart.js/auto\";\r\n\r\nconst props = defineProps({\r\n  totalSize: Number,\r\n  remainingSize: Number,\r\n  nodeName: String\r\n});\r\n\r\nconst chartCanvas = ref(null);\r\nlet myChart = null;\r\n\r\n// Chart.js chart configuration\r\nconst config = {\r\n  type: \"doughnut\",\r\n  data: {\r\n    labels: [\"Used\", \"Free\"],\r\n    datasets: [\r\n      {\r\n        data: [0, 0], // Initial dummy data\r\n        backgroundColor: [\"#42A5F5\", \"#ddd\"],\r\n        borderWidth: 0,\r\n      },\r\n    ],\r\n  },\r\n  options: {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    animation: {\r\n      animateRotate: true,\r\n      animateScale: false,\r\n    },\r\n    circumference: 180,\r\n    rotation: 270,\r\n  },\r\n};\r\n\r\nonMounted(() => {\r\n  if (!chartCanvas.value) {\r\n    console.error(\"Canvas element not found\");\r\n    return;\r\n  }\r\n  const context = chartCanvas.value.getContext('2d');\r\n  if (!context) {\r\n    console.error(\"Failed to get canvas context\");\r\n    return;\r\n  }\r\n  myChart = new Chart(context, config);\r\n});\r\n\r\nwatch(\r\n  [() => props.totalSize, () => props.remainingSize],\r\n  (newValues) => {\r\n    const [totalSize, remainingSize] = newValues;\r\n    const usedSize = totalSize - remainingSize;\r\n    if (myChart) {\r\n      myChart.data.datasets[0].data = [usedSize, remainingSize];\r\n      myChart.update();\r\n    }\r\n  },\r\n  {\r\n    immediate: true,\r\n  },\r\n);\r\n</script>\r\n\r\n<style>\r\n.chart-container {\r\n  position: relative;\r\n  height: 40vh;\r\n  width: 80vw;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAClBC,GAAG,EAAC;AAAa;;uBAD3BC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAmC,UAAnCC,UAAmC,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}