{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"project-list-container\"\n};\nconst _hoisted_3 = {\n  class: \"charts-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode($setup[\"ProjectList\"])]), _createElementVNode(\"div\", _hoisted_3, [_createVNode($setup[\"ChartList\"])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","$setup","_hoisted_3"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport { onMounted, onUnmounted} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport ChartList from \"./components/ChartList.vue\";\r\n\r\n\r\nconst store = useStore();\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <div class=\"charts-container\">\r\n      <ChartList />\r\n    </div>\r\n  </div>\r\n</template>\r\n<style>\r\n\r\n.dashboard {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.project-list-container {\r\n  flex-basis: 100%;\r\n  max-width: 100%;\r\n}\r\n\r\n.chart-list-container {\r\n  display: flex;\r\n}\r\n.chart-list-widget {\r\n  flex: 1; /* 리스트가 차지할 공간 */\r\n}\r\n.chart-display-container {\r\n  flex: 2; /* 선택된 차트가 차지할 공간 */\r\n  /* 필요한 경우 추가 스타일링 */\r\n}\r\n\r\n</style>\r\n"],"mappings":";;EA0COA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAwB;;EAG9BA,KAAK,EAAC;AAAkB;;uBAJ/BC,mBAAA,CAOM,OAPNC,UAOM,GANJC,mBAAA,CAEM,OAFNC,UAEM,GADJC,YAAA,CAAeC,MAAA,iB,GAEjBH,mBAAA,CAEM,OAFNI,UAEM,GADJF,YAAA,CAAaC,MAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}