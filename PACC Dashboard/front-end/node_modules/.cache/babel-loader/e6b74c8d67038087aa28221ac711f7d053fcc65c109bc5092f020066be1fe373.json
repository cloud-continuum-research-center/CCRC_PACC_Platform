{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-1c5d6aed\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"model-selector-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"model-header\"\n}, \"Model Selection\", -1));\nconst _hoisted_3 = {\n  class: \"model-content\"\n};\nconst _hoisted_4 = {\n  class: \"model-list\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"model-description\"\n};\nimport { ref, onMounted, computed } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'ModelSelector',\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const emit = __emit;\n    const store = useStore();\n    const models = computed(() => store.state.models);\n    const selectedModel = ref({});\n    onMounted(async () => {\n      await store.dispatch(\"fetchModels\");\n      if (models.value.length > 0) {\n        selectedModel.value = models.value[0]; // Set the first model as selected\n        emit(\"update:modelValue\", models.value[0].model_id); // Emit its model_id\n      }\n    });\n    function updateSelectedModel(model) {\n      if (model) {\n        selectedModel.value = model;\n        emit(\"update:modelValue\", model.model_id); // Emit the model_id\n      }\n    }\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(models.value, model => {\n        return _openBlock(), _createElementBlock(\"li\", {\n          key: model.model_id,\n          onClick: $event => updateSelectedModel(model),\n          class: _normalizeClass({\n            selected: model.model_id === selectedModel.value.model_id\n          })\n        }, _toDisplayString(model.name), 11, _hoisted_5);\n      }), 128))])]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"h3\", null, _toDisplayString(selectedModel.value?.name || \"No model selected\"), 1), _createElementVNode(\"p\", null, _toDisplayString(selectedModel.value?.description || \"\"), 1)])])]);\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useStore","emit","__emit","store","models","state","selectedModel","dispatch","value","length","model_id","updateSelectedModel","model"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/ModelSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"model-selector-container\">\r\n    <!-- Header title for the model selection -->\r\n    <h2 class=\"model-header\">Model Selection</h2>\r\n    <!-- Model list and description container -->\r\n    <div class=\"model-content\">\r\n      <div class=\"model-list\">\r\n        <ul>\r\n          <li\r\n            v-for=\"model in models\"\r\n            :key=\"model.model_id\"\r\n            @click=\"updateSelectedModel(model)\"\r\n            :class=\"{ selected: model.model_id === selectedModel.model_id }\"\r\n          >\r\n            {{ model.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"model-description\">\r\n        <h3>{{ selectedModel?.name || \"No model selected\" }}</h3>\r\n        <p>{{ selectedModel?.description || \"\" }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed, defineEmits } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nconst store = useStore();\r\nconst models = computed(() => store.state.models);\r\nconst selectedModel = ref({});\r\n\r\nonMounted(async () => {\r\n  await store.dispatch(\"fetchModels\");\r\n  if (models.value.length > 0) {\r\n    selectedModel.value = models.value[0]; // Set the first model as selected\r\n    emit(\"update:modelValue\", models.value[0].model_id); // Emit its model_id\r\n  }\r\n});\r\n\r\nfunction updateSelectedModel(model) {\r\n  if (model) {\r\n    selectedModel.value = model;\r\n    emit(\"update:modelValue\", model.model_id); // Emit the model_id\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.model-selector-container {\r\n  border: 1px solid #ddd;\r\n  background-color: #fff; /* Set background to white */\r\n  border-radius: 8px; /* 모서리 둥글게  */\r\n  flex-direction: column;\r\n}\r\n.model-header {\r\n  text-align: left;\r\n  padding: 10px 20px;\r\n  background: #ececec;\r\n  margin: 0;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.model-content {\r\n  display: flex;\r\n}\r\n\r\n.model-list ul {\r\n  list-style-type: none; /* Removes the default list styling */\r\n  padding: 0;\r\n  margin: 0;\r\n  width: 250px; /* Set the width of the list */\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.model-list li {\r\n  padding: 15px 20px; /* Provide padding to each list item */\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee; /* Add separation between items */\r\n  transition: background-color 0.3s; /* Smooth transition for background color */\r\n  font-size: 18px; /*폰트 사이즈 조절*/\r\n}\r\n\r\n.model-list li:hover,\r\n.model-list li.selected {\r\n  background-color: #b1f397; /* A light grey background for hover state */\r\n}\r\n\r\n.model-description {\r\n  padding: 20px; /* Give some padding around the description */\r\n  flex-grow: 1; /* Ensure it fills the remaining space */\r\n  border-radius: 0 8px 8px 0; /* Rounded corners on the right side */\r\n}\r\n\r\n.model-description h3 {\r\n  margin-top: 0; /* Remove default margin from the heading */\r\n}\r\n\r\n/* Optional: Add some responsive styling */\r\n@media (max-width: 768px) {\r\n  .model-selector-container {\r\n    flex-direction: column; /* Stack list and description on smaller screens */\r\n  }\r\n\r\n  .model-list ul {\r\n    width: auto; /* List takes full width on smaller screens */\r\n    border-right: none;\r\n  }\r\n\r\n  .model-list li {\r\n    border-bottom: none; /* Remove border when in column layout */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;;;;;;;;;;;AA2BA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAqB,QAAQ,KAAK;AAC3D,SAASC,QAAQ,QAAQ,MAAM;;;;;;;IAE/B,MAAMC,IAAI,GAAGC,MAAkC;IAE/C,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC;IACxB,MAAMI,MAAM,GAAGL,QAAQ,CAAC,MAAMI,KAAK,CAACE,KAAK,CAACD,MAAM,CAAC;IACjD,MAAME,aAAa,GAAGT,GAAG,CAAC,CAAC,CAAC,CAAC;IAE7BC,SAAS,CAAC,YAAY;MACpB,MAAMK,KAAK,CAACI,QAAQ,CAAC,aAAa,CAAC;MACnC,IAAIH,MAAM,CAACI,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QAC3BH,aAAa,CAACE,KAAK,GAAGJ,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACvCP,IAAI,CAAC,mBAAmB,EAAEG,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAC;MACvD;IACF,CAAC,CAAC;IAEF,SAASC,mBAAmBA,CAACC,KAAK,EAAE;MAClC,IAAIA,KAAK,EAAE;QACTN,aAAa,CAACE,KAAK,GAAGI,KAAK;QAC3BX,IAAI,CAAC,mBAAmB,EAAEW,KAAK,CAACF,QAAQ,CAAC,CAAC,CAAC;MAC7C;IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}