{"ast":null,"code":"import { createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"ProjectList\"]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.nodes, node => {\n    return _openBlock(), _createBlock($setup[\"MemoryGauge\"], {\n      key: node.id,\n      \"total-size\": node.total_memory_mb,\n      \"remaining-size\": $setup.getNodeFreeMemory(node.name)\n    }, null, 8 /* PROPS */, [\"total-size\", \"remaining-size\"]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","$setup","_Fragment","_renderList","nodes","node","_createBlock","key","id","total_memory_mb","getNodeFreeMemory","name"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst nodes = computed(() => {\r\n  return store.getters.userNodes; // Assuming userNodes returns an array of node objects\r\n});\r\n\r\nconst getNodeFreeMemory = (nodeName) => {\r\n  return store.getters.getNodeMemory(nodeName) || 0; // Using the getNodeMemory getter\r\n};\r\n\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch('fetchData');\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <ProjectList />\r\n    <MemoryGauge\r\n      v-for=\"node in nodes\"\r\n      :key=\"node.id\"\r\n      :total-size=\"node.total_memory_mb\"\r\n      :remaining-size=\"getNodeFreeMemory(node.name)\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}\r\n</style>"],"mappings":";;EAmDOA,KAAK,EAAC;AAAW;;uBAAtBC,mBAAA,CAQM,OARNC,UAQM,GAPJC,YAAA,CAAeC,MAAA,mB,kBACfH,mBAAA,CAKEI,SAAA,QA1DNC,WAAA,CAsDqBF,MAAA,CAAAG,KAAK,EAAbC,IAAI;yBADbC,YAAA,CAKEL,MAAA;MAHCM,GAAG,EAAEF,IAAI,CAACG,EAAE;MACZ,YAAU,EAAEH,IAAI,CAACI,eAAe;MAChC,gBAAc,EAAER,MAAA,CAAAS,iBAAiB,CAACL,IAAI,CAACM,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}