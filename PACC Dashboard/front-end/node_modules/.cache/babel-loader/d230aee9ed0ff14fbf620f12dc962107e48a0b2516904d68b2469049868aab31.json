{"ast":null,"code":"import { ref, watch } from \"vue\";\nexport default {\n  __name: 'DatasetSelector',\n  props: {\n    modelValue: Object\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const emit = __emit;\n\n    // Accepts the current value via v-model in the parent component\n    const props = __props;\n    const datasets = ref([{\n      id: \"1\",\n      name: \"Dataset A\",\n      description: \"Description of Dataset A\",\n      selected: false\n    }, {\n      id: \"2\",\n      name: \"Dataset B\",\n      description: \"Description of Dataset B\",\n      selected: false\n    }, {\n      id: \"3\",\n      name: \"Dataset C\",\n      description: \"Description of Dataset C\",\n      selected: false\n    }\n    // Continue adding datasets here\n    ]);\n    const selectedDataset = ref(props.modelValue || datasets.value[0]);\n\n    // Update selectedDataset and emit an event to update the modelValue in the parent\n    const selectDataset = dataset => {\n      selectedDataset.value = dataset;\n      emit(\"update:modelValue\", dataset);\n    };\n\n    // Watch for external changes to modelValue and update selectedDataset accordingly\n    watch(() => props.modelValue, newVal => {\n      selectedDataset.value = newVal;\n    });\n    const __returned__ = {\n      emit,\n      props,\n      datasets,\n      selectedDataset,\n      selectDataset,\n      ref,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","emit","__emit","props","__props","datasets","id","name","description","selected","selectedDataset","modelValue","value","selectDataset","dataset","newVal"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/DatasetSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"dataset-selector-container\">\r\n    <h2 class=\"dataset-header\">Dataset Selection</h2>\r\n    <div class=\"dataset-content\">\r\n      <div class=\"dataset-list\">\r\n        <ul>\r\n          <li\r\n            v-for=\"dataset in datasets\"\r\n            :key=\"dataset.id\"\r\n            @click=\"selectDataset(dataset)\"\r\n            :class=\"{ selected: dataset.id === selectedDataset.id }\"\r\n          >\r\n            {{ dataset.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"dataset-description\">\r\n        <h3>{{ selectedDataset.name }}</h3>\r\n        <p>{{ selectedDataset.description }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, watch, defineEmits } from \"vue\";\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\n// Accepts the current value via v-model in the parent component\r\nconst props = defineProps({\r\n  modelValue: Object,\r\n});\r\n\r\nconst datasets = ref([\r\n  {\r\n    id: \"1\",\r\n    name: \"Dataset A\",\r\n    description: \"Description of Dataset A\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    name: \"Dataset B\",\r\n    description: \"Description of Dataset B\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: \"3\",\r\n    name: \"Dataset C\",\r\n    description: \"Description of Dataset C\",\r\n    selected: false,\r\n  },\r\n  // Continue adding datasets here\r\n]);\r\n\r\nconst selectedDataset = ref(props.modelValue || datasets.value[0]);\r\n\r\n// Update selectedDataset and emit an event to update the modelValue in the parent\r\nconst selectDataset = (dataset) => {\r\n  selectedDataset.value = dataset;\r\n  emit(\"update:modelValue\", dataset);\r\n};\r\n\r\n// Watch for external changes to modelValue and update selectedDataset accordingly\r\nwatch(\r\n  () => props.modelValue,\r\n  (newVal) => {\r\n    selectedDataset.value = newVal;\r\n  },\r\n);\r\n</script>\r\n\r\n<style scoped>\r\n.dataset-selector-container {\r\n  border: 1px solid #ddd;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n}\r\n.dataset-header {\r\n  text-align: left;\r\n  padding: 10px 20px;\r\n  background: #f5f5f5; /* Header background */\r\n  margin: 0; /* Remove default margin */\r\n  border-bottom: 1px solid #ddd; /* Separator */\r\n}\r\n\r\n.dataset-content {\r\n  display: flex;\r\n}\r\n\r\n.dataset-list ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  width: 250px;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.dataset-list li {\r\n  padding: 15px 20px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.dataset-list li:hover,\r\n.dataset-list li.selected {\r\n  background-color: #b1f397;\r\n}\r\n\r\n.dataset-description {\r\n  padding: 20px;\r\n  flex-grow: 1;\r\n  border-radius: 0 8px 8px 0;\r\n}\r\n\r\n.dataset-description h3 {\r\n  margin-top: 0;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .dataset-selector-container {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .dataset-list ul {\r\n    width: auto;\r\n    border-right: none;\r\n  }\r\n\r\n  .dataset-list li {\r\n    border-bottom: none;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AAyBA,SAASA,GAAgB,EAAEC,KAAkB,QAAQ,KAAK;;;;;;;;;;;;IAE1D,MAAMC,IAAI,GAAGC,MAAkC;;IAE/C;IACA,MAAMC,KAAK,GAAGC,OAEZ;IAEF,MAAMC,QAAQ,GAAGN,GAAG,CAAC,CACnB;MACEO,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,WAAW;MACjBC,WAAW,EAAE,0BAA0B;MACvCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,WAAW;MACjBC,WAAW,EAAE,0BAA0B;MACvCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,WAAW;MACjBC,WAAW,EAAE,0BAA0B;MACvCC,QAAQ,EAAE;IACZ;IACA;IAAA,CACD,CAAC;IAEF,MAAMC,eAAe,GAAGX,GAAG,CAACI,KAAK,CAACQ,UAAU,IAAIN,QAAQ,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;;IAElE;IACA,MAAMC,aAAa,GAAIC,OAAO,IAAK;MACjCJ,eAAe,CAACE,KAAK,GAAGE,OAAO;MAC/Bb,IAAI,CAAC,mBAAmB,EAAEa,OAAO,CAAC;IACpC,CAAC;;IAED;IACAd,KAAK,CACH,MAAMG,KAAK,CAACQ,UAAU,EACrBI,MAAM,IAAK;MACVL,eAAe,CAACE,KAAK,GAAGG,MAAM;IAChC,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}