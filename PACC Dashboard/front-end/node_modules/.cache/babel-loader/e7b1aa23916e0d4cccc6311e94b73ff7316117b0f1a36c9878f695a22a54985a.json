{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\nimport { computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const selectedNodeName = ref(\"\");\n    const filteredNodes = computed(() => {\n      const allNodes = store.getters.userNodes;\n      const selectedNodeNames = store.state.selectedProjectNodeNames;\n      console.log(\"Retrieving node specification information of selected list \");\n      console.log(allNodes.filter(node => selectedNodeNames.includes(node.name)));\n      return allNodes.filter(node => selectedNodeNames.includes(node.name));\n    });\n    const getNodeTotalMemory = nodeName => {\n      const node = store.getters.userNodes.find(node => node.name === nodeName);\n      return node ? node.total_memory_mb : 0;\n    };\n    const getNodeFreeMemory = nodeName => {\n      return store.getters.getNodeMemory(nodeName) || 0;\n    };\n    const __returned__ = {\n      store,\n      selectedNodeName,\n      filteredNodes,\n      getNodeTotalMemory,\n      getNodeFreeMemory,\n      ProjectList,\n      MemoryGauge,\n      computed,\n      ref,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","MemoryGauge","computed","ref","useStore","store","selectedNodeName","filteredNodes","allNodes","getters","userNodes","selectedNodeNames","state","selectedProjectNodeNames","console","log","filter","node","includes","name","getNodeTotalMemory","nodeName","find","total_memory_mb","getNodeFreeMemory","getNodeMemory"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<!-- <script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \")\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)))\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const memory = store.getters.getNodeMemory(node.name) || 0;\r\n    memories[node.name] = memory;\r\n    console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\r\n  });\r\n  return memories;\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <ProjectList />\r\n    <MemoryGauge\r\n      v-for=\"node in filteredNodes\"\r\n      :key=\"node.id\"\r\n      :nodeName=\"node.name\"\r\n      :total-size=\"node.total_memory_mb\"\r\n      :remaining-size=\"nodeFreeMemories[node.name]\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style> -->\r\n\r\n<!-- Dashboard.vue -->\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <ProjectList />\r\n    <select v-model=\"selectedNodeName\">\r\n      <option disabled value=\"\">Select a Node</option>\r\n      <option v-for=\"node in filteredNodes\" :key=\"node.id\" :value=\"node.name\">\r\n        {{ node.name }}\r\n      </option>\r\n    </select>\r\n    <!-- Only display the MemoryGauge if a node is selected -->\r\n    <MemoryGauge\r\n      v-if=\"selectedNodeName\"\r\n      :nodeName=\"selectedNodeName\"\r\n      :total-size=\"getNodeTotalMemory(selectedNodeName)\"\r\n      :remaining-size=\"getNodeFreeMemory(selectedNodeName)\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { computed, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\nconst selectedNodeName = ref(\"\");\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"Retrieving node specification information of selected list \");\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)));\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\nconst getNodeTotalMemory = (nodeName) => {\r\n  const node = store.getters.userNodes.find((node) => node.name === nodeName);\r\n  return node ? node.total_memory_mb : 0;\r\n};\r\n\r\nconst getNodeFreeMemory = (nodeName) => {\r\n  return store.getters.getNodeMemory(nodeName) || 0;\r\n};\r\n</script>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}\r\n</style>\r\n"],"mappings":"AAiHA,OAAOA,WAAW,MAAM,+BAA+B;AACvD,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,SAASC,QAAQ,EAAEC,GAAG,QAAQ,KAAK;AACnC,SAASC,QAAQ,QAAQ,MAAM;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IACxB,MAAME,gBAAgB,GAAGH,GAAG,CAAC,EAAE,CAAC;IAEhC,MAAMI,aAAa,GAAGL,QAAQ,CAAC,MAAM;MACnC,MAAMM,QAAQ,GAAGH,KAAK,CAACI,OAAO,CAACC,SAAS;MACxC,MAAMC,iBAAiB,GAAGN,KAAK,CAACO,KAAK,CAACC,wBAAwB;MAC9DC,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC;MAC1ED,OAAO,CAACC,GAAG,CAACP,QAAQ,CAACQ,MAAM,CAAEC,IAAI,IAAKN,iBAAiB,CAACO,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;MAC7E,OAAOX,QAAQ,CAACQ,MAAM,CAAEC,IAAI,IAAKN,iBAAiB,CAACO,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC;IACzE,CAAC,CAAC;IAEF,MAAMC,kBAAkB,GAAIC,QAAQ,IAAK;MACvC,MAAMJ,IAAI,GAAGZ,KAAK,CAACI,OAAO,CAACC,SAAS,CAACY,IAAI,CAAEL,IAAI,IAAKA,IAAI,CAACE,IAAI,KAAKE,QAAQ,CAAC;MAC3E,OAAOJ,IAAI,GAAGA,IAAI,CAACM,eAAe,GAAG,CAAC;IACxC,CAAC;IAED,MAAMC,iBAAiB,GAAIH,QAAQ,IAAK;MACtC,OAAOhB,KAAK,CAACI,OAAO,CAACgB,aAAa,CAACJ,QAAQ,CAAC,IAAI,CAAC;IACnD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}