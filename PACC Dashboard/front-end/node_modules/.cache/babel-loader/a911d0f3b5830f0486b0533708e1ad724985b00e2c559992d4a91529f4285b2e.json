{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\nimport { onMounted, onUnmounted, computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const filteredNodes = computed(() => {\n      const allNodes = store.getters.userNodes;\n      const selectedNodeNames = store.state.selectedProjectNodeNames;\n      console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \");\n      console.log(allNodes.filter(node => selectedNodeNames.includes(node.name)));\n      return allNodes.filter(node => selectedNodeNames.includes(node.name));\n    });\n\n    // 남은 메모리 정보를 저장하는 객체\n    const nodeFreeMemories = computed(() => {\n      const memories = {};\n      filteredNodes.value.forEach(node => {\n        // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\n        const memory = store.getters.getNodeMemory(node.name) || 0;\n        memories[node.name] = memory;\n        console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\n      });\n      return memories;\n    });\n    onMounted(() => {\n      // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // 실시간 데이터 가져오기를 시작합니다.\n        startFetchingNodeMonitoringData();\n      }\n    });\n\n    // 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\n    onUnmounted(() => {\n      stopFetchingNodeMonitoringData();\n      sessionStorage.removeItem('selectedNodeNames'); // Clear the selected nodes\n      store.commit('clearSelectedProjectNodeNames'); // Clear the Vuex state\n    });\n\n    // 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\n    const dataInterval = ref(null);\n    function startFetchingNodeMonitoringData() {\n      stopFetchingNodeMonitoringData(); // Prevent multiple intervals\n      dataInterval.value = setInterval(() => {\n        store.dispatch(\"fetchData\");\n      }, 1000);\n    }\n    function stopFetchingNodeMonitoringData() {\n      if (dataInterval.value) {\n        clearInterval(dataInterval.value);\n        dataInterval.value = null;\n      }\n    }\n    const __returned__ = {\n      store,\n      filteredNodes,\n      nodeFreeMemories,\n      dataInterval,\n      startFetchingNodeMonitoringData,\n      stopFetchingNodeMonitoringData,\n      ProjectList,\n      MemoryGauge,\n      onMounted,\n      onUnmounted,\n      computed,\n      ref,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","MemoryGauge","onMounted","onUnmounted","computed","ref","useStore","store","filteredNodes","allNodes","getters","userNodes","selectedNodeNames","state","selectedProjectNodeNames","console","log","filter","node","includes","name","nodeFreeMemories","memories","value","forEach","memory","getNodeMemory","authToken","userEmail","dispatch","startFetchingNodeMonitoringData","stopFetchingNodeMonitoringData","sessionStorage","removeItem","commit","dataInterval","setInterval","clearInterval"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \")\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)))\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const memory = store.getters.getNodeMemory(node.name) || 0;\r\n    memories[node.name] = memory;\r\n    console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\r\n  });\r\n  return memories;\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n  sessionStorage.removeItem('selectedNodeNames'); // Clear the selected nodes\r\n  store.commit('clearSelectedProjectNodeNames'); // Clear the Vuex state\r\n});\r\n\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <!-- Render this div only if there are selected nodes -->\r\n    <div v-if=\"filteredNodes.length > 0\" class=\"memory-usage-header\">\r\n      <h2>메모리 사용량</h2>\r\n        class=\"memory-gauge-container\"\r\n        v-for=\"node in filteredNodes\"\r\n        :key=\"node.id\"\r\n      >\r\n        <MemoryGauge\r\n          :nodeName=\"node.name\"\r\n          :total-size=\"node.total_memory_mb\"\r\n          :remaining-size=\"nodeFreeMemories[node.name]\"\r\n        />\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Ensure that items can wrap */\r\n  align-items: flex-start; /* Align items to the start of the flex container */\r\n  justify-content: flex-start; /* Align items to the start on the main axis */\r\n  gap: 20px; /* Adds space between items */\r\n  padding: 20px; /* Add padding inside the dashboard container */\r\n}\r\n\r\n.project-list-container {\r\n  flex-basis: 100%; /* Make the ProjectList take full width */\r\n  max-width: 100%; /* Ensure it does not exceed the width of the container */\r\n}\r\n.memory-gauge-container {\r\n  flex: 1; /* Allow MemoryGauge components to grow and take available space */\r\n  min-width: calc(50% - 40px); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(50% - 40px); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.memory-usage-header h2 {\r\n    text-align: center;\r\n    margin-top: 20px;\r\n  }\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style>"],"mappings":"AACA,OAAOA,WAAW,MAAM,+BAA+B;AACvD,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,SAASC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,GAAG,QAAO,KAAK;AAC1D,SAASC,QAAQ,QAAQ,MAAM;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IAExB,MAAME,aAAa,GAAGJ,QAAQ,CAAC,MAAM;MACnC,MAAMK,QAAQ,GAAGF,KAAK,CAACG,OAAO,CAACC,SAAS;MACxC,MAAMC,iBAAiB,GAAGL,KAAK,CAACM,KAAK,CAACC,wBAAwB;MAC9DC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxCD,OAAO,CAACC,GAAG,CAACP,QAAQ,CAACQ,MAAM,CAAEC,IAAI,IAAKN,iBAAiB,CAACO,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;MAC7E,OAAOX,QAAQ,CAACQ,MAAM,CAAEC,IAAI,IAAKN,iBAAiB,CAACO,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC;IACzE,CAAC,CAAC;;IAEF;IACA,MAAMC,gBAAgB,GAAGjB,QAAQ,CAAC,MAAM;MACtC,MAAMkB,QAAQ,GAAG,CAAC,CAAC;MACnBd,aAAa,CAACe,KAAK,CAACC,OAAO,CAACN,IAAI,IAAI;QAClC;QACA,MAAMO,MAAM,GAAGlB,KAAK,CAACG,OAAO,CAACgB,aAAa,CAACR,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC;QAC1DE,QAAQ,CAACJ,IAAI,CAACE,IAAI,CAAC,GAAGK,MAAM;QAC5BV,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEE,IAAI,CAACE,IAAI,EAAEK,MAAM,CAAC;MACnD,CAAC,CAAC;MACF,OAAOH,QAAQ;IACjB,CAAC,CAAC;IAEFpB,SAAS,CAAC,MAAM;MACd;MACA,IAAIK,KAAK,CAACM,KAAK,CAACc,SAAS,IAAIpB,KAAK,CAACM,KAAK,CAACe,SAAS,EAAE;QAClDrB,KAAK,CAACsB,QAAQ,CAAC,eAAe,CAAC;QAC/B;QACAC,+BAA+B,CAAC,CAAC;MACnC;IACF,CAAC,CAAC;;IAEF;IACA3B,WAAW,CAAC,MAAM;MAChB4B,8BAA8B,CAAC,CAAC;MAChCC,cAAc,CAACC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC;MAChD1B,KAAK,CAAC2B,MAAM,CAAC,+BAA+B,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC;;IAGF;IACA,MAAMC,YAAY,GAAG9B,GAAG,CAAC,IAAI,CAAC;IAE9B,SAASyB,+BAA+BA,CAAA,EAAG;MACzCC,8BAA8B,CAAC,CAAC,CAAC,CAAC;MAClCI,YAAY,CAACZ,KAAK,GAAGa,WAAW,CAAC,MAAM;QACrC7B,KAAK,CAACsB,QAAQ,CAAC,WAAW,CAAC;MAC7B,CAAC,EAAE,IAAI,CAAC;IACV;IAEA,SAASE,8BAA8BA,CAAA,EAAG;MACxC,IAAII,YAAY,CAACZ,KAAK,EAAE;QACtBc,aAAa,CAACF,YAAY,CAACZ,KAAK,CAAC;QACjCY,YAAY,CAACZ,KAAK,GAAG,IAAI;MAC3B;IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}