{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nconst _hoisted_2 = {\n  ref: \"chartCanvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\components\\GaugeComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <canvas ref=\"chartCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, watch, defineProps } from \"vue\";\r\nimport Chart from \"chart.js/auto\";\r\nimport 'chartjs-plugin-datalabels';\r\n\r\nconst props = defineProps({\r\n  totalSize: Number,\r\n  remainingSize: Number,\r\n  nodeName: String\r\n});\r\n\r\nconst chartCanvas = ref(null);\r\nlet myChart = null;\r\n\r\nconst createChartData = (totalSize, remainingSize) => {\r\n  const usedSize = totalSize - remainingSize;\r\n  return {\r\n    labels: [\"Used\", \"Free\"],\r\n    datasets: [\r\n      {\r\n        label: 'Memory Usage',\r\n        data: [usedSize, remainingSize],\r\n        backgroundColor: [\"#42A5F5\", \"#ddd\"],\r\n        borderWidth: 0,\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\n// Chart.js chart configuration\r\nconst createChartConfig = (chartData, nodeName, totalSize) => {\r\n  return {\r\n    type: \"doughnut\",\r\n    data: chartData,\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        animateRotate: true,\r\n        animateScale: false,\r\n      },\r\n      circumference: 180,\r\n      rotation: 270,\r\n      plugins: {\r\n        tooltip: {\r\n          enabled: false, // Disable default tooltips\r\n        },\r\n        datalabels: {\r\n          color: '#ff0000', // Red color for the percentage in the center\r\n          textAlign: 'center',\r\n          font: {\r\n            weight: 'bold',\r\n            size: 18, // Slightly larger font size for the percentage\r\n          },\r\n          formatter: (value, context) => {\r\n            // Display the label only for the first dataset (Used memory)\r\n            if (context.dataIndex === 0) {\r\n              const percentage = (value / totalSize * 100).toFixed(2) + '%';\r\n              return percentage;\r\n            }\r\n            return null; // Return null for other data to avoid duplication\r\n          },\r\n          // Position the percentage in the center of the doughnut chart\r\n          anchor: 'center',\r\n          align: 'center',\r\n          offset: 0,\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: `${nodeName}`,\r\n          position: 'top',\r\n          color: '#666',\r\n          font: {\r\n            size: 16,\r\n          },\r\n        },\r\n      }\r\n    },\r\n    plugins: ['datalabels']\r\n  };\r\n};\r\n\r\nonMounted(() => {\r\n  const chartData = createChartData(props.totalSize, props.remainingSize);\r\n  const config = createChartConfig(chartData, props.nodeName, props.totalSize);\r\n\r\n  const context = chartCanvas.value.getContext('2d');\r\n  myChart = new Chart(context, config);\r\n});\r\n\r\nwatch(() => [props.totalSize, props.remainingSize], (newValues) => {\r\n  const [totalSize, remainingSize] = newValues;\r\n  const newChartData = createChartData(totalSize, remainingSize);\r\n\r\n  if (myChart) {\r\n    // Update each dataset's data\r\n    myChart.data.datasets.forEach((dataset, index) => {\r\n      dataset.data = newChartData.datasets[index].data;\r\n    });\r\n\r\n    // Update the percentage label\r\n    myChart.options.plugins.datalabels.formatter = (value, context) => {\r\n      if (context.dataIndex === 0) {\r\n        const percentage = ((value / totalSize) * 100).toFixed(2) + '%';\r\n        return percentage;\r\n      }\r\n      return null;\r\n    };\r\n\r\n    // Update the chart without redrawing\r\n    myChart.update({\r\n      duration: 0, // Optional: Set animation duration to 0 to prevent animations\r\n      lazy: false   // Optional: Set lazy to false to force immediate update\r\n    });\r\n  }\r\n}, { immediate: true });\r\n\r\n\r\n</script>\r\n\r\n<style>\r\n.chart-container {\r\n  overflow: visible; /* Ensures no clipping */\r\n  opacity: 1; /* Checks that it's not hidden */\r\n  position: relative;\r\n  height: 40vh;\r\n  width: 80vw;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAClBC,GAAG,EAAC;AAAa;;uBAD3BC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAmC,UAAnCC,UAAmC,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}