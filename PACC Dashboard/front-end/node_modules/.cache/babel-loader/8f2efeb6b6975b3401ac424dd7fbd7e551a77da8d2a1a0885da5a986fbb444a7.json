{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"row\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Project List component \"), _createVNode($setup[\"ProjectList\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","$setup"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport { onMounted, onUnmounted, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nconst store = useStore();\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingRealTimeData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingRealTimeData();\r\n});\r\n\r\n// 실시간 데이터를 주기적으로 가져오기 위한 로직입니다.\r\nconst realTimeDataInterval = ref(null);\r\n\r\nfunction startFetchingRealTimeData() {\r\n  // 1초마다 실시간 데이터를 가져오는 동작을 수행합니다.\r\n  realTimeDataInterval.value = setInterval(() => {\r\n    store.dispatch('fetchRealTimeData');\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingRealTimeData() {\r\n  clearInterval(realTimeDataInterval.value);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"row\">\r\n    <!-- Project List component -->\r\n    <ProjectList />\r\n   \r\n  </div>\r\n</template>\r\n"],"mappings":";;EAqCOA,KAAK,EAAC;AAAK;;uBAAhBC,mBAAA,CAIM,OAJNC,UAIM,GAHJC,mBAAA,4BAA+B,EAC/BC,YAAA,CAAeC,MAAA,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}