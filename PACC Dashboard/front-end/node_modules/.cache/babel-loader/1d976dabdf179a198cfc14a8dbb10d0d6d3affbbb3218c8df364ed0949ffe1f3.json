{"ast":null,"code":"import { ref, watch } from \"vue\";\nexport default {\n  __name: 'HyperparameterSelector',\n  props: {\n    modelValue: {\n      type: Object,\n      default: () => ({\n        learningRate: 0.0001,\n        batchSize: 32,\n        epochs: 10,\n        optimizer: 'adam',\n        lossFunction: 'categorical_crossentropy'\n      })\n    }\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // Initialize the hyperparameters with the prop value or a default object\n    // Uses the modelValue for initial values or provides defaults\n    const localHyperparameters = ref(props.modelValue);\n\n    // Watches for changes to props.modelValue\n    watch(() => props.modelValue, (newValue, oldValue) => {\n      if (newValue !== oldValue) {\n        localHyperparameters.value = {\n          ...newVal\n        };\n      }\n    }, {\n      deep: true\n    });\n\n    // Update local state and emit change to parent component\n    const handleInput = (key, stringValue) => {\n      // Convert to number if possible, otherwise keep the string to allow for \"0.\" input\n      const value = isNaN(parseFloat(stringValue)) ? stringValue : parseFloat(stringValue);\n      localHyperparameters.value[key] = value;\n      // Emit only valid numbers to parent\n      if (!isNaN(value)) {\n        emit(\"update:modelValue\", {\n          ...localHyperparameters.value,\n          [key]: value\n        });\n      }\n    };\n    const __returned__ = {\n      props,\n      emit,\n      localHyperparameters,\n      handleInput,\n      ref,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","props","__props","emit","__emit","localHyperparameters","modelValue","newValue","oldValue","value","newVal","deep","handleInput","key","stringValue","isNaN","parseFloat"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/HyperparameterSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"hyperparameter-settings\">\r\n    <h2>Hyperparameter Settings</h2>\r\n    <div class=\"hyperparameters\">\r\n      <div class=\"form-group\">\r\n        <label for=\"learningRate\">Learning Rate</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"learningRate\"\r\n          :value=\"localHyperparameters.learningRate.toString()\"\r\n          @input=\"handleInput('learningRate', $event.target.value)\"\r\n          min=\"0.0001\"\r\n          step=\"0.0001\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"batchSize\">Batch Size</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"batchSize\"\r\n          @input=\"updateHyperparameters('batchSize',$event.target.valueAsNumber )\"\r\n          min=\"1\"\r\n          step=\"1\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"epochs\">Epochs</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"epochs\"\r\n          @input=\"updateHyperparameters('epochs',$event.target.valueAsNumber )\"\r\n          min=\"1\"\r\n          step=\"1\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"optimizer\">Optimizer</label>\r\n        <select id=\"optimizer\" v-model=\"hyperparameters.optimizer\">\r\n          <option value=\"adam\">Adam</option>\r\n          <option value=\"sgd\">SGD</option>\r\n          <option value=\"rmsprop\">RMSprop</option>\r\n          <!-- Add more optimizers as needed -->\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"lossFunction\">Loss Function</label>\r\n        <select id=\"lossFunction\" v-model=\"hyperparameters.lossFunction\">\r\n          <option value=\"categorical_crossentropy\">\r\n            Categorical Crossentropy\r\n          </option>\r\n          <option value=\"sparse_categorical_crossentropy\">\r\n            Sparse Categorical Crossentropy\r\n          </option>\r\n          <option value=\"mean_squared_error\">Mean Squared Error</option>\r\n          <!-- Add more loss functions as needed -->\r\n        </select>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref, watch, defineProps, defineEmits } from \"vue\";\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: Object,\r\n    default: () => ({\r\n      learningRate: 0.0001,\r\n      batchSize: 32,\r\n      epochs: 10,\r\n      optimizer: 'adam',\r\n      lossFunction: 'categorical_crossentropy',\r\n    })\r\n  }\r\n});\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\n// Initialize the hyperparameters with the prop value or a default object\r\n// Uses the modelValue for initial values or provides defaults\r\nconst localHyperparameters = ref(props.modelValue);\r\n\r\n// Watches for changes to props.modelValue\r\nwatch(() => props.modelValue, (newValue, oldValue) => {\r\n  if (newValue !== oldValue) {\r\n    localHyperparameters.value = { ...newVal };\r\n  }\r\n}, { deep: true });\r\n\r\n// Update local state and emit change to parent component\r\nconst handleInput = (key, stringValue) => {\r\n  // Convert to number if possible, otherwise keep the string to allow for \"0.\" input\r\n  const value = isNaN(parseFloat(stringValue)) ? stringValue : parseFloat(stringValue);\r\n  localHyperparameters.value[key] = value;\r\n  // Emit only valid numbers to parent\r\n  if (!isNaN(value)) {\r\n    emit(\"update:modelValue\", { ...localHyperparameters.value, [key]: value });\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.hyperparameter-settings {\r\n  max-width: 100%;\r\n}\r\n\r\n.hyperparameters {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n}\r\n\r\n.form-group {\r\n  flex: 1;\r\n  min-width: 160px; /* Adjust the minimum width as needed */\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.form-group input,\r\n.form-group select {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>\r\n"],"mappings":"AA8DA,SAAQA,GAAG,EAAEC,KAA+B,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;;IAEzD,MAAMC,KAAK,GAAGC,OAWZ;IACF,MAAMC,IAAI,GAAGC,MAAkC;;IAE/C;IACA;IACA,MAAMC,oBAAoB,GAAGN,GAAG,CAACE,KAAK,CAACK,UAAU,CAAC;;IAElD;IACAN,KAAK,CAAC,MAAMC,KAAK,CAACK,UAAU,EAAE,CAACC,QAAQ,EAAEC,QAAQ,KAAK;MACpD,IAAID,QAAQ,KAAKC,QAAQ,EAAE;QACzBH,oBAAoB,CAACI,KAAK,GAAG;UAAE,GAAGC;QAAO,CAAC;MAC5C;IACF,CAAC,EAAE;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC;;IAElB;IACA,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEC,WAAW,KAAK;MACxC;MACA,MAAML,KAAK,GAAGM,KAAK,CAACC,UAAU,CAACF,WAAW,CAAC,CAAC,GAAGA,WAAW,GAAGE,UAAU,CAACF,WAAW,CAAC;MACpFT,oBAAoB,CAACI,KAAK,CAACI,GAAG,CAAC,GAAGJ,KAAK;MACvC;MACA,IAAI,CAACM,KAAK,CAACN,KAAK,CAAC,EAAE;QACjBN,IAAI,CAAC,mBAAmB,EAAE;UAAE,GAAGE,oBAAoB,CAACI,KAAK;UAAE,CAACI,GAAG,GAAGJ;QAAM,CAAC,CAAC;MAC5E;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}