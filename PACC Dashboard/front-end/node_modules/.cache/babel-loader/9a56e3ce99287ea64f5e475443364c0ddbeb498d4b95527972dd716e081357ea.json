{"ast":null,"code":"import { ref, watch } from \"vue\";\nexport default {\n  __name: 'HyperparameterSelector',\n  props: {\n    modelValue: {\n      type: Object,\n      default: () => ({\n        learningRate: 0.0001,\n        batchSize: 32,\n        epochs: 10,\n        optimizer: 'adam',\n        lossFunction: 'categorical_crossentropy'\n      })\n    }\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const localHyperparameters = ref({\n      ...props.modelValue\n    });\n\n    // Handle immediate, raw input from the user for learningRate\n    const handleInput = (key, stringValue) => {\n      // For learningRate, allow '.', '0', and any number starting with '0.' without converting immediately to number\n      if (key === 'learningRate') {\n        // Validate if input is either a number, starts with a '0.', or is just a '.', or '0'\n        if (/^0\\.?\\d*$|^\\.\\d+$|^0$/.test(stringValue) || stringValue === '') {\n          localHyperparameters.value[key] = stringValue;\n        }\n      } else {\n        // For other fields, directly convert to number\n        const numberValue = Number(stringValue);\n        if (!isNaN(numberValue)) {\n          localHyperparameters.value[key] = numberValue;\n        }\n      }\n      emitUpdate();\n    };\n    // Emit update only if learningRate is a valid number or other fields need updating\n    const emitUpdate = () => {\n      const updatedValue = {\n        ...localHyperparameters.value\n      };\n      if (updatedValue.learningRate !== '') {\n        updatedValue.learningRate = parseFloat(updatedValue.learningRate);\n        if (isNaN(updatedValue.learningRate)) {\n          updatedValue.learningRate = props.modelValue.learningRate; // Revert to default if not a number\n        }\n      }\n      emit('update:modelValue', updatedValue);\n    };\n    watch(() => props.modelValue, newValue => {\n      localHyperparameters.value = newValue ? {\n        ...newValue\n      } : localHyperparameters.value;\n    }, {\n      deep: true\n    });\n    const __returned__ = {\n      props,\n      emit,\n      localHyperparameters,\n      handleInput,\n      emitUpdate,\n      ref,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","props","__props","emit","__emit","localHyperparameters","modelValue","handleInput","key","stringValue","test","value","numberValue","Number","isNaN","emitUpdate","updatedValue","learningRate","parseFloat","newValue","deep"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/HyperparameterSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"hyperparameter-settings\">\r\n    <h2>Hyperparameter Settings</h2>\r\n    <div class=\"hyperparameters\">\r\n      <div class=\"form-group\">\r\n        <label for=\"learningRate\">Learning Rate</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"learningRate\"\r\n          :value=\"localHyperparameters.learningRate ? localHyperparameters.learningRate.toString() : ''\"\r\n          @input=\"handleInput('learningRate', $event.target.value)\"\r\n          min=\"0\"\r\n          step=\"0.0001\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"batchSize\">Batch Size</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"batchSize\"\r\n          @input=\"updateHyperparameters('batchSize',$event.target.valueAsNumber )\"\r\n          min=\"1\"\r\n          step=\"1\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"epochs\">Epochs</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"epochs\"\r\n          @input=\"updateHyperparameters('epochs',$event.target.valueAsNumber )\"\r\n          min=\"1\"\r\n          step=\"1\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"optimizer\">Optimizer</label>\r\n        <select id=\"optimizer\" v-model=\"localHyperparameters.optimizer\">\r\n            <option value=\"adam\" selected v-if=\"!localHyperparameters.optimizer\">Adam</option>\r\n          <option value=\"adam\">Adam</option>\r\n          <option value=\"sgd\">SGD</option>\r\n          <option value=\"rmsprop\">RMSprop</option>\r\n          <!-- Add more optimizers as needed -->\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"lossFunction\">Loss Function</label>\r\n        <select id=\"lossFunction\" v-model=\"localHyperparameters.lossFunction\">\r\n          <option value=\"categorical_crossentropy\">\r\n            Categorical Crossentropy\r\n          </option>\r\n          <option value=\"sparse_categorical_crossentropy\">\r\n            Sparse Categorical Crossentropy\r\n          </option>\r\n          <option value=\"mean_squared_error\">Mean Squared Error</option>\r\n          <!-- Add more loss functions as needed -->\r\n        </select>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref, watch, defineProps, defineEmits } from \"vue\";\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: Object,\r\n    default: () => ({\r\n      learningRate: 0.0001,\r\n      batchSize: 32,\r\n      epochs: 10,\r\n      optimizer: 'adam',\r\n      lossFunction: 'categorical_crossentropy',\r\n    }),\r\n  },\r\n});\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nconst localHyperparameters = ref({ ...props.modelValue });\r\n\r\n// Handle immediate, raw input from the user for learningRate\r\nconst handleInput = (key, stringValue) => {\r\n  // For learningRate, allow '.', '0', and any number starting with '0.' without converting immediately to number\r\n  if (key === 'learningRate') {\r\n    // Validate if input is either a number, starts with a '0.', or is just a '.', or '0'\r\n    if (/^0\\.?\\d*$|^\\.\\d+$|^0$/.test(stringValue) || stringValue === '') {\r\n      localHyperparameters.value[key] = stringValue;\r\n    }\r\n  } else {\r\n    // For other fields, directly convert to number\r\n    const numberValue = Number(stringValue);\r\n    if (!isNaN(numberValue)) {\r\n      localHyperparameters.value[key] = numberValue;\r\n    }\r\n  }\r\n  emitUpdate();\r\n};\r\n// Emit update only if learningRate is a valid number or other fields need updating\r\nconst emitUpdate = () => {\r\n  const updatedValue = { ...localHyperparameters.value };\r\n  if (updatedValue.learningRate !== '') {\r\n    updatedValue.learningRate = parseFloat(updatedValue.learningRate);\r\n    if (isNaN(updatedValue.learningRate)) {\r\n      updatedValue.learningRate = props.modelValue.learningRate; // Revert to default if not a number\r\n    }\r\n  }\r\n  emit('update:modelValue', updatedValue);\r\n};\r\n\r\nwatch(() => props.modelValue, (newValue) => {\r\n  localHyperparameters.value = newValue ? { ...newValue } : localHyperparameters.value;\r\n}, { deep: true });\r\n</script>\r\n\r\n<style scoped>\r\n.hyperparameter-settings {\r\n  max-width: 100%;\r\n}\r\n\r\n.hyperparameters {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n}\r\n\r\n.form-group {\r\n  flex: 1;\r\n  min-width: 160px; /* Adjust the minimum width as needed */\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.form-group input,\r\n.form-group select {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>\r\n"],"mappings":"AA+DA,SAAQA,GAAG,EAAEC,KAA+B,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;;IAEzD,MAAMC,KAAK,GAAGC,OAWZ;IACF,MAAMC,IAAI,GAAGC,MAAkC;IAE/C,MAAMC,oBAAoB,GAAGN,GAAG,CAAC;MAAE,GAAGE,KAAK,CAACK;IAAW,CAAC,CAAC;;IAEzD;IACA,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEC,WAAW,KAAK;MACxC;MACA,IAAID,GAAG,KAAK,cAAc,EAAE;QAC1B;QACA,IAAI,uBAAuB,CAACE,IAAI,CAACD,WAAW,CAAC,IAAIA,WAAW,KAAK,EAAE,EAAE;UACnEJ,oBAAoB,CAACM,KAAK,CAACH,GAAG,CAAC,GAAGC,WAAW;QAC/C;MACF,CAAC,MAAM;QACL;QACA,MAAMG,WAAW,GAAGC,MAAM,CAACJ,WAAW,CAAC;QACvC,IAAI,CAACK,KAAK,CAACF,WAAW,CAAC,EAAE;UACvBP,oBAAoB,CAACM,KAAK,CAACH,GAAG,CAAC,GAAGI,WAAW;QAC/C;MACF;MACAG,UAAU,CAAC,CAAC;IACd,CAAC;IACD;IACA,MAAMA,UAAU,GAAGA,CAAA,KAAM;MACvB,MAAMC,YAAY,GAAG;QAAE,GAAGX,oBAAoB,CAACM;MAAM,CAAC;MACtD,IAAIK,YAAY,CAACC,YAAY,KAAK,EAAE,EAAE;QACpCD,YAAY,CAACC,YAAY,GAAGC,UAAU,CAACF,YAAY,CAACC,YAAY,CAAC;QACjE,IAAIH,KAAK,CAACE,YAAY,CAACC,YAAY,CAAC,EAAE;UACpCD,YAAY,CAACC,YAAY,GAAGhB,KAAK,CAACK,UAAU,CAACW,YAAY,CAAC,CAAC;QAC7D;MACF;MACAd,IAAI,CAAC,mBAAmB,EAAEa,YAAY,CAAC;IACzC,CAAC;IAEDhB,KAAK,CAAC,MAAMC,KAAK,CAACK,UAAU,EAAGa,QAAQ,IAAK;MAC1Cd,oBAAoB,CAACM,KAAK,GAAGQ,QAAQ,GAAG;QAAE,GAAGA;MAAS,CAAC,GAAGd,oBAAoB,CAACM,KAAK;IACtF,CAAC,EAAE;MAAES,IAAI,EAAE;IAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}