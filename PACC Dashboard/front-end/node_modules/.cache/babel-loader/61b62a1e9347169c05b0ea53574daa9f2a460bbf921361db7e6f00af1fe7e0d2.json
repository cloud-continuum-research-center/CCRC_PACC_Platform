{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"option\", {\n  disabled: \"\",\n  value: \"\"\n}, \"Select a Node\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"ProjectList\"]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedNodeName = $event)\n  }, [_hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNodes, node => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: node.id,\n      value: node.name\n    }, _toDisplayString(node.name), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.selectedNodeName]]), _createCommentVNode(\" Only display the MemoryGauge if a node is selected \"), $setup.selectedNodeName ? (_openBlock(), _createBlock($setup[\"MemoryGauge\"], {\n    key: 0,\n    nodeName: $setup.selectedNodeName,\n    \"total-size\": $setup.getNodeTotalMemory($setup.selectedNodeName),\n    \"remaining-size\": $setup.getNodeFreeMemory($setup.selectedNodeName)\n  }, null, 8 /* PROPS */, [\"nodeName\", \"total-size\", \"remaining-size\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","disabled","value","_createElementBlock","_hoisted_1","_createVNode","$setup","_cache","$event","selectedNodeName","_hoisted_2","_Fragment","_renderList","filteredNodes","node","key","id","name","_hoisted_3","_createCommentVNode","_createBlock","nodeName","getNodeTotalMemory","getNodeFreeMemory"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<!-- <script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \")\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)))\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const memory = store.getters.getNodeMemory(node.name) || 0;\r\n    memories[node.name] = memory;\r\n    console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\r\n  });\r\n  return memories;\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <ProjectList />\r\n    <MemoryGauge\r\n      v-for=\"node in filteredNodes\"\r\n      :key=\"node.id\"\r\n      :nodeName=\"node.name\"\r\n      :total-size=\"node.total_memory_mb\"\r\n      :remaining-size=\"nodeFreeMemories[node.name]\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style> -->\r\n\r\n<!-- Dashboard.vue -->\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <ProjectList />\r\n    <select v-model=\"selectedNodeName\">\r\n      <option disabled value=\"\">Select a Node</option>\r\n      <option v-for=\"node in filteredNodes\" :key=\"node.id\" :value=\"node.name\">\r\n        {{ node.name }}\r\n      </option>\r\n    </select>\r\n    <!-- Only display the MemoryGauge if a node is selected -->\r\n    <MemoryGauge\r\n      v-if=\"selectedNodeName\"\r\n      :nodeName=\"selectedNodeName\"\r\n      :total-size=\"getNodeTotalMemory(selectedNodeName)\"\r\n      :remaining-size=\"getNodeFreeMemory(selectedNodeName)\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\nconst selectedNodeName = ref(\"\");\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"Retrieving node specification information of selected list \");\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)));\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\nconst getNodeTotalMemory = (nodeName) => {\r\n  const node = store.getters.userNodes.find((node) => node.name === nodeName);\r\n  return node ? node.total_memory_mb : 0;\r\n};\r\n\r\nconst getNodeFreeMemory = (nodeName) => {\r\n  return store.getters.getNodeMemory(nodeName) || 0;\r\n};\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n\r\n</script>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}\r\n</style>\r\n"],"mappings":";;EA8FOA,KAAK,EAAC;AAAW;gCAGlBC,mBAAA,CAAgD;EAAxCC,QAAQ,EAAR,EAAQ;EAACC,KAAK,EAAC;GAAG,eAAa;mBAjG7C;;uBA8FEC,mBAAA,CAeM,OAfNC,UAeM,GAdJC,YAAA,CAAeC,MAAA,kB,gBACfN,mBAAA,CAKS;IArGb,uBAAAO,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAgGqBF,MAAA,CAAAG,gBAAgB,GAAAD,MAAA;MAC/BE,UAAgD,G,kBAChDP,mBAAA,CAESQ,SAAA,QApGfC,WAAA,CAkG6BN,MAAA,CAAAO,aAAa,EAArBC,IAAI;yBAAnBX,mBAAA,CAES;MAF8BY,GAAG,EAAED,IAAI,CAACE,EAAE;MAAGd,KAAK,EAAEY,IAAI,CAACG;wBAC7DH,IAAI,CAACG,IAAI,wBAnGpBC,UAAA;2EAgGqBZ,MAAA,CAAAG,gBAAgB,E,GAMjCU,mBAAA,wDAA2D,EAEnDb,MAAA,CAAAG,gBAAgB,I,cADxBW,YAAA,CAKEd,MAAA;IA5GNS,GAAA;IAyGOM,QAAQ,EAAEf,MAAA,CAAAG,gBAAgB;IAC1B,YAAU,EAAEH,MAAA,CAAAgB,kBAAkB,CAAChB,MAAA,CAAAG,gBAAgB;IAC/C,gBAAc,EAAEH,MAAA,CAAAiB,iBAAiB,CAACjB,MAAA,CAAAG,gBAAgB;2EA3GzDU,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}