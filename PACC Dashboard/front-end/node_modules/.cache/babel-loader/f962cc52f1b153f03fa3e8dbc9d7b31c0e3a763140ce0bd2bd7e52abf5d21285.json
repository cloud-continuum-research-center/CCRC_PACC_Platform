{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"project-list-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"memory-usage-header\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"메모리 사용량\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode($setup[\"ProjectList\"])]), _createCommentVNode(\" Render this div only if there are selected nodes \"), $setup.filteredNodes.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_hoisted_4, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredNodes, node => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"memory-gauge-container\",\n      key: node.id\n    }, [_createVNode($setup[\"MemoryGauge\"], {\n      nodeName: node.name,\n      \"total-size\": node.total_memory_mb,\n      \"remaining-size\": $setup.nodeFreeMemories[node.name]\n    }, null, 8 /* PROPS */, [\"nodeName\", \"total-size\", \"remaining-size\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","$setup","_createCommentVNode","filteredNodes","length","_hoisted_3","_hoisted_4","_Fragment","_renderList","node","id","nodeName","name","total_memory_mb","nodeFreeMemories"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \")\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)))\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const memory = store.getters.getNodeMemory(node.name) || 0;\r\n    memories[node.name] = memory;\r\n    console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\r\n  });\r\n  return memories;\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <!-- Render this div only if there are selected nodes -->\r\n    <div v-if=\"filteredNodes.length > 0\" class=\"memory-usage-header\">\r\n      <h2>메모리 사용량</h2>\r\n      <div\r\n        class=\"memory-gauge-container\"\r\n        v-for=\"node in filteredNodes\"\r\n        :key=\"node.id\"\r\n      >\r\n        <MemoryGauge\r\n          :nodeName=\"node.name\"\r\n          :total-size=\"node.total_memory_mb\"\r\n          :remaining-size=\"nodeFreeMemories[node.name]\"\r\n        />\r\n      </div>\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n\r\n  flex-wrap: wrap; /* Allows items to wrap onto multiple lines */\r\n  align-items: flex-start; /* Align items to the start of the cross axis */\r\n  justify-content: space-between; /* Space out the items evenly */\r\n  gap: 20px; /* Adds space between items */\r\n  padding: 20px; /* Add padding inside the dashboard container */\r\n}\r\n\r\n\r\n.memory-gauge-container {\r\n  flex: 1 1 calc(50% - 20px); /* Allows for two items side by side */\r\n}\r\n.memory-usage-header {\r\n  width: 100%; /* Make sure the header takes full width */\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px; /* Add space below the header */\r\n}\r\n\r\n.project-list-container {\r\n  flex: 1; /* Allows the container to fill the space */\r\n  padding: 20px; /* Add padding if needed */\r\n  box-sizing: border-box; /* Include padding and border in the element's total width and height */\r\n}\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style>"],"mappings":";;EA+DOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAwB;;EAhEvCC,GAAA;EAoEyCD,KAAK,EAAC;;gCACzCE,mBAAA,CAAgB,YAAZ,SAAO;;uBANfC,mBAAA,CAmBQ,OAnBRC,UAmBQ,GAlBNF,mBAAA,CAEM,OAFNG,UAEM,GADJC,YAAA,CAAeC,MAAA,iB,GAEjBC,mBAAA,sDAAyD,EAC9CD,MAAA,CAAAE,aAAa,CAACC,MAAM,Q,cAA/BP,mBAAA,CAaQ,OAbRQ,UAaQ,GAZNC,UAAgB,G,kBAChBT,mBAAA,CAUMU,SAAA,QAhFZC,WAAA,CAwEuBP,MAAA,CAAAE,aAAa,EAArBM,IAAI;yBAFbZ,mBAAA,CAUM;MATJH,KAAK,EAAC,wBAAwB;MAE7BC,GAAG,EAAEc,IAAI,CAACC;QAEXV,YAAA,CAIEC,MAAA;MAHCU,QAAQ,EAAEF,IAAI,CAACG,IAAI;MACnB,YAAU,EAAEH,IAAI,CAACI,eAAe;MAChC,gBAAc,EAAEZ,MAAA,CAAAa,gBAAgB,CAACL,IAAI,CAACG,IAAI;;sCA9ErDV,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}