{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-d3a34df2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"project-widget\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"project-widget-header\"\n}, \"학습 모델 리스트\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"project-widget-body\"\n};\nconst _hoisted_4 = {\n  class: \"project-list-container\"\n};\nconst _hoisted_5 = {\n  class: \"project-list\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"project-description-container\"\n};\nconst _hoisted_8 = {\n  key: 0\n};\nconst _hoisted_9 = {\n  class: \"project-detail dataset-name\"\n};\nconst _hoisted_10 = {\n  class: \"project-detail project-status\"\n};\nconst _hoisted_11 = {\n  class: \"project-detail start-time\"\n};\nconst _hoisted_12 = {\n  class: \"project-detail nodes-list\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"ul\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.projects, (project, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      onClick: $event => $setup.selectProject(project),\n      class: _normalizeClass({\n        'is-selected': project.id === $setup.selectedProject.id\n      })\n    }, _toDisplayString(project.model_name), 11 /* TEXT, CLASS, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"h4\", null, _toDisplayString($setup.selectedProject.model_name || \"학습 모델 선택\"), 1 /* TEXT */), $setup.selectedProject.project_nodes ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"p\", _hoisted_9, \"학습 데이터 셋: \" + _toDisplayString($setup.selectedProject.dataset_name), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_10, \"현재 상태: \" + _toDisplayString($setup.selectedProject.status), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_11, \"시작 일시: \" + _toDisplayString($setup.selectedProject.created_at), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_12, \"학습 노드: \" + _toDisplayString($setup.parseNodes($setup.selectedProject.project_nodes)), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]), $setup.selectedProject.status === '학습 중' ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = $event => $setup.stopTraining($setup.selectedProject.id)),\n    class: \"stop-training-button\"\n  }, \" 학습 중단 \")) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_Fragment","_renderList","$setup","projects","project","index","onClick","$event","selectProject","_normalizeClass","id","selectedProject","model_name","_hoisted_6","_hoisted_7","_toDisplayString","project_nodes","_hoisted_8","_hoisted_9","dataset_name","_hoisted_10","status","_hoisted_11","created_at","_hoisted_12","parseNodes","_createCommentVNode","_cache","stopTraining"],"sources":["D:\\Git\\ITRC_Front\\vue-flask-dashboard\\front-end\\src\\views\\components\\ProjectsList.vue"],"sourcesContent":["<template>\n  <div class=\"project-widget\">\n    <h4 class=\"project-widget-header\">학습 모델 리스트</h4>\n    <div class=\"project-widget-body\">\n      <div class=\"project-list-container\">\n        <ul class=\"project-list\">\n          <li\n            v-for=\"(project, index) in projects\"\n            :key=\"index\"\n            @click=\"selectProject(project)\"\n            :class=\"{ 'is-selected': project.id === selectedProject.id }\"\n          >\n            {{ project.model_name }}\n          </li>\n        </ul>\n      </div>\n      <div class=\"project-description-container\">\n        <h4>{{ selectedProject.model_name || \"학습 모델 선택\" }}</h4>\n        <div v-if=\"selectedProject.project_nodes\">\n          \n        <p class=\"project-detail dataset-name\">학습 데이터 셋: {{ selectedProject.dataset_name }}</p>\n        <p class=\"project-detail project-status\">현재 상태: {{ selectedProject.status }}</p>\n        <p class=\"project-detail start-time\">시작 일시: {{ selectedProject.created_at }}</p>\n        <p class=\"project-detail nodes-list\">학습 노드: {{ parseNodes(selectedProject.project_nodes) }}</p>\n\n        </div>\n      </div>\n      <button\n        v-if=\"selectedProject.status === '학습 중'\"\n        @click=\"stopTraining(selectedProject.id)\"\n        class=\"stop-training-button\"\n      >\n        학습 중단\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed, ref, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport axios from \"axios\";\n\nconst store = useStore();\n// Log the initial state of projects from the store\nconsole.log(\n  \"Initial projects from the store:\",\n  store.getters.userProjects,\n);\n\nconst projects = computed(() => {\n  const projectsFromStore = store.getters.userProjects;\n  console.log(\n    \"프로젝트 정보 가져옴:\",\n    projectsFromStore,\n  ); // Log computed projects\n  return projectsFromStore;\n});\n\nconst selectedProject = ref({});\n\nwatch(\n  () => store.getters.userProjects,\n  (newProjects) => {\n    console.log(\n      \" Watch triggered for projects update:\",\n      newProjects,\n    ); // Log on update\n    // Update logic as is\n  },\n  { deep: true },\n);\n\nwatch(selectedProject, (newProject) => {\n  console.log(\"선택된 프로젝트 갱신:\", newProject);\n});\n\nconst selectProject = (project) => {\n  console.log(\"Project selected:\", project); // Log when a project is selected\n  selectedProject.value = project;\n  if (project.status !== \"중단됨\") {\n    \n    store.commit('setSelectedProjectId', project.id)\n    // Only update if the project is not \"stopped\"\n    const nodeNames = JSON.parse(project.project_nodes);\n    store.dispatch(\"updateSelectedProjectNodeNames\", nodeNames);\n  }\n};\n\nconst parseNodes = (nodesJson) => {\n  try {\n    return JSON.parse(nodesJson).join(\", \"); // Assuming the nodes are stored in a simple array\n  } catch (e) {\n    return \"Error parsing nodes\";\n  }\n};\n\nconst stopTraining = async () => {\n  if (!selectedProject.value || !selectedProject.value.id) {\n    console.error(\n      \"No project selected or selected project does not have an id\",\n    );\n    return;\n  }\n  try {\n    const response = await axios.post(\n      \"http://163.180.117.23:5000/api/stop-training\",\n      { projectId: selectedProject.value.id },\n      { headers: { Authorization: `Bearer ${store.state.authToken}` } },\n    );\n    if (response.data.success) {\n      console.log(\"학습 중단 요청 성공\", selectedProject.value.id);\n      alert(\"학습 중단 요청이 성공했습니다.\"); // Alert for success\n      // Refetch projects to update the list\n      await store.dispatch(\"fetchProjects\");\n      // Update selectedProject to reflect the changes if it's still selected\n      const updatedProject = store.getters.userProjects.find(\n        (p) => p.id === selectedProject.value.id,\n      );\n      if (updatedProject) {\n        selectedProject.value = updatedProject;\n      }\n    } else {\n      // Handle case where response.data.success is false\n      throw new Error(\"학습 중단 요청이 실패했습니다.\");\n    }\n  } catch (error) {\n    console.error(\"학습 중단 요청 실패\", selectedProject.value.id, error);\n    // Display an error message to the user\n    alert(\"학습 중지 요청에 실패하였습니다.\"); // Use a more user-friendly error handling instead of alert\n  }\n};\n</script>\n\n<style scoped>\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n  color: #333;\n}\n\n.project-detail {\n  font-size: 16px; /* 크기 증가 */\n  color: #000000; /* 더 진한 회색으로 변경 */\n  margin-bottom: 8px; /* 여백 조절 */\n  font-weight: bold;\n}\n\n.dataset-name {\n  font-weight: bold; /* 더 강조된 폰트 두께 */\n}\n\n.project-status {\n  color: #000000; /* 상태에 따라 다른 색상을 적용할 수 있습니다. 예: 진행 중일 때는 녹색 */\n  font-weight: bold;\n}\n\n.start-time {\n  color: #000000; /* 시작 시간을 빨간색으로 표시 */\n  font-weight: bold;\n}\n\n.nodes-list {\n  color: #000000; /* 노드 목록을 파란색으로 표시 */\n  font-weight: bold;\n}\n\n.project-widget {\n  border: 1px solid #e0e0e0; /* 더 섬세한 경계선 */\n  border-radius: 12px; /* 더 둥근 모서리 */\n  overflow: hidden;\n  background-color: #fff;\n  box-shadow: 0 10px 25px rgba(0,0,0,0.1); /* 부드러운 그림자 추가 */\n  margin: 0 auto; /* Center the widget */\n  margin-bottom: 20px; /* Add bottom margin */\n  max-width: 100%; /* Optionally add a max-width if you want to limit the size on larger screens */\n}\n\n.project-widget-header {\n  background-color: #f5f5f5; /* 더 부드러운 배경색 */\n  border-bottom: 1px solid #e0e0e0; /* 조화로운 경계선 */\n  padding: 12px 16px;\n  margin: 0;\n  index: -1;\n}\n\n\n.project-list-container {\n  width: 200px; /* 명시적 너비 설정 */\n  max-height: 400px;\n  overflow-y: auto;\n  border-right: 1px solid #ddd;\n}\n\n.project-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  font-size: 21px; /* 적절한 폰트 사이즈 */\n}\n\n.project-list li {\n  padding: 8px 16px;\n  cursor: pointer;\n    transition: background-color 0.2s, transform 0.2s;\n}\n\n.project-list li:hover,\n.project-list li.is-selected {\n  background-color: #e3f2fd; /* 더 부드러운 호버 색상 */\n}\n\n.project-description-container {\n  width: 300px; /* Set the width as needed */\n  padding: 11px;\n  font-size: 16px; /* 적절한 폰트 사이즈 */\n  \n}\n\n.project-actions-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 16px;\n}\n\n.stop-training-button {\n  height: 50px; /* 버튼 크기 조절 */\n  width: 150px;\n  border-radius: 25px; /* 매우 둥근 버튼 */\n  background-color:  #778899; /* 경고 색상 */\n  color: #fff;\n  font-size: 18px; /* 큰 폰트 사이즈 */\n  cursor: pointer;\n  transition: background-color 0.3s;\n  /*margin-top: 85px; /* Moves the button 50px down from the top */\n  margin-top: 170px; /* Adds some space at the bottom */\n  margin-right: 10px; /* Adds some space at the right */\n}\n\n.stop-training-button:hover {\n  background-color: #ef5350; /* Slightly darker green color for the hover state */\n}\nbutton:hover {\n  transform: scale(1.05); /* 약간 확대 */\n}\n.project-list li {\n  width:420px;\n  padding: 8px 16px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.project-list li:hover {\n  background-color: #f0f0f0; /* 마우스 오버 시 배경색 변경 */\n}\n\n.project-list li.is-selected {\n  background-color: #e8f0f9; /* 선택된 항목의 배경색 변경 */\n  font-weight: bold; /* 선택된 항목의 텍스트를 굵게 표시 */\n}\n\n\nbutton {\n  border-radius: 5px; /* Adjust the pixel value to control the roundness */\n  background-color: #90ee90; /* This is a light green color */\n  border: none; /* Removes the default border */\n  padding: 10px 20px; /* Adds some padding inside the button */\n  color: rgb(0, 0, 0); /* Changes the text color to white */\n  font-size: 16px; /* Adjust the font size as needed */\n  cursor: pointer; /* Changes the cursor to a pointer when hovering over the button */\n  transition: background-color 0.3s; /* Smooth transition for background color */\n}\n\nbutton:hover {\n  background-color: #76c893; /* Slightly darker green color for the hover state */\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;gEACzBC,mBAAA,CAAgD;EAA5CD,KAAK,EAAC;AAAuB,GAAC,WAAS;;EACtCA,KAAK,EAAC;AAAqB;;EACzBA,KAAK,EAAC;AAAwB;;EAC7BA,KAAK,EAAC;AAAc;mBALhC;;EAgBWA,KAAK,EAAC;AAA+B;;EAhBhDE,GAAA;AAAA;;EAoBWF,KAAK,EAAC;AAA6B;;EACnCA,KAAK,EAAC;AAA+B;;EACrCA,KAAK,EAAC;AAA2B;;EACjCA,KAAK,EAAC;AAA2B;;uBAtB1CG,mBAAA,CAkCM,OAlCNC,UAkCM,GAjCJC,UAAgD,EAChDJ,mBAAA,CA+BM,OA/BNK,UA+BM,GA9BJL,mBAAA,CAWM,OAXNM,UAWM,GAVJN,mBAAA,CASK,MATLO,UASK,I,kBARHL,mBAAA,CAOKM,SAAA,QAbfC,WAAA,CAOuCC,MAAA,CAAAC,QAAQ,EAP/C,CAOoBC,OAAO,EAAEC,KAAK;yBADxBX,mBAAA,CAOK;MALFD,GAAG,EAAEY,KAAK;MACVC,OAAK,EAAAC,MAAA,IAAEL,MAAA,CAAAM,aAAa,CAACJ,OAAO;MAC5Bb,KAAK,EAVlBkB,eAAA;QAAA,eAUqCL,OAAO,CAACM,EAAE,KAAKR,MAAA,CAAAS,eAAe,CAACD;MAAE;wBAEvDN,OAAO,CAACQ,UAAU,gCAZjCC,UAAA;sCAgBMrB,mBAAA,CAUM,OAVNsB,UAUM,GATJtB,mBAAA,CAAuD,YAAAuB,gBAAA,CAAhDb,MAAA,CAAAS,eAAe,CAACC,UAAU,gCACtBV,MAAA,CAAAS,eAAe,CAACK,aAAa,I,cAAxCtB,mBAAA,CAOM,OAzBduB,UAAA,GAoBQzB,mBAAA,CAAuF,KAAvF0B,UAAuF,EAAhD,YAAU,GAAAH,gBAAA,CAAGb,MAAA,CAAAS,eAAe,CAACQ,YAAY,kBAChF3B,mBAAA,CAAgF,KAAhF4B,WAAgF,EAAvC,SAAO,GAAAL,gBAAA,CAAGb,MAAA,CAAAS,eAAe,CAACU,MAAM,kBACzE7B,mBAAA,CAAgF,KAAhF8B,WAAgF,EAA3C,SAAO,GAAAP,gBAAA,CAAGb,MAAA,CAAAS,eAAe,CAACY,UAAU,kBACzE/B,mBAAA,CAA+F,KAA/FgC,WAA+F,EAA1D,SAAO,GAAAT,gBAAA,CAAGb,MAAA,CAAAuB,UAAU,CAACvB,MAAA,CAAAS,eAAe,CAACK,aAAa,kB,KAvB/FU,mBAAA,e,GA4BcxB,MAAA,CAAAS,eAAe,CAACU,MAAM,e,cAD9B3B,mBAAA,CAMS;IAjCfD,GAAA;IA6BSa,OAAK,EAAAqB,MAAA,QAAAA,MAAA,MAAApB,MAAA,IAAEL,MAAA,CAAA0B,YAAY,CAAC1B,MAAA,CAAAS,eAAe,CAACD,EAAE;IACvCnB,KAAK,EAAC;KACP,SAED,KAjCNmC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}