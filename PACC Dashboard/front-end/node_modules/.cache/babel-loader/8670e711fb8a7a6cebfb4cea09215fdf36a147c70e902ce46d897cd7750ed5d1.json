{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-44587f60\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"node-selector-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"node-header\"\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Node Selection\")], -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"node-content\"\n};\nconst _hoisted_4 = {\n  class: \"node-list\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"node-description\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = {\n  key: 1\n};\nconst _hoisted_9 = {\n  key: 1,\n  class: \"node-description\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Select a node to see its description.\", -1 /* HOISTED */));\nconst _hoisted_11 = [_hoisted_10];\nconst _hoisted_12 = {\n  class: \"selected-nodes\"\n};\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Selected Nodes\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Header above the entire container \"), _hoisted_2, _createCommentVNode(\" Main content area for node selection \"), _createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Node list on the far left \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.nodes, node => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: node.id,\n      onClick: $event => $setup.toggleNodeSelection(node),\n      class: _normalizeClass({\n        'selected': $setup.isNodeSelected(node)\n      })\n    }, _toDisplayString(node.name), 11 /* TEXT, CLASS, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))])]), $setup.selectedNode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"h4\", null, _toDisplayString($setup.selectedNode.name) + \" 설명\", 1 /* TEXT */), _createCommentVNode(\" Display additional node details \"), _createElementVNode(\"p\", null, \"CPU Core Count: \" + _toDisplayString($setup.selectedNode.cpu_core_count), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Total Memory: \" + _toDisplayString($setup.selectedNode.total_memory_mb) + \" MB\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Total Disk: \" + _toDisplayString($setup.selectedNode.total_disk_mb) + \" MB\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString($setup.nodeStatusDescription($setup.selectedNode.status)), 1 /* TEXT */), $setup.selectedNode.instance ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, \"Instance: \" + _toDisplayString($setup.selectedNode.instance), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $setup.selectedNode.gpu_info ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \"GPU Info: \" + _toDisplayString($setup.selectedNode.gpu_info), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [..._hoisted_11])), _createCommentVNode(\" List of selected nodes on the far right \"), _createElementVNode(\"div\", _hoisted_12, [_hoisted_13, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sortedSelectedNodes, node => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: node.id\n    }, _toDisplayString(node.name), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_hoisted_10","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","$setup","nodes","node","id","onClick","$event","toggleNodeSelection","_normalizeClass","isNodeSelected","name","_hoisted_5","selectedNode","_hoisted_6","_toDisplayString","cpu_core_count","total_memory_mb","total_disk_mb","nodeStatusDescription","status","instance","_hoisted_7","gpu_info","_hoisted_8","_hoisted_9","_hoisted_11","_hoisted_12","_hoisted_13","sortedSelectedNodes"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\components\\NodeSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"node-selector-container\">\r\n    <!-- Header above the entire container -->\r\n    <div class=\"node-header\">\r\n      <h2>Node Selection</h2>\r\n    </div>\r\n    <!-- Main content area for node selection -->\r\n    <div class=\"node-content\">\r\n      <!-- Node list on the far left -->\r\n      <div class=\"node-list\">\r\n        <ul>\r\n          <li\r\n    v-for=\"node in nodes\"\r\n    :key=\"node.id\"\r\n    @click=\"toggleNodeSelection(node)\"\r\n    :class=\"{ 'selected': isNodeSelected(node) }\"\r\n  >\r\n    {{ node.name }}\r\n  </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"node-description\" v-if=\"selectedNode\">\r\n        <h4>{{ selectedNode.name }} 설명</h4>\r\n        <!-- Display additional node details -->\r\n        <p>CPU Core Count: {{ selectedNode.cpu_core_count }}</p>\r\n        <p>Total Memory: {{ selectedNode.total_memory_mb }} MB</p>\r\n        <p>Total Disk: {{ selectedNode.total_disk_mb }} MB</p>\r\n        <p>Status: {{ nodeStatusDescription(selectedNode.status) }}</p>\r\n        <p v-if=\"selectedNode.instance\">Instance: {{ selectedNode.instance }}</p>\r\n        <p v-if=\"selectedNode.gpu_info\">GPU Info: {{ selectedNode.gpu_info }}</p>\r\n\r\n      </div>\r\n      <div class=\"node-description\" v-else>\r\n        <p>Select a node to see its description.</p>\r\n      </div>\r\n\r\n      <!-- List of selected nodes on the far right -->\r\n      <div class=\"selected-nodes\">\r\n        <h3>Selected Nodes</h3>\r\n        <ul>\r\n          <li v-for=\"node in sortedSelectedNodes\" :key=\"node.id\">\r\n            {{ node.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, defineEmits, computed, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\nconst nodes = computed(() => store.getters.userNodes || []);\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: Array,\r\n    default: () => [], // Provide a default empty array\r\n  },\r\n});\r\n\r\nconst isNodeSelected = (node) => {\r\n  return props.modelValue.some(selectedNode => selectedNode.node_id === node.node_id);\r\n};\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nonMounted(async () => {\r\n  await store.dispatch(\"fetchNodes\"); // 노드 정보 가져와서 마운트하기.\r\n});\r\n\r\nconst selectedNode = ref(null);\r\n// const isSelected = (node) => {\r\n//   return selectedNode.value && node.id === selectedNode.value.id;\r\n// };\r\n\r\nconst toggleNodeSelection = (node) => {\r\n  if (node.status !== 0) {\r\n    console.error(\"Node is not in a waiting state and cannot be selected.\");\r\n    return;\r\n  }\r\n\r\n  const isSelected = props.modelValue.some(selectedNode => selectedNode.node_id === node.node_id);\r\n  let newSelectedNodes = isSelected\r\n    ? props.modelValue.filter(selectedNode => selectedNode.node_id !== node.node_id)\r\n    : [...props.modelValue, node];\r\n\r\n  emit(\"update:modelValue\", newSelectedNodes);\r\n\r\n  // Set or unset the selectedNode for displaying details\r\n  selectedNode.value = isSelected ? null : node;\r\n};\r\n\r\nconst nodeStatusDescription = computed(() => {\r\n  const statusMap = {\r\n    0: \"waiting\",\r\n    1: \"learning\",\r\n    2: \"learning complete\",\r\n  };\r\n  return selectedNode.value\r\n    ? statusMap[selectedNode.value.status] || \"Unknown status\"\r\n    : \"\";\r\n});\r\n\r\nconst sortedSelectedNodes = computed(() => {\r\n  if (!Array.isArray(props.modelValue)) {\r\n    return []; // Return an empty array if props.modelValue is not an array\r\n  }\r\n  // Proceed with sorting if props.modelValue is an array\r\n  return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.node-selector-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid #ddd;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n}\r\n\r\n.node-header {\r\n  padding: 10px 20px;\r\n  background-color: #f5f5f5;\r\n  text-align: left;\r\n  font-size: 1.25rem;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.node-content {\r\n  display: flex;\r\n}\r\n\r\n.node-list,\r\n.node-description,\r\n.selected-nodes {\r\n  padding: 20px;\r\n  flex-basis: 33.3333%;\r\n  flex-grow: 1;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.node-list ul,\r\n.selected-nodes ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.node-list li,\r\n.selected-nodes li {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.node-list li:hover,\r\n.node-list li.selected,\r\n.selected-nodes li:hover {\r\n  background-color: #b1f397;\r\n}\r\n\r\n/* Remove border from the last element of the main content */\r\n.selected-nodes {\r\n  border-right: none;\r\n}\r\n\r\n/* Optional: Add some responsive styling */\r\n@media (max-width: 768px) {\r\n  .node-content {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .node-list,\r\n  .node-description,\r\n  .selected-nodes {\r\n    border-right: none;\r\n    border-bottom: 1px solid #ddd;\r\n    flex-basis: auto;\r\n  }\r\n\r\n  .selected-nodes {\r\n    border-bottom: none;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAyB;gEAElCC,mBAAA,CAEM;EAFDD,KAAK,EAAC;AAAa,I,aACtBC,mBAAA,CAAuB,YAAnB,gBAAc,E;;EAGfD,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAW;mBAT5B;;EAAAE,GAAA;EAsBWF,KAAK,EAAC;;;EAtBjBE,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EAiCWF,KAAK,EAAC;;iEACTC,mBAAA,CAA4C,WAAzC,uCAAqC;qBAAxCE,WAA4C,C;;EAIzCH,KAAK,EAAC;AAAgB;iEACzBC,mBAAA,CAAuB,YAAnB,gBAAc;;uBAtCxBG,mBAAA,CA8CM,OA9CNC,UA8CM,GA7CJC,mBAAA,uCAA0C,EAC1CC,UAEM,EACND,mBAAA,0CAA6C,EAC7CL,mBAAA,CAuCM,OAvCNO,UAuCM,GAtCJF,mBAAA,+BAAkC,EAClCL,mBAAA,CAWM,OAXNQ,UAWM,GAVJR,mBAAA,CASK,c,kBARHG,mBAAA,CAOHM,SAAA,QAlBPC,WAAA,CAYmBC,MAAA,CAAAC,KAAK,EAAbC,IAAI;yBADLV,mBAAA,CAOH;MALFF,GAAG,EAAEY,IAAI,CAACC,EAAE;MACZC,OAAK,EAAAC,MAAA,IAAEL,MAAA,CAAAM,mBAAmB,CAACJ,IAAI;MAC/Bd,KAAK,EAfVmB,eAAA;QAAA,YAe0BP,MAAA,CAAAQ,cAAc,CAACN,IAAI;MAAA;wBAEtCA,IAAI,CAACO,IAAI,gCAjBhBC,UAAA;sCAsB0CV,MAAA,CAAAW,YAAY,I,cAAhDnB,mBAAA,CAUM,OAVNoB,UAUM,GATJvB,mBAAA,CAAmC,YAAAwB,gBAAA,CAA5Bb,MAAA,CAAAW,YAAY,CAACF,IAAI,IAAG,KAAG,iBAC9Bf,mBAAA,qCAAwC,EACxCL,mBAAA,CAAwD,WAArD,kBAAgB,GAAAwB,gBAAA,CAAGb,MAAA,CAAAW,YAAY,CAACG,cAAc,kBACjDzB,mBAAA,CAA0D,WAAvD,gBAAc,GAAAwB,gBAAA,CAAGb,MAAA,CAAAW,YAAY,CAACI,eAAe,IAAG,KAAG,iBACtD1B,mBAAA,CAAsD,WAAnD,cAAY,GAAAwB,gBAAA,CAAGb,MAAA,CAAAW,YAAY,CAACK,aAAa,IAAG,KAAG,iBAClD3B,mBAAA,CAA+D,WAA5D,UAAQ,GAAAwB,gBAAA,CAAGb,MAAA,CAAAiB,qBAAqB,CAACjB,MAAA,CAAAW,YAAY,CAACO,MAAM,mBAC9ClB,MAAA,CAAAW,YAAY,CAACQ,QAAQ,I,cAA9B3B,mBAAA,CAAyE,KA7BjF4B,UAAA,EA6BwC,YAAU,GAAAP,gBAAA,CAAGb,MAAA,CAAAW,YAAY,CAACQ,QAAQ,oBA7B1EzB,mBAAA,gBA8BiBM,MAAA,CAAAW,YAAY,CAACU,QAAQ,I,cAA9B7B,mBAAA,CAAyE,KA9BjF8B,UAAA,EA8BwC,YAAU,GAAAT,gBAAA,CAAGb,MAAA,CAAAW,YAAY,CAACU,QAAQ,oBA9B1E3B,mBAAA,e,oBAiCMF,mBAAA,CAEM,OAFN+B,UAEM,EAnCZ,IAAAC,WAAA,KAqCM9B,mBAAA,6CAAgD,EAChDL,mBAAA,CAOM,OAPNoC,WAOM,GANJC,WAAuB,EACvBrC,mBAAA,CAIK,c,kBAHHG,mBAAA,CAEKM,SAAA,QA3CfC,WAAA,CAyC6BC,MAAA,CAAA2B,mBAAmB,EAA3BzB,IAAI;yBAAfV,mBAAA,CAEK;MAFoCF,GAAG,EAAEY,IAAI,CAACC;wBAC9CD,IAAI,CAACO,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}