{"ast":null,"code":"import { computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport MemoryGauge from \"./MemoryGaugeComponent.vue\";\nimport DiskGauge from \"./DiskGaugeComponent.vue\";\nexport default {\n  __name: 'ChartList',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const selectedChart = ref(null);\n\n    // Function to handle chart selection\n    const handleChartSelection = chartName => {\n      selectedChart.value = chartName; // Update the selected chart\n    };\n\n    // Computed property for nodes filtered by the selected project\n    const filteredNodes = computed(() => store.getters.userNodes.filter(node => store.state.selectedProjectNodeNames.includes(node.name)));\n\n    // 남은 메모리 정보를 저장하는 객체\n    const nodeFreeMemories = computed(() => {\n      const memories = {};\n      filteredNodes.value.forEach(node => {\n        memories[node.name] = store.getters.getNodeMemory(node.name) || 0;\n      });\n      return memories;\n    });\n    const nodeFreeDisk = computed(() => {\n      const disks = {};\n      filteredNodes.value.forEach(node => {\n        disks[node.name] = store.getters.getNodeDisk(node.name) || 0;\n      });\n      return disks;\n    });\n    const __returned__ = {\n      store,\n      selectedChart,\n      handleChartSelection,\n      filteredNodes,\n      nodeFreeMemories,\n      nodeFreeDisk,\n      computed,\n      ref,\n      get useStore() {\n        return useStore;\n      },\n      MemoryGauge,\n      DiskGauge\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","ref","useStore","MemoryGauge","DiskGauge","store","selectedChart","handleChartSelection","chartName","value","filteredNodes","getters","userNodes","filter","node","state","selectedProjectNodeNames","includes","name","nodeFreeMemories","memories","forEach","getNodeMemory","nodeFreeDisk","disks","getNodeDisk"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/ChartList.vue"],"sourcesContent":["<!-- ChartList.vue -->\r\n<template>\r\n    <div class=\"chart-list-widget\">\r\n      <h4 class=\"chart-list-header\">Chart List</h4>\r\n      <div class=\"chart-list-body\">\r\n        <ul class=\"chart-name-list\">\r\n          <li\r\n            v-for=\"(chartName, index) in chartNames\"\r\n            :key=\"index\"\r\n            @click=\"selectChart(chartName)\"\r\n            :class=\"{ 'selected': selectedChart === chartName }\"\r\n          >\r\n            {{ chartName }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <!-- 선택된 차트를 렌더링하는 섹션 -->\r\n      <div v-if=\"filteredNodes.length > 0\">\r\n      <h2 class=\"memory-gauge-header\">메모리 사용량</h2>\r\n      <div class=\"memory-gauge-wrapper\">\r\n        <div\r\n          class=\"memory-gauge-container\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"node.id\"\r\n        >\r\n          <MemoryGauge\r\n            :nodeName=\"node.name\"\r\n            :total-size=\"node.total_memory_mb\"\r\n            :remaining-size=\"nodeFreeMemories[node.name]\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Disk Usage Section -->\r\n    <div v-if=\"filteredNodes.length > 0\">\r\n      <h2 class=\"disk-gauge-header\">디스크 사용량</h2>\r\n      <div class=\"disk-gauge-wrapper\">\r\n        <div\r\n          class=\"disk-gauge-container\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"node.id\"\r\n        >\r\n          <DiskGauge\r\n            :nodeName=\"node.name\"\r\n            :total-size=\"node.total_disk_mb\" \r\n            :remaining-size=\"nodeFreeDisk[node.name]\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n</div>\r\n  </template>\r\n\r\n<script setup>\r\nimport { computed, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport MemoryGauge from \"./MemoryGaugeComponent.vue\";\r\nimport DiskGauge from \"./DiskGaugeComponent.vue\";\r\n\r\n\r\nconst store = useStore();\r\nconst selectedChart = ref(null);\r\n\r\n// Function to handle chart selection\r\nconst handleChartSelection = (chartName) => {\r\n  selectedChart.value = chartName; // Update the selected chart\r\n};\r\n\r\n// Computed property for nodes filtered by the selected project\r\nconst filteredNodes = computed(() =>\r\n  store.getters.userNodes.filter((node) =>\r\n    store.state.selectedProjectNodeNames.includes(node.name),\r\n  ),\r\n);\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach((node) => {\r\n    memories[node.name] = store.getters.getNodeMemory(node.name) || 0;\r\n  });\r\n  return memories;\r\n});\r\n\r\nconst nodeFreeDisk = computed(() => {\r\n  const disks = {};\r\n  filteredNodes.value.forEach((node) => {\r\n    disks[node.name] = store.getters.getNodeDisk(node.name) || 0;\r\n  });\r\n  return disks;\r\n});\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.chart-list-widget {\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  background-color: #fff;\r\n  margin: 0 auto;\r\n  margin-bottom: 20px;\r\n  width: calc(100% - 10px);\r\n  max-width: 1200px;\r\n}\r\n\r\n.chart-list-header {\r\n  background-color: #f9f9f9;\r\n  padding: 12px 16px;\r\n  margin: 0;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.chart-list-body {\r\n  display: flex;\r\n  /* Adjust width or flex properties as needed */\r\n}\r\n\r\n.chart-name-list {\r\n  /* Adjust width or flex properties as needed */\r\n  flex: 1; /* Take up a portion of the space, adjust as needed */\r\n  /* ... existing styles ... */\r\n}\r\n\r\n.chart-display {\r\n  flex: 2; /* Take up more space than the list, adjust as needed */\r\n  /* Additional styles for layout */\r\n  border-left: 1px solid #ddd;\r\n  padding: 16px;\r\n  overflow-y: auto;\r\n}\r\n\r\n\r\n.memory-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.memory-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.memory-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.disk-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.disk-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.disk-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n</style>\r\n"],"mappings":"AAsDA,SAASA,QAAQ,EAAEC,GAAG,QAAQ,KAAK;AACnC,SAASC,QAAQ,QAAQ,MAAM;AAC/B,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,SAAS,MAAM,0BAA0B;;;;;;;IAGhD,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC;IACxB,MAAMI,aAAa,GAAGL,GAAG,CAAC,IAAI,CAAC;;IAE/B;IACA,MAAMM,oBAAoB,GAAIC,SAAS,IAAK;MAC1CF,aAAa,CAACG,KAAK,GAAGD,SAAS,CAAC,CAAC;IACnC,CAAC;;IAED;IACA,MAAME,aAAa,GAAGV,QAAQ,CAAC,MAC7BK,KAAK,CAACM,OAAO,CAACC,SAAS,CAACC,MAAM,CAAEC,IAAI,IAClCT,KAAK,CAACU,KAAK,CAACC,wBAAwB,CAACC,QAAQ,CAACH,IAAI,CAACI,IAAI,CACzD,CACF,CAAC;;IAED;IACA,MAAMC,gBAAgB,GAAGnB,QAAQ,CAAC,MAAM;MACtC,MAAMoB,QAAQ,GAAG,CAAC,CAAC;MACnBV,aAAa,CAACD,KAAK,CAACY,OAAO,CAAEP,IAAI,IAAK;QACpCM,QAAQ,CAACN,IAAI,CAACI,IAAI,CAAC,GAAGb,KAAK,CAACM,OAAO,CAACW,aAAa,CAACR,IAAI,CAACI,IAAI,CAAC,IAAI,CAAC;MACnE,CAAC,CAAC;MACF,OAAOE,QAAQ;IACjB,CAAC,CAAC;IAEF,MAAMG,YAAY,GAAGvB,QAAQ,CAAC,MAAM;MAClC,MAAMwB,KAAK,GAAG,CAAC,CAAC;MAChBd,aAAa,CAACD,KAAK,CAACY,OAAO,CAAEP,IAAI,IAAK;QACpCU,KAAK,CAACV,IAAI,CAACI,IAAI,CAAC,GAAGb,KAAK,CAACM,OAAO,CAACc,WAAW,CAACX,IAAI,CAACI,IAAI,CAAC,IAAI,CAAC;MAC9D,CAAC,CAAC;MACF,OAAOM,KAAK;IACd,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}