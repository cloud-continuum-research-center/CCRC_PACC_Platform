{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref, nextTick } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { Chart, registerables } from 'chart.js';\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    Chart.register(...registerables);\n    const lineChart1 = ref(null);\n    const lineChart2 = ref(null);\n    const pieChart1 = ref(null);\n    const pieChart2 = ref(null);\n    function generateLabels(data) {\n      console.log(data);\n      return data.map((_, index) => `epoch ${index + 1}`);\n    }\n    let myLineChart1 = null;\n    let myLineChart2 = null;\n    let myPieChart1 = null;\n    let myPieChart2 = null;\n    const setupCharts = () => {\n      nextTick(() => {\n        // 기존 차트 파괴\n        if (myLineChart1) myLineChart1.destroy();\n        if (myLineChart2) myLineChart2.destroy();\n        if (myPieChart1) myPieChart1.destroy();\n        if (myPieChart2) myPieChart2.destroy();\n\n        // Setup line chart 1\n        const lineChart1Ctx = lineChart1.value.getContext('2d');\n        myLineChart1 = new Chart(lineChart1Ctx, {\n          type: 'line',\n          data: {\n            labels: generateLabels(projectInfo.value.accuracyHistory),\n            datasets: [{\n              label: 'Accuracy',\n              data: projectInfo.value.accuracyHistory,\n              fill: false,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }]\n          }\n        });\n\n        // Setup line chart 2\n        const lineChart2Ctx = lineChart2.value.getContext('2d');\n        myLineChart2 = new Chart(lineChart2Ctx, {\n          type: 'line',\n          data: {\n            labels: generateLabels(projectInfo.value.lossHistory),\n            datasets: [{\n              label: 'Loss',\n              data: projectInfo.value.lossHistory,\n              fill: false,\n              borderColor: 'rgb(255, 99, 132)',\n              tension: 0.1\n            }]\n          }\n        });\n\n        // Setup pie chart 1\n        const pieChart1Ctx = pieChart1.value.getContext('2d');\n        myPieChart1 = new Chart(pieChart1Ctx, {\n          type: 'pie',\n          data: {\n            labels: ['Red', 'Blue', 'Yellow'],\n            datasets: [{\n              label: 'Dataset 1',\n              data: [300, 50, 100],\n              backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)']\n            }]\n          }\n        });\n\n        // Setup pie chart 2\n        const pieChart2Ctx = pieChart2.value.getContext('2d');\n        myPieChart2 = new Chart(pieChart2Ctx, {\n          type: 'pie',\n          data: {\n            labels: ['Green', 'Purple', 'Orange'],\n            datasets: [{\n              label: 'Dataset 2',\n              data: [200, 150, 150],\n              backgroundColor: ['rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(255, 159, 64)']\n            }]\n          }\n        });\n      });\n    };\n    const store = useStore();\n    const intervalId = ref(null); // Use a ref to keep track of the interval ID\n\n    function startFetching(projectId) {\n      if (intervalId.value) {\n        clearInterval(intervalId.value); // Clear the current interval if it exists\n      }\n      intervalId.value = setInterval(() => {\n        console.log(\"aaa  \" + projectInfo.currentstate);\n        if (projectInfo.value.currentstate == 2) {\n          console.log(\"Training is completed\");\n          console.log(\"--------------------\");\n          return;\n        }\n        store.dispatch(\"fetchProjectInfoById\", projectId);\n        setupCharts();\n      }, 3000); // Fetch every 3 seconds\n    }\n    onMounted(() => {\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // Assuming project ID is already selected somewhere and stored in the state\n        if (store.state.selectedProjectId) {\n          startFetching(store.state.selectedProjectId);\n        }\n      }\n      setupCharts();\n    });\n    watch(() => store.state.selectedProjectId, newId => {\n      if (newId && store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjectInfoById\", newId); // Fetch immediately when ID changes\n        startFetching(newId); // Start or restart the fetching interval\n        setupCharts();\n      } else {\n        if (intervalId.value) {\n          clearInterval(intervalId.value); // Clear the interval if the ID becomes invalid\n          intervalId.value = null;\n        }\n      }\n    }, {\n      immediate: true\n    });\n    onUnmounted(() => {\n      // Clean up the interval when the component is destroyed\n      if (intervalId.value) {\n        clearInterval(intervalId.value);\n      }\n      if (myLineChart1) myLineChart1.destroy();\n      if (myLineChart2) myLineChart2.destroy();\n      if (myPieChart1) myPieChart1.destroy();\n      if (myPieChart2) myPieChart2.destroy();\n    });\n\n    // Computed property to display project info\n    const projectInfo = computed(() => {\n      console.log(\"projectInfo updated\", store.state.projectsInfo[store.state.selectedProjectId]);\n      const data = store.state.projectsInfo[store.state.selectedProjectId] || {};\n      return {\n        progress: data.progress || 0,\n        epoch: data.epoch || 0,\n        accuracy: data.accuracy && data.accuracy.length > 0 ? data.accuracy[data.accuracy.length - 1] : 0,\n        loss: data.loss && data.loss.length > 0 ? data.loss[data.loss.length - 1] : 0,\n        accuracyHistory: data.accuracy || [],\n        lossHistory: data.loss || [],\n        currentsate: data.current_state || 0\n      };\n    });\n    const __returned__ = {\n      lineChart1,\n      lineChart2,\n      pieChart1,\n      pieChart2,\n      generateLabels,\n      get myLineChart1() {\n        return myLineChart1;\n      },\n      set myLineChart1(v) {\n        myLineChart1 = v;\n      },\n      get myLineChart2() {\n        return myLineChart2;\n      },\n      set myLineChart2(v) {\n        myLineChart2 = v;\n      },\n      get myPieChart1() {\n        return myPieChart1;\n      },\n      set myPieChart1(v) {\n        myPieChart1 = v;\n      },\n      get myPieChart2() {\n        return myPieChart2;\n      },\n      set myPieChart2(v) {\n        myPieChart2 = v;\n      },\n      setupCharts,\n      store,\n      intervalId,\n      startFetching,\n      projectInfo,\n      ProjectList,\n      onMounted,\n      watch,\n      computed,\n      onUnmounted,\n      ref,\n      nextTick,\n      get useStore() {\n        return useStore;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get registerables() {\n        return registerables;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","onMounted","watch","computed","onUnmounted","ref","nextTick","useStore","Chart","registerables","register","lineChart1","lineChart2","pieChart1","pieChart2","generateLabels","data","console","log","map","_","index","myLineChart1","myLineChart2","myPieChart1","myPieChart2","setupCharts","destroy","lineChart1Ctx","value","getContext","type","labels","projectInfo","accuracyHistory","datasets","label","fill","borderColor","tension","lineChart2Ctx","lossHistory","pieChart1Ctx","backgroundColor","pieChart2Ctx","store","intervalId","startFetching","projectId","clearInterval","setInterval","currentstate","dispatch","state","authToken","userEmail","selectedProjectId","newId","immediate","projectsInfo","progress","epoch","accuracy","length","loss","currentsate","current_state"],"sources":["D:/Git/ITRC_Front/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["\n<template>\n  <div class=\"dashboard\">\n    <div class=\"project-list-container\">\n      <ProjectList />\n    </div>\n    <div class=\"project-info-widget\" v-if=\"projectInfo\">\n    <div class=\"tarining-status-header\">\n    <h4>학습 상태</h4>\n    </div>\n    <p> </p> \n    <p> </p> \n    <p> </p> \n    <p class=\"project-info-highlight\">모델 학습 진행율: {{ projectInfo.progress ? `${projectInfo.progress}%` : '0' }}</p>\n    <p class=\"project-info-highlight epoch\">모델 훈련 횟수: {{ projectInfo.epoch !== undefined ? projectInfo.epoch : '0' }}</p>\n    <p class=\"project-info-highlight accuracy\">모델 정확도: {{ typeof projectInfo.accuracy === 'number' ? projectInfo.accuracy.toFixed(2) + '%' : '0%' }}</p>\n<p class=\"project-info-highlight loss\">모델 Loss 값: {{ projectInfo.loss ? projectInfo.loss.toFixed(4) : '0' }}</p>\n       \n  </div>\n  </div>\n  <div class=\"project-info-widget-chart\" v-if=\"projectInfo\">\n<canvas ref=\"lineChart1\" class=\"canvas-size\"></canvas>\n<canvas ref=\"lineChart2\" class=\"canvas-size\"></canvas>\n<canvas ref=\"pieChart1\" class=\"canvas-size\"></canvas>\n<canvas ref=\"pieChart2\" class=\"canvas-size\"></canvas>\n    </div>\n</template>\n\n\n\n<script setup>\nimport ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref , nextTick } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\nconst lineChart1 = ref(null);\nconst lineChart2 = ref(null);\nconst pieChart1 = ref(null);\nconst pieChart2 = ref(null);\n\nfunction generateLabels(data) {\n  console.log(data);\n  return data.map((_, index) => `epoch ${index + 1}`);\n}\nlet myLineChart1 = null;\nlet myLineChart2 = null;\nlet myPieChart1 = null;\nlet myPieChart2 = null;\n\nconst setupCharts = () => {\n\n\n  nextTick(() => {\n    // 기존 차트 파괴\n    if (myLineChart1) myLineChart1.destroy();\n    if (myLineChart2) myLineChart2.destroy();\n    if (myPieChart1) myPieChart1.destroy();\n    if (myPieChart2) myPieChart2.destroy();\n\n    // Setup line chart 1\n    const lineChart1Ctx = lineChart1.value.getContext('2d');\n    myLineChart1 = new Chart(lineChart1Ctx, {\n      type: 'line',\n      data: {\n        labels: generateLabels(projectInfo.value.accuracyHistory),\n        datasets: [{\n          label: 'Accuracy',\n          data: projectInfo.value.accuracyHistory,\n          fill: false,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      }\n    });\n\n    // Setup line chart 2\n    const lineChart2Ctx = lineChart2.value.getContext('2d');\n    myLineChart2 = new Chart(lineChart2Ctx, {\n      type: 'line',\n      data: {\n        labels: generateLabels(projectInfo.value.lossHistory),\n        datasets: [{\n          label: 'Loss',\n          data: projectInfo.value.lossHistory,\n          fill: false,\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.1\n        }]\n      }\n    });\n\n    // Setup pie chart 1\n    const pieChart1Ctx = pieChart1.value.getContext('2d');\n    myPieChart1 = new Chart(pieChart1Ctx, {\n      type: 'pie',\n      data: {\n        labels: ['Red', 'Blue', 'Yellow'],\n        datasets: [{\n          label: 'Dataset 1',\n          data: [300, 50, 100],\n          backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)']\n        }]\n      }\n    });\n\n    // Setup pie chart 2\n    const pieChart2Ctx = pieChart2.value.getContext('2d');\n    myPieChart2 = new Chart(pieChart2Ctx, {\n      type: 'pie',\n      data: {\n        labels: ['Green', 'Purple', 'Orange'],\n        datasets: [{\n          label: 'Dataset 2',\n          data: [200, 150, 150],\n          backgroundColor: ['rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(255, 159, 64)']\n        }]\n      }\n    });\n  });\n};\n\nconst store = useStore();\nconst intervalId = ref(null); // Use a ref to keep track of the interval ID\n\nfunction startFetching(projectId) {\n  if (intervalId.value) {\n    clearInterval(intervalId.value); // Clear the current interval if it exists\n  }\n  intervalId.value = setInterval(() => {\n      console.log(\"aaa  \" + projectInfo.currentstate)\n    if(projectInfo.value.currentstate == 2){\n      console.log(\"Training is completed\");\n      console.log(\"--------------------\")\n    \n     return;\n    }\n    store.dispatch(\"fetchProjectInfoById\", projectId);\n    setupCharts();\n  }, 3000); // Fetch every 3 seconds\n}\n\nonMounted(() => {\n  if (store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjects\");\n    // Assuming project ID is already selected somewhere and stored in the state\n    if (store.state.selectedProjectId) {\n      startFetching(store.state.selectedProjectId);\n    }\n  }\n  setupCharts();\n});\n\nwatch(() => store.state.selectedProjectId, (newId) => {\n  if (newId && store.state.authToken && store.state.userEmail) {\n    store.dispatch(\"fetchProjectInfoById\", newId); // Fetch immediately when ID changes\n    startFetching(newId); // Start or restart the fetching interval\n    setupCharts();\n  } else {\n    if (intervalId.value) {\n      clearInterval(intervalId.value); // Clear the interval if the ID becomes invalid\n      intervalId.value = null;\n    }\n  }\n}, { immediate: true });\n\nonUnmounted(() => {\n  // Clean up the interval when the component is destroyed\n  if (intervalId.value) {\n    clearInterval(intervalId.value);\n  }\n    if (myLineChart1) myLineChart1.destroy();\n  if (myLineChart2) myLineChart2.destroy();\n  if (myPieChart1) myPieChart1.destroy();\n  if (myPieChart2) myPieChart2.destroy();\n});\n\n// Computed property to display project info\nconst projectInfo = computed(() => {\n  console.log(\"projectInfo updated\", store.state.projectsInfo[store.state.selectedProjectId]);\n  const data = store.state.projectsInfo[store.state.selectedProjectId] || {};\n  return {\n    progress: data.progress || 0,\n    epoch: data.epoch || 0,\n    accuracy: (data.accuracy && data.accuracy.length > 0) ? data.accuracy[data.accuracy.length - 1] : 0,\n    loss: (data.loss && data.loss.length > 0) ? data.loss[data.loss.length - 1] : 0,\n    accuracyHistory: data.accuracy || [],\n    lossHistory: data.loss || [],\n    currentsate: data.current_state || 0\n  };\n});\n</script>\n\n\n<style>\n\n.project-info-widget\n{\n  margin-left: 20px;\n}\n\n.project-info-widget-chart {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n  align-items: flex-start; /* 요소들을 컨테이너의 왼쪽에 정렬 */\n  justify-content: flex-start;\n\n  justify-content: space-around; /* 공간을 균등하게 분배 */\n}\n\n.canvas-size {\n  width: 350px !important; /* 너비 조정 */\n  height: 350px !important; /* 높이 조정 */\n}\n\n.dashboard {\n  display: flex;\n  align-items: flex-start; /* 요소들을 컨테이너의 상단에 정렬 */\n  justify-content: flex-start; /* 요소들을 컨테이너의 왼쪽에서 시작하도록 정렬 */\n  gap: 20px; /* 요소들 사이의 간격 */\n  padding: 20px; /* 대시보드 패딩 */\n  \n}\n\n\n.project-list-container {\n  min-width: 800px; /* 최소 너비 설정 */\n  max-height: 500px; /* 최대 높이 설정 */\n  height: 275px; /* 높이 100%로 설정 */\n\n}\n\n.project-info-widget {\n  flex: 1; /* 유연하게 너비 조정 */\n  flex-grow: 2; /* 컨테이너가 더 많은 공간을 차지하도록 설정 */\n  padding: 20px; \n  margin-top: 0; /* 위쪽 마진 제거 */\n  border: 1px solid #ccc; /* 테두리 설정 */\n  border-radius: 12px;\n  background-color: #fff;\n  box-shadow: 0 25px 30px rgba(0, 0, 0, 0.07);\n  height: 310px;\n}\n\n\n/* 헤더 스타일 */\nh4 {\n  margin-bottom: 20px; /* 여백을 더 줍니다 */\n  font-size: 22px; /* 크기를 키웁니다 */\n  font-weight: 600; /* 조금 더 강조된 두께 */\n  color: #333; /* 색상은 약간 어두운 회색으로 조정 */\n}\n\n/* 단락 스타일 */\np {\n  font-size: 18px; /* 텍스트 크기를 키웁니다 */\n  color: #666; /* 색상은 좀 더 연한 회색으로 조정 */\n  margin-bottom: 10px; /* 단락 사이의 여백을 조정 */\n  line-height: 1.4; /* 줄 간격을 조정하여 가독성을 높입니다 */\n}\n\n\n.project-info-highlight {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: 500; /* 더 강조된 폰트 두께 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #1a237e; /* 진한 파란색으로 변경 */\n}\n\n.progress {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #4caf50; /* 진한 녹색으로 변경 */\n}\n\n.epoch {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #ff9800; /* 주황색으로 변경 */\n}\n\n.accuracy {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #009688; /* 테일 그린색으로 변경 */\n}\n\n.loss {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #f44336; /* 빨간색으로 변경 */\n}\n\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}