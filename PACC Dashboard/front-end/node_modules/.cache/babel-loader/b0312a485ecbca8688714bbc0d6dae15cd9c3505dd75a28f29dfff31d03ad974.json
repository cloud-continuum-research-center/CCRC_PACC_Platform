{"ast":null,"code":"import { normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-group\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"input-group-text\"\n};\nconst _hoisted_3 = [\"id\", \"type\", \"name\", \"value\", \"placeholder\", \"isRequired\"];\nconst _hoisted_4 = {\n  key: 1,\n  class: \"input-group-text\"\n};\nexport default {\n  __name: 'ArgonInput',\n  props: {\n    size: {\n      type: String,\n      default: \"default\"\n    },\n    success: {\n      type: Boolean,\n      default: false\n    },\n    error: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: \"\"\n    },\n    iconDir: {\n      type: String,\n      default: \"\"\n    },\n    name: {\n      type: String,\n      default: \"\"\n    },\n    id: {\n      type: String,\n      default: \"\"\n    },\n    modelValue: {\n      type: String,\n      default: \"\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    type: {\n      type: String,\n      default: \"text\"\n    },\n    isRequired: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const emit = __emit;\n    const getClasses = (size, success, error) => {\n      let sizeValue, isValidValue;\n      sizeValue = size ? `form-control-${size}` : null;\n      if (error) {\n        isValidValue = \"is-invalid\";\n      } else if (success) {\n        isValidValue = \"is-valid\";\n      } else {\n        isValidValue = \"\";\n      }\n      return `${sizeValue} ${isValidValue}`;\n    };\n    const getIcon = icon => icon ? icon : null;\n    const hasIcon = icon => icon ? \"input-group\" : null;\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n        class: _normalizeClass(hasIcon(__props.icon))\n      }, [__props.iconDir === 'left' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, [_createElementVNode(\"i\", {\n        class: _normalizeClass(getIcon(__props.icon))\n      }, null, 2)])) : _createCommentVNode(\"\", true), _createElementVNode(\"input\", {\n        id: __props.id,\n        type: __props.type,\n        class: _normalizeClass([\"form-control\", getClasses(__props.size, __props.success, __props.error)]),\n        name: __props.name,\n        value: __props.modelValue,\n        placeholder: __props.placeholder,\n        isRequired: __props.isRequired,\n        onInput: _cache[0] || (_cache[0] = $event => emit('update:modelValue', $event.target.value))\n      }, null, 42, _hoisted_3), __props.iconDir === 'right' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, [_createElementVNode(\"i\", {\n        class: _normalizeClass(getIcon(__props.icon))\n      }, null, 2)])) : _createCommentVNode(\"\", true)], 2)]);\n    };\n  }\n};","map":{"version":3,"names":["emit","__emit","getClasses","size","success","error","sizeValue","isValidValue","getIcon","icon","hasIcon"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/components/ArgonInput.vue"],"sourcesContent":["<script setup>\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\ndefineProps({\r\n  size: {\r\n    type: String,\r\n    default: \"default\",\r\n  },\r\n  success: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  error: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  icon: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  iconDir: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  name: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  id: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  modelValue: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  placeholder: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: \"text\",\r\n  },\r\n  isRequired: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n});\r\n\r\nconst getClasses = (size, success, error) => {\r\n  let sizeValue, isValidValue;\r\n\r\n  sizeValue = size ? `form-control-${size}` : null;\r\n\r\n  if (error) {\r\n    isValidValue = \"is-invalid\";\r\n  } else if (success) {\r\n    isValidValue = \"is-valid\";\r\n  } else {\r\n    isValidValue = \"\";\r\n  }\r\n\r\n  return `${sizeValue} ${isValidValue}`;\r\n};\r\nconst getIcon = (icon) => (icon ? icon : null);\r\nconst hasIcon = (icon) => (icon ? \"input-group\" : null);\r\n</script>\r\n<template>\r\n  <div class=\"form-group\">\r\n    <div :class=\"hasIcon(icon)\">\r\n      <span v-if=\"iconDir === 'left'\" class=\"input-group-text\">\r\n        <i :class=\"getIcon(icon)\"></i>\r\n      </span>\r\n      <input\r\n        :id=\"id\"\r\n        :type=\"type\"\r\n        class=\"form-control\"\r\n        :class=\"getClasses(size, success, error)\"\r\n        :name=\"name\"\r\n        :value=\"modelValue\"\r\n        :placeholder=\"placeholder\"\r\n        :isRequired=\"isRequired\"\r\n        @input=\"emit('update:modelValue', $event.target.value)\"\r\n      />\r\n      <span v-if=\"iconDir === 'right'\" class=\"input-group-text\">\r\n        <i :class=\"getIcon(icon)\"></i>\r\n      </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACA,MAAMA,IAAI,GAAGC,MAAkC;IAiD/C,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEC,OAAO,EAAEC,KAAK,KAAK;MAC3C,IAAIC,SAAS,EAAEC,YAAY;MAE3BD,SAAS,GAAGH,IAAI,GAAI,gBAAeA,IAAK,EAAC,GAAG,IAAI;MAEhD,IAAIE,KAAK,EAAE;QACTE,YAAY,GAAG,YAAY;MAC7B,CAAC,MAAM,IAAIH,OAAO,EAAE;QAClBG,YAAY,GAAG,UAAU;MAC3B,CAAC,MAAM;QACLA,YAAY,GAAG,EAAE;MACnB;MAEA,OAAQ,GAAED,SAAU,IAAGC,YAAa,EAAC;IACvC,CAAC;IACD,MAAMC,OAAO,GAAIC,IAAI,IAAMA,IAAI,GAAGA,IAAI,GAAG,IAAK;IAC9C,MAAMC,OAAO,GAAID,IAAI,IAAMA,IAAI,GAAG,aAAa,GAAG,IAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}