{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\nimport { onMounted, onUnmounted, computed, ref, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const filteredNodes = computed(() => {\n      const allNodes = store.getters.userNodes;\n      const selectedNodeNames = store.state.selectedProjectNodeNames;\n      // Log to check the filtered nodes based on selected project\n      console.log('Filtered Nodes:', allNodes.filter(node => selectedNodeNames.includes(node.name)));\n      return allNodes.filter(node => selectedNodeNames.includes(node.name));\n    });\n    const getNodeFreeMemory = nodeName => {\n      const selectedNodeNames = store.state.selectedProjectNodeNames;\n      if (selectedNodeNames.includes(nodeName)) {\n        const freeMemory = store.getters.getNodeMemory(nodeName) || 0;\n        // Log to check the free memory for each node\n        console.log(`Free memory for ${nodeName}:`, freeMemory);\n        return freeMemory;\n      }\n      return 0; // If the node is not part of the selected project, return 0\n    };\n    onMounted(() => {\n      // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // 실시간 데이터 가져오기를 시작합니다.\n        startFetchingNodeMonitoringData();\n      }\n    });\n\n    // 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\n    onUnmounted(() => {\n      stopFetchingNodeMonitoringData();\n    });\n\n    // 실시간 데이터를 주기적으로 가져오기 위한 로직입니다.\n    const dataInterval = ref(null);\n    function startFetchingNodeMonitoringData() {\n      stopFetchingNodeMonitoringData(); // Prevent multiple intervals\n      dataInterval.value = setInterval(() => {\n        store.dispatch(\"fetchData\");\n      }, 1000);\n    }\n    function stopFetchingNodeMonitoringData() {\n      if (dataInterval.value) {\n        clearInterval(dataInterval.value);\n        dataInterval.value = null;\n      }\n    }\n    watch(filteredNodes, newFilteredNodes => {\n      newFilteredNodes.forEach(node => {\n        const freeMemory = getNodeFreeMemory(node.name);\n        console.log(`Node: ${node.name}, Total Memory: ${node.total_memory_mb}, Free Memory: ${freeMemory}`);\n      });\n    }, {\n      immediate: true\n    });\n    const __returned__ = {\n      store,\n      filteredNodes,\n      getNodeFreeMemory,\n      dataInterval,\n      startFetchingNodeMonitoringData,\n      stopFetchingNodeMonitoringData,\n      ProjectList,\n      MemoryGauge,\n      onMounted,\n      onUnmounted,\n      computed,\n      ref,\n      watch,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","MemoryGauge","onMounted","onUnmounted","computed","ref","watch","useStore","store","filteredNodes","allNodes","getters","userNodes","selectedNodeNames","state","selectedProjectNodeNames","console","log","filter","node","includes","name","getNodeFreeMemory","nodeName","freeMemory","getNodeMemory","authToken","userEmail","dispatch","startFetchingNodeMonitoringData","stopFetchingNodeMonitoringData","dataInterval","value","setInterval","clearInterval","newFilteredNodes","forEach","total_memory_mb","immediate"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref, watch } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  // Log to check the filtered nodes based on selected project\r\n  console.log('Filtered Nodes:', allNodes.filter((node) => selectedNodeNames.includes(node.name)));\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n\r\nconst getNodeFreeMemory = (nodeName) => {\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  if (selectedNodeNames.includes(nodeName)) {\r\n    const freeMemory = store.getters.getNodeMemory(nodeName) || 0;\r\n    // Log to check the free memory for each node\r\n    console.log(`Free memory for ${nodeName}:`, freeMemory);\r\n    return freeMemory;\r\n  }\r\n  return 0; // If the node is not part of the selected project, return 0\r\n};\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\nwatch(filteredNodes, (newFilteredNodes) => {\r\n  newFilteredNodes.forEach(node => {\r\n    const freeMemory = getNodeFreeMemory(node.name);\r\n    console.log(`Node: ${node.name}, Total Memory: ${node.total_memory_mb}, Free Memory: ${freeMemory}`);\r\n  });\r\n}, { immediate: true });\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <ProjectList />\r\n    <MemoryGauge\r\n      v-for=\"node in filteredNodes\"\r\n      :key=\"node.id\"\r\n      :nodeName=\"node.name\"\r\n      :total-size=\"node.total_memory_mb\"\r\n      :remaining-size=\"getNodeFreeMemory(node.name)\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}\r\n</style>\r\n"],"mappings":"AACA,OAAOA,WAAW,MAAM,+BAA+B;AACvD,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,SAASC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,QAAQ,KAAK;AAClE,SAASC,QAAQ,QAAQ,MAAM;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IAExB,MAAME,aAAa,GAAGL,QAAQ,CAAC,MAAM;MACnC,MAAMM,QAAQ,GAAGF,KAAK,CAACG,OAAO,CAACC,SAAS;MACxC,MAAMC,iBAAiB,GAAGL,KAAK,CAACM,KAAK,CAACC,wBAAwB;MAC9D;MACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEP,QAAQ,CAACQ,MAAM,CAAEC,IAAI,IAAKN,iBAAiB,CAACO,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;MAChG,OAAOX,QAAQ,CAACQ,MAAM,CAAEC,IAAI,IAAKN,iBAAiB,CAACO,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC;IACzE,CAAC,CAAC;IAGF,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;MACtC,MAAMV,iBAAiB,GAAGL,KAAK,CAACM,KAAK,CAACC,wBAAwB;MAC9D,IAAIF,iBAAiB,CAACO,QAAQ,CAACG,QAAQ,CAAC,EAAE;QACxC,MAAMC,UAAU,GAAGhB,KAAK,CAACG,OAAO,CAACc,aAAa,CAACF,QAAQ,CAAC,IAAI,CAAC;QAC7D;QACAP,OAAO,CAACC,GAAG,CAAE,mBAAkBM,QAAS,GAAE,EAAEC,UAAU,CAAC;QACvD,OAAOA,UAAU;MACnB;MACA,OAAO,CAAC,CAAC,CAAC;IACZ,CAAC;IACDtB,SAAS,CAAC,MAAM;MACd;MACA,IAAIM,KAAK,CAACM,KAAK,CAACY,SAAS,IAAIlB,KAAK,CAACM,KAAK,CAACa,SAAS,EAAE;QAClDnB,KAAK,CAACoB,QAAQ,CAAC,eAAe,CAAC;QAC/B;QACAC,+BAA+B,CAAC,CAAC;MACnC;IACF,CAAC,CAAC;;IAEF;IACA1B,WAAW,CAAC,MAAM;MAChB2B,8BAA8B,CAAC,CAAC;IAClC,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAY,GAAG1B,GAAG,CAAC,IAAI,CAAC;IAE9B,SAASwB,+BAA+BA,CAAA,EAAG;MACzCC,8BAA8B,CAAC,CAAC,CAAC,CAAC;MAClCC,YAAY,CAACC,KAAK,GAAGC,WAAW,CAAC,MAAM;QACrCzB,KAAK,CAACoB,QAAQ,CAAC,WAAW,CAAC;MAC7B,CAAC,EAAE,IAAI,CAAC;IACV;IAEA,SAASE,8BAA8BA,CAAA,EAAG;MACxC,IAAIC,YAAY,CAACC,KAAK,EAAE;QACtBE,aAAa,CAACH,YAAY,CAACC,KAAK,CAAC;QACjCD,YAAY,CAACC,KAAK,GAAG,IAAI;MAC3B;IACF;IAEA1B,KAAK,CAACG,aAAa,EAAG0B,gBAAgB,IAAK;MACzCA,gBAAgB,CAACC,OAAO,CAACjB,IAAI,IAAI;QAC/B,MAAMK,UAAU,GAAGF,iBAAiB,CAACH,IAAI,CAACE,IAAI,CAAC;QAC/CL,OAAO,CAACC,GAAG,CAAE,SAAQE,IAAI,CAACE,IAAK,mBAAkBF,IAAI,CAACkB,eAAgB,kBAAiBb,UAAW,EAAC,CAAC;MACtG,CAAC,CAAC;IACJ,CAAC,EAAE;MAAEc,SAAS,EAAE;IAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}