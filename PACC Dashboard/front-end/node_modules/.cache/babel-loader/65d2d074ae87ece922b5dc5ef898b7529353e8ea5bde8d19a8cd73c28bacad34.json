{"ast":null,"code":"import { ref, watch } from \"vue\";\nexport default {\n  __name: 'ModelSelector',\n  props: {\n    modelValue: Object\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const models = ref([{\n      id: \"1\",\n      name: \"Model A\",\n      description: \"This is a description of Model A.\"\n    }, {\n      id: \"2\",\n      name: \"Model B\",\n      description: \"This is a description of Model B.\"\n    }, {\n      id: \"3\",\n      name: \"Model C\",\n      description: \"This is a description of Model C.\"\n    }\n    // Continue adding models here\n    ]);\n    const selectedModel = ref(props.modelValue || models.value[0]);\n\n    // Watches for changes to props.modelValue\n    watch(() => props.modelValue, newValue => {\n      selectedModel.value = newValue;\n    });\n    const updateSelectedModel = model => {\n      selectedModel.value = model;\n      // Emit event for v-model to work\n      emit(\"update:modelValue\", model);\n    };\n    const __returned__ = {\n      props,\n      emit,\n      models,\n      selectedModel,\n      updateSelectedModel,\n      ref,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","props","__props","emit","__emit","models","id","name","description","selectedModel","modelValue","value","newValue","updateSelectedModel","model"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/ModelSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"model-selector-container\">\r\n    <!-- Header title for the model selection -->\r\n    <h2 class=\"model-header\">Model Selection</h2>\r\n    <!-- Model list and description container -->\r\n    <div class=\"model-content\">\r\n      <div class=\"model-list\">\r\n        <ul>\r\n          <li\r\n            v-for=\"model in models\"\r\n            :key=\"model.id\"\r\n            @click=\"updateSelectedModel(model)\"\r\n            :class=\"{ selected: model === selectedModel }\"\r\n          >\r\n            {{ model.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"model-description\">\r\n        <h3>{{ selectedModel?.name }}</h3>\r\n        <p>{{ selectedModel?.description }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, watch, defineEmits } from \"vue\";\r\n\r\nconst props = defineProps({\r\n  modelValue: Object,\r\n});\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nconst models = ref([\r\n  { id: \"1\", name: \"Model A\", description: \"This is a description of Model A.\" },\r\n  { id: \"2\", name: \"Model B\", description: \"This is a description of Model B.\" },\r\n  { id: \"3\", name: \"Model C\", description: \"This is a description of Model C.\" },\r\n  // Continue adding models here\r\n]);\r\n\r\nconst selectedModel = ref(props.modelValue || models.value[0]);\r\n\r\n// Watches for changes to props.modelValue\r\nwatch(\r\n  () => props.modelValue,\r\n  (newValue) => {\r\n    selectedModel.value = newValue;\r\n  },\r\n);\r\n\r\nconst updateSelectedModel = (model) => {\r\n  selectedModel.value = model;\r\n  // Emit event for v-model to work\r\n  emit(\"update:modelValue\", model);\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.model-selector-container {\r\n  border: 1px solid #ddd;\r\n  background-color: #fff; /* Set background to white */\r\n  border-radius: 8px; /* 모서리 둥글게  */\r\n  flex-direction: column;\r\n}\r\n.model-header {\r\n  text-align: left;\r\n  padding: 10px 20px;\r\n  background: #ececec;\r\n  margin: 0;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.model-content {\r\n  display: flex;\r\n}\r\n\r\n.model-list ul {\r\n  list-style-type: none; /* Removes the default list styling */\r\n  padding: 0;\r\n  margin: 0;\r\n  width: 250px; /* Set the width of the list */\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.model-list li {\r\n  padding: 15px 20px; /* Provide padding to each list item */\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee; /* Add separation between items */\r\n  transition: background-color 0.3s; /* Smooth transition for background color */\r\n  font-size: 18px; /*폰트 사이즈 조절*/\r\n}\r\n\r\n.model-list li:hover,\r\n.model-list li.selected {\r\n  background-color: #b1f397; /* A light grey background for hover state */\r\n}\r\n\r\n.model-description {\r\n  padding: 20px; /* Give some padding around the description */\r\n  flex-grow: 1; /* Ensure it fills the remaining space */\r\n  border-radius: 0 8px 8px 0; /* Rounded corners on the right side */\r\n}\r\n\r\n.model-description h3 {\r\n  margin-top: 0; /* Remove default margin from the heading */\r\n}\r\n\r\n/* Optional: Add some responsive styling */\r\n@media (max-width: 768px) {\r\n  .model-selector-container {\r\n    flex-direction: column; /* Stack list and description on smaller screens */\r\n  }\r\n\r\n  .model-list ul {\r\n    width: auto; /* List takes full width on smaller screens */\r\n    border-right: none;\r\n  }\r\n\r\n  .model-list li {\r\n    border-bottom: none; /* Remove border when in column layout */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AA2BA,SAASA,GAAgB,EAAEC,KAAkB,QAAQ,KAAK;;;;;;;;;;;;IAE1D,MAAMC,KAAK,GAAGC,OAEZ;IAEF,MAAMC,IAAI,GAAGC,MAAkC;IAE/C,MAAMC,MAAM,GAAGN,GAAG,CAAC,CACjB;MAAEO,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,WAAW,EAAE;IAAoC,CAAC,EAC9E;MAAEF,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,WAAW,EAAE;IAAoC,CAAC,EAC9E;MAAEF,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,WAAW,EAAE;IAAoC;IAC7E;IAAA,CACD,CAAC;IAEF,MAAMC,aAAa,GAAGV,GAAG,CAACE,KAAK,CAACS,UAAU,IAAIL,MAAM,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;;IAE9D;IACAX,KAAK,CACH,MAAMC,KAAK,CAACS,UAAU,EACrBE,QAAQ,IAAK;MACZH,aAAa,CAACE,KAAK,GAAGC,QAAQ;IAChC,CACF,CAAC;IAED,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;MACrCL,aAAa,CAACE,KAAK,GAAGG,KAAK;MAC3B;MACAX,IAAI,CAAC,mBAAmB,EAAEW,KAAK,CAAC;IAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}