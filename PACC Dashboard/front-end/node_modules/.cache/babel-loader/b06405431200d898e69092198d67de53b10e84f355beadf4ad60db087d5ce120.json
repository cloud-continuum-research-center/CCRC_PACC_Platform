{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref, reactive } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { Chart, registerables } from 'chart.js';\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    Chart.register(...registerables);\n    const lineChart1 = ref(null);\n    const lineChart2 = ref(null);\n    const lineCharts = reactive({\n      accuracyChart: null,\n      lossChart: null\n    });\n    const setupCharts = () => {\n      const lineChart1Ctx = lineChart1.value.getContext('2d');\n      lineCharts.accuracyChart = new Chart(lineChart1Ctx, {\n        type: 'line',\n        data: {\n          labels: Array(10).fill('').map((_, i) => `Epoch ${i + 1}`),\n          datasets: [{\n            label: 'Model Accuracy (%)',\n            data: [],\n            fill: false,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        }\n      });\n      const lineChart2Ctx = lineChart2.value.getContext('2d');\n      lineCharts.lossChart = new Chart(lineChart2Ctx, {\n        type: 'line',\n        data: {\n          labels: Array(10).fill('').map((_, i) => `Epoch ${i + 1}`),\n          datasets: [{\n            label: 'Model Loss',\n            data: [],\n            fill: false,\n            borderColor: 'rgb(255, 99, 132)',\n            tension: 0.1\n          }]\n        }\n      });\n    };\n    const updateCharts = data => {\n      lineCharts.accuracyChart.data.datasets[0].data = data.accuracy;\n      lineCharts.accuracyChart.update();\n      lineCharts.lossChart.data.datasets[0].data = data.loss;\n      lineCharts.lossChart.update();\n    };\n    const store = useStore();\n    const intervalId = ref(null);\n    function startFetching(projectId) {\n      if (intervalId.value) {\n        clearInterval(intervalId.value);\n      }\n      intervalId.value = setInterval(async () => {\n        await store.dispatch(\"fetchProjectInfoById\", projectId);\n        const projectData = store.state.projectsInfo[projectId];\n        updateCharts(projectData);\n      }, 3000);\n    }\n    onMounted(() => {\n      setupCharts();\n      if (store.state.selectedProjectId) {\n        startFetching(store.state.selectedProjectId);\n      }\n    });\n    watch(() => store.state.selectedProjectId, newId => {\n      if (newId) {\n        startFetching(newId);\n      } else {\n        if (intervalId.value) {\n          clearInterval(intervalId.value);\n        }\n      }\n    }, {\n      immediate: true\n    });\n    onUnmounted(() => {\n      if (intervalId.value) {\n        clearInterval(intervalId.value);\n      }\n    });\n    const projectInfo = computed(() => {\n      const data = store.state.projectsInfo[store.state.selectedProjectId] || {};\n      return {\n        progress: data.progress || 0,\n        epoch: data.epoch || 0,\n        accuracy: data.accuracy && data.accuracy.length > 0 ? data.accuracy[data.accuracy.length - 1] : 0,\n        loss: data.loss && data.loss.length > 0 ? data.loss[data.loss.length - 1] : 0\n      };\n    });\n    const __returned__ = {\n      lineChart1,\n      lineChart2,\n      lineCharts,\n      setupCharts,\n      updateCharts,\n      store,\n      intervalId,\n      startFetching,\n      projectInfo,\n      ProjectList,\n      onMounted,\n      watch,\n      computed,\n      onUnmounted,\n      ref,\n      reactive,\n      get useStore() {\n        return useStore;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get registerables() {\n        return registerables;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","onMounted","watch","computed","onUnmounted","ref","reactive","useStore","Chart","registerables","register","lineChart1","lineChart2","lineCharts","accuracyChart","lossChart","setupCharts","lineChart1Ctx","value","getContext","type","data","labels","Array","fill","map","_","i","datasets","label","borderColor","tension","lineChart2Ctx","updateCharts","accuracy","update","loss","store","intervalId","startFetching","projectId","clearInterval","setInterval","dispatch","projectData","state","projectsInfo","selectedProjectId","newId","immediate","projectInfo","progress","epoch","length"],"sources":["D:/Git/ITRC_Front/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["\n<template>\n  <div class=\"dashboard\">\n    <div class=\"project-list-container\">\n      <ProjectList />\n    </div>\n    <div class=\"project-info-widget\" v-if=\"projectInfo\">\n    <div class=\"tarining-status-header\">\n    <h4>학습 상태</h4>\n    </div>\n    <p> </p> \n    <p> </p> \n    <p> </p> \n    <p class=\"project-info-highlight\">모델 학습 진행율: {{ projectInfo.progress ? `${projectInfo.progress}%` : '0' }}</p>\n    <p class=\"project-info-highlight epoch\">모델 훈련 횟수: {{ projectInfo.epoch !== undefined ? projectInfo.epoch : '0' }}</p>\n    <p class=\"project-info-highlight accuracy\">모델 정확도: {{ projectInfo.accuracy ? projectInfo.accuracy.toFixed(2) + '%' : '0' }}</p>\n    <p class=\"project-info-highlight loss\">모델 Loss 값: {{ projectInfo.loss ? projectInfo.loss.toFixed(4) : '0' }}</p>\n       \n  </div>\n  </div>\n  <div class=\"project-info-widget-chart\" v-if=\"projectInfo\">\n<canvas ref=\"lineChart1\" class=\"canvas-size\"></canvas>\n<canvas ref=\"lineChart2\" class=\"canvas-size\"></canvas>\n<canvas ref=\"pieChart1\" class=\"canvas-size\"></canvas>\n<canvas ref=\"pieChart2\" class=\"canvas-size\"></canvas>\n    </div>\n</template>\n\n\n<script setup>\nimport ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, watch, computed, onUnmounted, ref, reactive } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\nconst lineChart1 = ref(null);\nconst lineChart2 = ref(null);\nconst lineCharts = reactive({\n  accuracyChart: null,\n  lossChart: null\n});\n\nconst setupCharts = () => {\n  const lineChart1Ctx = lineChart1.value.getContext('2d');\n  lineCharts.accuracyChart = new Chart(lineChart1Ctx, {\n    type: 'line',\n    data: {\n      labels: Array(10).fill('').map((_, i) => `Epoch ${i + 1}`),\n      datasets: [{\n        label: 'Model Accuracy (%)',\n        data: [],\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }]\n    }\n  });\n\n  const lineChart2Ctx = lineChart2.value.getContext('2d');\n  lineCharts.lossChart = new Chart(lineChart2Ctx, {\n    type: 'line',\n    data: {\n      labels: Array(10).fill('').map((_, i) => `Epoch ${i + 1}`),\n      datasets: [{\n        label: 'Model Loss',\n        data: [],\n        fill: false,\n        borderColor: 'rgb(255, 99, 132)',\n        tension: 0.1\n      }]\n    }\n  });\n};\n\nconst updateCharts = (data) => {\n  lineCharts.accuracyChart.data.datasets[0].data = data.accuracy;\n  lineCharts.accuracyChart.update();\n  \n  lineCharts.lossChart.data.datasets[0].data = data.loss;\n  lineCharts.lossChart.update();\n};\n\nconst store = useStore();\nconst intervalId = ref(null);\n\nfunction startFetching(projectId) {\n  if (intervalId.value) {\n    clearInterval(intervalId.value);\n  }\n  intervalId.value = setInterval(async () => {\n    await store.dispatch(\"fetchProjectInfoById\", projectId);\n    const projectData = store.state.projectsInfo[projectId];\n    updateCharts(projectData);\n  }, 3000);\n}\n\nonMounted(() => {\n  setupCharts();\n  if (store.state.selectedProjectId) {\n    startFetching(store.state.selectedProjectId);\n  }\n});\n\nwatch(() => store.state.selectedProjectId, (newId) => {\n  if (newId) {\n    startFetching(newId);\n  } else {\n    if (intervalId.value) {\n      clearInterval(intervalId.value);\n    }\n  }\n}, { immediate: true });\n\nonUnmounted(() => {\n  if (intervalId.value) {\n    clearInterval(intervalId.value);\n  }\n});\n\nconst projectInfo = computed(() => {\n  const data = store.state.projectsInfo[store.state.selectedProjectId] || {};\n  return {\n    progress: data.progress || 0,\n    epoch: data.epoch || 0,\n    accuracy: (data.accuracy && data.accuracy.length > 0) ? data.accuracy[data.accuracy.length - 1] : 0,\n    loss: (data.loss && data.loss.length > 0) ? data.loss[data.loss.length - 1] : 0\n  };\n});\n</script>\n\n\n\n<style>\n\n.project-info-widget\n{\n  margin-left: 20px;\n}\n\n.project-info-widget-chart {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n  align-items: flex-start; /* 요소들을 컨테이너의 왼쪽에 정렬 */\n  justify-content: flex-start;\n\n  justify-content: space-around; /* 공간을 균등하게 분배 */\n}\n\n.canvas-size {\n  width: 350px !important; /* 너비 조정 */\n  height: 350px !important; /* 높이 조정 */\n}\n\n.dashboard {\n  display: flex;\n  align-items: flex-start; /* 요소들을 컨테이너의 상단에 정렬 */\n  justify-content: flex-start; /* 요소들을 컨테이너의 왼쪽에서 시작하도록 정렬 */\n  gap: 20px; /* 요소들 사이의 간격 */\n  padding: 20px; /* 대시보드 패딩 */\n  \n}\n\n\n.project-list-container {\n  min-width: 800px; /* 최소 너비 설정 */\n  max-height: 500px; /* 최대 높이 설정 */\n  height: 275px; /* 높이 100%로 설정 */\n\n}\n\n.project-info-widget {\n  flex: 1; /* 유연하게 너비 조정 */\n  flex-grow: 2; /* 컨테이너가 더 많은 공간을 차지하도록 설정 */\n  padding: 20px; \n  margin-top: 0; /* 위쪽 마진 제거 */\n  border: 1px solid #ccc; /* 테두리 설정 */\n  border-radius: 12px;\n  background-color: #fff;\n  box-shadow: 0 25px 30px rgba(0, 0, 0, 0.07);\n  height: 310px;\n}\n\n\n/* 헤더 스타일 */\nh4 {\n  margin-bottom: 20px; /* 여백을 더 줍니다 */\n  font-size: 22px; /* 크기를 키웁니다 */\n  font-weight: 600; /* 조금 더 강조된 두께 */\n  color: #333; /* 색상은 약간 어두운 회색으로 조정 */\n}\n\n/* 단락 스타일 */\np {\n  font-size: 18px; /* 텍스트 크기를 키웁니다 */\n  color: #666; /* 색상은 좀 더 연한 회색으로 조정 */\n  margin-bottom: 10px; /* 단락 사이의 여백을 조정 */\n  line-height: 1.4; /* 줄 간격을 조정하여 가독성을 높입니다 */\n}\n\n\n.project-info-highlight {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: 500; /* 더 강조된 폰트 두께 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #1a237e; /* 진한 파란색으로 변경 */\n}\n\n.progress {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #4caf50; /* 진한 녹색으로 변경 */\n}\n\n.epoch {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #ff9800; /* 주황색으로 변경 */\n}\n\n.accuracy {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #009688; /* 테일 그린색으로 변경 */\n}\n\n.loss {\n  font-size: 20px; /* 크기 변경 */\n  font-weight: bold; /* 볼드체로 변경 */\n  color: #f44336; /* 빨간색으로 변경 */\n}\n\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}