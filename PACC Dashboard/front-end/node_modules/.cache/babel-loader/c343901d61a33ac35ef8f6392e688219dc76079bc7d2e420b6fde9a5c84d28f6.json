{"ast":null,"code":"import { ref, computed } from \"vue\";\nexport default {\n  __name: 'NodeSelector',\n  props: {\n    modelValue: Array\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const nodes = ref([{\n      id: 1,\n      name: \"Node 1\",\n      description: \"Description of Node 1\",\n      selected: false\n    }, {\n      id: 2,\n      name: \"Node 2\",\n      description: \"Description of Node 2\",\n      selected: false\n    }, {\n      id: 3,\n      name: \"Node 3\",\n      description: \"Description of Node 3\",\n      selected: false\n    }, {\n      id: 4,\n      name: \"Node 4\",\n      description: \"Description of Node 4\",\n      selected: false\n    }, {\n      id: 5,\n      name: \"Node 5\",\n      description: \"Description of Node 5\",\n      selected: false\n    }, {\n      id: 6,\n      name: \"Node 6\",\n      description: \"Description of Node 6\",\n      selected: false\n    }, {\n      id: 7,\n      name: \"Node 7\",\n      description: \"Description of Node 7\",\n      selected: false\n    }, {\n      id: 8,\n      name: \"Node 8\",\n      description: \"Description of Node 8\",\n      selected: false\n    }, {\n      id: 9,\n      name: \"Node 9\",\n      description: \"Description of Node 9\",\n      selected: false\n    }\n    // Add more nodes as needed\n    ]);\n    const selectedNode = ref(null);\n    const isSelected = node => props.modelValue.some(selectedNode => selectedNode.id === node.id);\n    const toggleNodeSelection = node => {\n      const index = props.modelValue.findIndex(selectedNode => selectedNode.id === node.id);\n      if (index === -1) {\n        emit(\"update:modelValue\", [...props.modelValue, node]);\n      } else {\n        const newSelection = [...props.modelValue];\n        newSelection.splice(index, 1);\n        emit(\"update:modelValue\", newSelection);\n      }\n      selectedNode.value = node;\n    };\n    const sortedSelectedNodes = computed(() => {\n      return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\n    });\n    const __returned__ = {\n      props,\n      emit,\n      nodes,\n      selectedNode,\n      isSelected,\n      toggleNodeSelection,\n      sortedSelectedNodes,\n      ref,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","props","__props","emit","__emit","nodes","id","name","description","selected","selectedNode","isSelected","node","modelValue","some","toggleNodeSelection","index","findIndex","newSelection","splice","value","sortedSelectedNodes","sort","a","b","localeCompare"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/components/NodeSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"node-selector-container\">\r\n    <!-- Header above the entire container -->\r\n    <div class=\"node-header\">\r\n      <h2>Node Selection</h2>\r\n    </div>\r\n    <!-- Main content area for node selection -->\r\n    <div class=\"node-content\">\r\n      <!-- Node list on the far left -->\r\n      <div class=\"node-list\">\r\n        <ul>\r\n          <li\r\n            v-for=\"node in nodes\"\r\n            :key=\"node.id\"\r\n            @click=\"toggleNodeSelection(node)\"\r\n            :class=\"{ selected: isSelected(node) }\"\r\n          >\r\n            {{ node.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- Description of the selected node in the middle -->\r\n      <div class=\"node-description\" v-if=\"selectedNode\">\r\n        <h3>{{ selectedNode.name }} Description</h3>\r\n        <p>{{ selectedNode.description }}</p>\r\n      </div>\r\n      <div class=\"node-description\" v-else>\r\n        <p>Select a node to see its description.</p>\r\n      </div>\r\n\r\n      <!-- List of selected nodes on the far right -->\r\n      <div class=\"selected-nodes\">\r\n        <h3>Selected Nodes</h3>\r\n        <ul>\r\n          <li v-for=\"node in sortedSelectedNodes\" :key=\"node.id\">\r\n            {{ node.name }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, defineEmits, computed } from \"vue\";\r\n\r\nconst props = defineProps({\r\n  modelValue: Array,\r\n});\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nconst nodes = ref([\r\n  {\r\n    id: 1,\r\n    name: \"Node 1\",\r\n    description: \"Description of Node 1\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Node 2\",\r\n    description: \"Description of Node 2\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Node 3\",\r\n    description: \"Description of Node 3\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Node 4\",\r\n    description: \"Description of Node 4\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Node 5\",\r\n    description: \"Description of Node 5\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Node 6\",\r\n    description: \"Description of Node 6\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Node 7\",\r\n    description: \"Description of Node 7\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Node 8\",\r\n    description: \"Description of Node 8\",\r\n    selected: false,\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Node 9\",\r\n    description: \"Description of Node 9\",\r\n    selected: false,\r\n  },\r\n  // Add more nodes as needed\r\n]);\r\n\r\nconst selectedNode = ref(null);\r\nconst isSelected = (node) =>\r\n  props.modelValue.some((selectedNode) => selectedNode.id === node.id);\r\n\r\nconst toggleNodeSelection = (node) => {\r\n  const index = props.modelValue.findIndex(\r\n    (selectedNode) => selectedNode.id === node.id,\r\n  );\r\n  if (index === -1) {\r\n    emit(\"update:modelValue\", [...props.modelValue, node]);\r\n  } else {\r\n    const newSelection = [...props.modelValue];\r\n    newSelection.splice(index, 1);\r\n    emit(\"update:modelValue\", newSelection);\r\n  }\r\n  selectedNode.value = node;\r\n};\r\n\r\nconst sortedSelectedNodes = computed(() => {\r\n  return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.node-selector-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid #ddd;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n}\r\n\r\n.node-header {\r\n  padding: 10px 20px;\r\n  background-color: #f5f5f5;\r\n  text-align: left;\r\n  font-size: 1.25rem;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.node-content {\r\n  display: flex;\r\n}\r\n\r\n.node-list,\r\n.node-description,\r\n.selected-nodes {\r\n  padding: 20px;\r\n  flex-basis: 33.3333%;\r\n  flex-grow: 1;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.node-list ul,\r\n.selected-nodes ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.node-list li,\r\n.selected-nodes li {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.node-list li:hover,\r\n.node-list li.selected,\r\n.selected-nodes li:hover {\r\n  background-color: #b1f397;\r\n}\r\n\r\n/* Remove border from the last element of the main content */\r\n.selected-nodes {\r\n  border-right: none;\r\n}\r\n\r\n/* Optional: Add some responsive styling */\r\n@media (max-width: 768px) {\r\n  .node-content {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .node-list,\r\n  .node-description,\r\n  .selected-nodes {\r\n    border-right: none;\r\n    border-bottom: 1px solid #ddd;\r\n    flex-basis: auto;\r\n  }\r\n\r\n  .selected-nodes {\r\n    border-bottom: none;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AA6CA,SAASA,GAA6B,EAAEC,QAAQ,QAAQ,KAAK;;;;;;;;;;;;IAE7D,MAAMC,KAAK,GAAGC,OAEZ;IACF,MAAMC,IAAI,GAAGC,MAAkC;IAE/C,MAAMC,KAAK,GAAGN,GAAG,CAAC,CAChB;MACEO,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE;IACZ;IACA;IAAA,CACD,CAAC;IAEF,MAAMC,YAAY,GAAGX,GAAG,CAAC,IAAI,CAAC;IAC9B,MAAMY,UAAU,GAAIC,IAAI,IACtBX,KAAK,CAACY,UAAU,CAACC,IAAI,CAAEJ,YAAY,IAAKA,YAAY,CAACJ,EAAE,KAAKM,IAAI,CAACN,EAAE,CAAC;IAEtE,MAAMS,mBAAmB,GAAIH,IAAI,IAAK;MACpC,MAAMI,KAAK,GAAGf,KAAK,CAACY,UAAU,CAACI,SAAS,CACrCP,YAAY,IAAKA,YAAY,CAACJ,EAAE,KAAKM,IAAI,CAACN,EAC7C,CAAC;MACD,IAAIU,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBb,IAAI,CAAC,mBAAmB,EAAE,CAAC,GAAGF,KAAK,CAACY,UAAU,EAAED,IAAI,CAAC,CAAC;MACxD,CAAC,MAAM;QACL,MAAMM,YAAY,GAAG,CAAC,GAAGjB,KAAK,CAACY,UAAU,CAAC;QAC1CK,YAAY,CAACC,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;QAC7Bb,IAAI,CAAC,mBAAmB,EAAEe,YAAY,CAAC;MACzC;MACAR,YAAY,CAACU,KAAK,GAAGR,IAAI;IAC3B,CAAC;IAED,MAAMS,mBAAmB,GAAGrB,QAAQ,CAAC,MAAM;MACzC,OAAO,CAAC,GAAGC,KAAK,CAACY,UAAU,CAAC,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAChB,IAAI,CAACkB,aAAa,CAACD,CAAC,CAACjB,IAAI,CAAC,CAAC;IAC3E,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}