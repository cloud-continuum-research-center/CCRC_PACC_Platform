{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-d3a34df2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"project-widget\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"project-widget-header\"\n}, \"학습 모델 리스트\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"project-widget-body\"\n};\nconst _hoisted_4 = {\n  class: \"project-list-container\"\n};\nconst _hoisted_5 = {\n  class: \"project-list\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"project-description-container\"\n};\nconst _hoisted_8 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"ul\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.projects, (project, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      onClick: $event => $setup.selectProject(project),\n      class: _normalizeClass({\n        'is-selected': project.id === $setup.selectedProject.id\n      })\n    }, _toDisplayString(project.model_name) + \" - \" + _toDisplayString(project.dataset_name), 11 /* TEXT, CLASS, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"h4\", null, _toDisplayString($setup.selectedProject.model_name || \"No project selected\"), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.selectedProject.dataset_name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString($setup.selectedProject.status), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Created At: \" + _toDisplayString($setup.selectedProject.created_at), 1 /* TEXT */), $setup.selectedProject.project_nodes ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \" Nodes: \" + _toDisplayString($setup.parseNodes($setup.selectedProject.project_nodes)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $setup.selectedProject.status === '학습 중' ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = $event => $setup.stopTraining($setup.selectedProject.id)),\n    class: \"stop-training-button\"\n  }, \" 학습 중단 \")) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_Fragment","_renderList","$setup","projects","project","index","onClick","$event","selectProject","_normalizeClass","id","selectedProject","model_name","_toDisplayString","dataset_name","_hoisted_6","_hoisted_7","status","created_at","project_nodes","_hoisted_8","parseNodes","_createCommentVNode","_cache","stopTraining"],"sources":["D:\\Git\\ITRC_Front\\vue-flask-dashboard\\front-end\\src\\views\\components\\ProjectsList.vue"],"sourcesContent":["<template>\n  <div class=\"project-widget\">\n    <h4 class=\"project-widget-header\">학습 모델 리스트</h4>\n    <div class=\"project-widget-body\">\n      <div class=\"project-list-container\">\n        <ul class=\"project-list\">\n          <li\n            v-for=\"(project, index) in projects\"\n            :key=\"index\"\n            @click=\"selectProject(project)\"\n            :class=\"{ 'is-selected': project.id === selectedProject.id }\"\n          >\n            {{ project.model_name }} - {{ project.dataset_name }}\n          </li>\n        </ul>\n      </div>\n      <div class=\"project-description-container\">\n        <h4>{{ selectedProject.model_name || \"No project selected\" }}</h4>\n        <p>{{ selectedProject.dataset_name }}</p>\n        <p>Status: {{ selectedProject.status }}</p>\n        <p>Created At: {{ selectedProject.created_at }}</p>\n        <p v-if=\"selectedProject.project_nodes\">\n          Nodes: {{ parseNodes(selectedProject.project_nodes) }}\n        </p>\n      </div>\n      <button\n        v-if=\"selectedProject.status === '학습 중'\"\n        @click=\"stopTraining(selectedProject.id)\"\n        class=\"stop-training-button\"\n      >\n        학습 중단\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed, ref, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport axios from \"axios\";\n\nconst store = useStore();\n// Log the initial state of projects from the store\nconsole.log(\n  \"Initial projects from the store:\",\n  store.getters.userProjects,\n);\n\nconst projects = computed(() => {\n  const projectsFromStore = store.getters.userProjects;\n  console.log(\n    \"프로젝트 정보 가져옴:\",\n    projectsFromStore,\n  ); // Log computed projects\n  return projectsFromStore;\n});\n\nconst selectedProject = ref({});\n\nwatch(\n  () => store.getters.userProjects,\n  (newProjects) => {\n    console.log(\n      \" Watch triggered for projects update:\",\n      newProjects,\n    ); // Log on update\n    // Update logic as is\n  },\n  { deep: true },\n);\n\nwatch(selectedProject, (newProject) => {\n  console.log(\"선택된 프로젝트 갱신:\", newProject);\n});\n\nconst selectProject = (project) => {\n  console.log(\"Project selected:\", project); // Log when a project is selected\n  selectedProject.value = project;\n  if (project.status !== \"중단됨\") {\n    \n    store.commit('setSelectedProjectId', project.id)\n    // Only update if the project is not \"stopped\"\n    const nodeNames = JSON.parse(project.project_nodes);\n    store.dispatch(\"updateSelectedProjectNodeNames\", nodeNames);\n  }\n};\n\nconst parseNodes = (nodesJson) => {\n  try {\n    return JSON.parse(nodesJson).join(\", \"); // Assuming the nodes are stored in a simple array\n  } catch (e) {\n    return \"Error parsing nodes\";\n  }\n};\n\nconst stopTraining = async () => {\n  if (!selectedProject.value || !selectedProject.value.id) {\n    console.error(\n      \"No project selected or selected project does not have an id\",\n    );\n    return;\n  }\n  try {\n    const response = await axios.post(\n      \"http://163.180.117.23:5000/api/stop-training\",\n      { projectId: selectedProject.value.id },\n      { headers: { Authorization: `Bearer ${store.state.authToken}` } },\n    );\n    if (response.data.success) {\n      console.log(\"학습 중단 요청 성공\", selectedProject.value.id);\n      alert(\"학습 중단 요청이 성공했습니다.\"); // Alert for success\n      // Refetch projects to update the list\n      await store.dispatch(\"fetchProjects\");\n      // Update selectedProject to reflect the changes if it's still selected\n      const updatedProject = store.getters.userProjects.find(\n        (p) => p.id === selectedProject.value.id,\n      );\n      if (updatedProject) {\n        selectedProject.value = updatedProject;\n      }\n    } else {\n      // Handle case where response.data.success is false\n      throw new Error(\"학습 중단 요청이 실패했습니다.\");\n    }\n  } catch (error) {\n    console.error(\"학습 중단 요청 실패\", selectedProject.value.id, error);\n    // Display an error message to the user\n    alert(\"학습 중지 요청에 실패하였습니다.\"); // Use a more user-friendly error handling instead of alert\n  }\n};\n</script>\n\n<style scoped>\n.project-widget {\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: #fff;\n  margin: 0 auto; /* Center the widget */\n  margin-bottom: 20px; /* Add bottom margin */\n  max-width: 100%; /* Optionally add a max-width if you want to limit the size on larger screens */\n}\n\n.project-widget-header {\n  background-color: #f9f9f9;\n  padding: 12px 16px;\n  margin: 0;\n  border-bottom: 1px solid #ddd;\n}\n\n.project-widget-body {\n  display: flex;\n}\n\n.project-list-container {\n  max-height: 400px; /* Set this to whatever height you want */\n  overflow-y: auto; /* This will allow scrolling */\n  max-width: 100%; /* Set the max width as needed */\n  width: 200px; /* Set the width as needed */\n  border-right: 1px solid #ddd;\n  flex: 1;\n}\n.project-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.project-list li {\n  padding: 8px 16px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.project-list li:hover,\n.project-list li.is-selected {\n  background-color: #e8f0f9;\n}\n\n.project-description-container {\n  flex: 2;\n  padding: 11px;\n}\n\n.project-actions-container {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 16px;\n}\n\n\n.stop-training-button {\n  height: 80px; /* Adjust the height as needed */\n  width: 150px; /* Adjust the width as needed */\n  border-radius: 5px; /* Adjust the pixel value to control the roundness */\n  background-color: #90ee90; /* This is a light green color */\n  border: none; /* Removes the default border */\n  padding: 10px 20px; /* Adds some padding inside the button */\n  color: rgb(0, 0, 0); /* Changes the text color to white */\n  font-size: 22px; /* Adjust the font size as needed */\n  cursor: pointer; /* Changes the cursor to a pointer when hovering over the button */\n  transition: background-color 0.3s; /* Smooth transition for background color */\n}\n\n.stop-training-button:hover {\n  background-color: #76c893; /* Slightly darker green color for the hover state */\n}\n\n\n\nbutton {\n  border-radius: 5px; /* Adjust the pixel value to control the roundness */\n  background-color: #90ee90; /* This is a light green color */\n  border: none; /* Removes the default border */\n  padding: 10px 20px; /* Adds some padding inside the button */\n  color: rgb(0, 0, 0); /* Changes the text color to white */\n  font-size: 16px; /* Adjust the font size as needed */\n  cursor: pointer; /* Changes the cursor to a pointer when hovering over the button */\n  transition: background-color 0.3s; /* Smooth transition for background color */\n}\n\nbutton:hover {\n  background-color: #76c893; /* Slightly darker green color for the hover state */\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;gEACzBC,mBAAA,CAAgD;EAA5CD,KAAK,EAAC;AAAuB,GAAC,WAAS;;EACtCA,KAAK,EAAC;AAAqB;;EACzBA,KAAK,EAAC;AAAwB;;EAC7BA,KAAK,EAAC;AAAc;mBALhC;;EAgBWA,KAAK,EAAC;AAA+B;;EAhBhDE,GAAA;AAAA;;uBACEC,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BJC,UAAgD,EAChDJ,mBAAA,CA6BM,OA7BNK,UA6BM,GA5BJL,mBAAA,CAWM,OAXNM,UAWM,GAVJN,mBAAA,CASK,MATLO,UASK,I,kBARHL,mBAAA,CAOKM,SAAA,QAbfC,WAAA,CAOuCC,MAAA,CAAAC,QAAQ,EAP/C,CAOoBC,OAAO,EAAEC,KAAK;yBADxBX,mBAAA,CAOK;MALFD,GAAG,EAAEY,KAAK;MACVC,OAAK,EAAAC,MAAA,IAAEL,MAAA,CAAAM,aAAa,CAACJ,OAAO;MAC5Bb,KAAK,EAVlBkB,eAAA;QAAA,eAUqCL,OAAO,CAACM,EAAE,KAAKR,MAAA,CAAAS,eAAe,CAACD;MAAE;wBAEvDN,OAAO,CAACQ,UAAU,IAAG,KAAG,GAAAC,gBAAA,CAAGT,OAAO,CAACU,YAAY,gCAZ9DC,UAAA;sCAgBMvB,mBAAA,CAQM,OARNwB,UAQM,GAPJxB,mBAAA,CAAkE,YAAAqB,gBAAA,CAA3DX,MAAA,CAAAS,eAAe,CAACC,UAAU,2CACjCpB,mBAAA,CAAyC,WAAAqB,gBAAA,CAAnCX,MAAA,CAAAS,eAAe,CAACG,YAAY,kBAClCtB,mBAAA,CAA2C,WAAxC,UAAQ,GAAAqB,gBAAA,CAAGX,MAAA,CAAAS,eAAe,CAACM,MAAM,kBACpCzB,mBAAA,CAAmD,WAAhD,cAAY,GAAAqB,gBAAA,CAAGX,MAAA,CAAAS,eAAe,CAACO,UAAU,kBACnChB,MAAA,CAAAS,eAAe,CAACQ,aAAa,I,cAAtCzB,mBAAA,CAEI,KAvBZ0B,UAAA,EAqBgD,UAC/B,GAAAP,gBAAA,CAAGX,MAAA,CAAAmB,UAAU,CAACnB,MAAA,CAAAS,eAAe,CAACQ,aAAa,qBAtB5DG,mBAAA,e,GA0BcpB,MAAA,CAAAS,eAAe,CAACM,MAAM,e,cAD9BvB,mBAAA,CAMS;IA/BfD,GAAA;IA2BSa,OAAK,EAAAiB,MAAA,QAAAA,MAAA,MAAAhB,MAAA,IAAEL,MAAA,CAAAsB,YAAY,CAACtB,MAAA,CAAAS,eAAe,CAACD,EAAE;IACvCnB,KAAK,EAAC;KACP,SAED,KA/BN+B,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}