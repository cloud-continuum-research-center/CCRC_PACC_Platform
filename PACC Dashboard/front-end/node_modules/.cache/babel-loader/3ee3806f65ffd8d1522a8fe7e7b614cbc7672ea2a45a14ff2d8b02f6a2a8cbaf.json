{"ast":null,"code":"import { computed, ref, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport axios from \"axios\";\nexport default {\n  __name: 'ProjectsList',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    // Log the initial state of projects from the store\n    console.log(\"Initial projects from the store:\", store.getters.userProjects);\n    const projects = computed(() => {\n      const projectsFromStore = store.getters.userProjects;\n      console.log(\"프로젝트 정보 가져옴:\", projectsFromStore); // Log computed projects\n      return projectsFromStore;\n    });\n    const selectedProject = ref({});\n    watch(() => store.getters.userProjects, newProjects => {\n      console.log(\" Watch triggered for projects update:\", newProjects); // Log on update\n      // Update logic as is\n    }, {\n      deep: true\n    });\n    watch(selectedProject, newProject => {\n      console.log(\"선택된 프로젝트 갱신:\", newProject);\n    });\n    const selectProject = project => {\n      console.log(\"Project selected:\", project); // Log when a project is selected\n      selectedProject.value = project;\n      if (project.status !== \"중단됨\") {\n        store.commit('setSelectedProjectId', project.id);\n        // Only update if the project is not \"stopped\"\n        const nodeNames = JSON.parse(project.project_nodes);\n        store.dispatch(\"updateSelectedProjectNodeNames\", nodeNames);\n      }\n    };\n    const parseNodes = nodesJson => {\n      try {\n        return JSON.parse(nodesJson).join(\", \"); // Assuming the nodes are stored in a simple array\n      } catch (e) {\n        return \"Error parsing nodes\";\n      }\n    };\n    const stopTraining = async () => {\n      if (!selectedProject.value || !selectedProject.value.id) {\n        console.error(\"No project selected or selected project does not have an id\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"http://163.180.117.23:5000/api/stop-training\", {\n          projectId: selectedProject.value.id\n        }, {\n          headers: {\n            Authorization: `Bearer ${store.state.authToken}`\n          }\n        });\n        if (response.data.success) {\n          console.log(\"학습 중단 요청 성공\", selectedProject.value.id);\n          alert(\"학습 중단 요청이 성공했습니다.\"); // Alert for success\n          // Refetch projects to update the list\n          await store.dispatch(\"fetchProjects\");\n          // Update selectedProject to reflect the changes if it's still selected\n          const updatedProject = store.getters.userProjects.find(p => p.id === selectedProject.value.id);\n          if (updatedProject) {\n            selectedProject.value = updatedProject;\n          }\n        } else {\n          // Handle case where response.data.success is false\n          throw new Error(\"학습 중단 요청이 실패했습니다.\");\n        }\n      } catch (error) {\n        console.error(\"학습 중단 요청 실패\", selectedProject.value.id, error);\n        // Display an error message to the user\n        alert(\"학습 중지 요청에 실패하였습니다.\"); // Use a more user-friendly error handling instead of alert\n      }\n    };\n    const __returned__ = {\n      store,\n      projects,\n      selectedProject,\n      selectProject,\n      parseNodes,\n      stopTraining,\n      computed,\n      ref,\n      watch,\n      get useStore() {\n        return useStore;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","ref","watch","useStore","axios","store","console","log","getters","userProjects","projects","projectsFromStore","selectedProject","newProjects","deep","newProject","selectProject","project","value","status","commit","id","nodeNames","JSON","parse","project_nodes","dispatch","parseNodes","nodesJson","join","e","stopTraining","error","response","post","projectId","headers","Authorization","state","authToken","data","success","alert","updatedProject","find","p","Error"],"sources":["D:/Git/ITRC_Front/vue-flask-dashboard/front-end/src/views/components/ProjectsList.vue"],"sourcesContent":["<template>\n  <div class=\"project-widget\">\n    <h4 class=\"project-widget-header\">학습 모델 리스트</h4>\n    <div class=\"project-widget-body\">\n      <div class=\"project-list-container\">\n        <ul class=\"project-list\">\n          <li\n            v-for=\"(project, index) in projects\"\n            :key=\"index\"\n            @click=\"selectProject(project)\"\n            :class=\"{ 'is-selected': project.id === selectedProject.id }\"\n          >\n            {{ project.model_name }}\n          </li>\n        </ul>\n      </div>\n      <div class=\"project-description-container\">\n        <h4>{{ selectedProject.model_name || \"학습 모델 선택\" }}</h4>\n        <div v-if=\"selectedProject.project_nodes\">\n          \n        <p class=\"project-detail dataset-name\">학습 데이터 셋: {{ selectedProject.dataset_name }}</p>\n        <p class=\"project-detail project-status\">현재 상태: {{ selectedProject.status }}</p>\n        <p class=\"project-detail start-time\">시작 일시: {{ selectedProject.created_at }}</p>\n        <p class=\"project-detail nodes-list\">학습 노드: {{ parseNodes(selectedProject.project_nodes) }}</p>\n\n        </div>\n      </div>\n      <button\n        v-if=\"selectedProject.status === '학습 중'\"\n        @click=\"stopTraining(selectedProject.id)\"\n        class=\"stop-training-button\"\n      >\n        학습 중단\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed, ref, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport axios from \"axios\";\n\nconst store = useStore();\n// Log the initial state of projects from the store\nconsole.log(\n  \"Initial projects from the store:\",\n  store.getters.userProjects,\n);\n\nconst projects = computed(() => {\n  const projectsFromStore = store.getters.userProjects;\n  console.log(\n    \"프로젝트 정보 가져옴:\",\n    projectsFromStore,\n  ); // Log computed projects\n  return projectsFromStore;\n});\n\nconst selectedProject = ref({});\n\nwatch(\n  () => store.getters.userProjects,\n  (newProjects) => {\n    console.log(\n      \" Watch triggered for projects update:\",\n      newProjects,\n    ); // Log on update\n    // Update logic as is\n  },\n  { deep: true },\n);\n\nwatch(selectedProject, (newProject) => {\n  console.log(\"선택된 프로젝트 갱신:\", newProject);\n});\n\nconst selectProject = (project) => {\n  console.log(\"Project selected:\", project); // Log when a project is selected\n  selectedProject.value = project;\n  if (project.status !== \"중단됨\") {\n    \n    store.commit('setSelectedProjectId', project.id)\n    // Only update if the project is not \"stopped\"\n    const nodeNames = JSON.parse(project.project_nodes);\n    store.dispatch(\"updateSelectedProjectNodeNames\", nodeNames);\n  }\n};\n\nconst parseNodes = (nodesJson) => {\n  try {\n    return JSON.parse(nodesJson).join(\", \"); // Assuming the nodes are stored in a simple array\n  } catch (e) {\n    return \"Error parsing nodes\";\n  }\n};\n\nconst stopTraining = async () => {\n  if (!selectedProject.value || !selectedProject.value.id) {\n    console.error(\n      \"No project selected or selected project does not have an id\",\n    );\n    return;\n  }\n  try {\n    const response = await axios.post(\n      \"http://163.180.117.23:5000/api/stop-training\",\n      { projectId: selectedProject.value.id },\n      { headers: { Authorization: `Bearer ${store.state.authToken}` } },\n    );\n    if (response.data.success) {\n      console.log(\"학습 중단 요청 성공\", selectedProject.value.id);\n      alert(\"학습 중단 요청이 성공했습니다.\"); // Alert for success\n      // Refetch projects to update the list\n      await store.dispatch(\"fetchProjects\");\n      // Update selectedProject to reflect the changes if it's still selected\n      const updatedProject = store.getters.userProjects.find(\n        (p) => p.id === selectedProject.value.id,\n      );\n      if (updatedProject) {\n        selectedProject.value = updatedProject;\n      }\n    } else {\n      // Handle case where response.data.success is false\n      throw new Error(\"학습 중단 요청이 실패했습니다.\");\n    }\n  } catch (error) {\n    console.error(\"학습 중단 요청 실패\", selectedProject.value.id, error);\n    // Display an error message to the user\n    alert(\"학습 중지 요청에 실패하였습니다.\"); // Use a more user-friendly error handling instead of alert\n  }\n};\n</script>\n\n<style scoped>\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n  color: #333;\n}\n\n.project-detail {\n  font-size: 16px; /* 크기 증가 */\n  color: #000000; /* 더 진한 회색으로 변경 */\n  margin-bottom: 8px; /* 여백 조절 */\n  font-weight: bold;\n}\n\n.dataset-name {\n  font-weight: bold; /* 더 강조된 폰트 두께 */\n}\n\n.project-status {\n  color: #000000; /* 상태에 따라 다른 색상을 적용할 수 있습니다. 예: 진행 중일 때는 녹색 */\n  font-weight: bold;\n}\n\n.start-time {\n  color: #000000; /* 시작 시간을 빨간색으로 표시 */\n  font-weight: bold;\n}\n\n.nodes-list {\n  color: #000000; /* 노드 목록을 파란색으로 표시 */\n  font-weight: bold;\n}\n\n\n\n.project-widget {\n  border: 1px solid #e0e0e0; /* 더 섬세한 경계선 */\n  border-radius: 12px; /* 더 둥근 모서리 */\n  overflow: hidden;\n  background-color: #fff;\n  box-shadow: 0 10px 25px rgba(0,0,0,0.1); /* 부드러운 그림자 추가 */\n  margin: 0 auto; /* Center the widget */\n  margin-bottom: 20px; /* Add bottom margin */\n  max-width: 100%; /* Optionally add a max-width if you want to limit the size on larger screens */\n}\n\n.project-widget-header {\n  background-color: #f5f5f5; /* 더 부드러운 배경색 */\n  border-bottom: 1px solid #e0e0e0; /* 조화로운 경계선 */\n  padding: 12px 16px;\n  margin: 0;\n  index: -1;\n}\n\n.project-widget-body {\n  display: flex;\n}\n\n.project-list-container {\n  \n  max-height: 400px; /* Set this to whatever height you want */\n  overflow-y: auto; /* This will allow scrolling */\n  max-width: 100%; /* Set the max width as needed */\n  border-right: 1px solid #ddd;\n  flex: 1;\n  \n}\n.project-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  font-size: 21px; /* 적절한 폰트 사이즈 */\n}\n\n.project-description-container {\n  width: 300px; /* Set the width as needed */\n  padding: 11px;\n  font-size: 16px; /* 적절한 폰트 사이즈 */\n}\n\n.project-actions-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 16px;\n}\n\n.stop-training-button {\n  height: 50px; /* 버튼 크기 조절 */\n  width: 150px;\n  border-radius: 25px; /* 매우 둥근 버튼 */\n  background-color:  #778899; /* 경고 색상 */\n  color: #fff;\n  font-size: 18px; /* 큰 폰트 사이즈 */\n  cursor: pointer;\n  transition: background-color 0.3s;\n  /*margin-top: 85px; /* Moves the button 50px down from the top */\n  margin-top: 170px; /* Adds some space at the bottom */\n  margin-right: 10px; /* Adds some space at the right */\n}\n\n.stop-training-button:hover {\n  background-color: #ef5350; /* Slightly darker green color for the hover state */\n}\nbutton:hover {\n  transform: scale(1.05); /* 약간 확대 */\n}\n.project-list li {\n  padding: 8px 16px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.project-list li:hover {\n  background-color: #f0f0f0; /* 마우스 오버 시 배경색 변경 */\n}\n\n.project-list li.is-selected {\n  background-color: #e8f0f9; /* 선택된 항목의 배경색 변경 */\n  font-weight: bold; /* 선택된 항목의 텍스트를 굵게 표시 */\n}\n\n\nbutton {\n  border-radius: 5px; /* Adjust the pixel value to control the roundness */\n  background-color: #90ee90; /* This is a light green color */\n  border: none; /* Removes the default border */\n  padding: 10px 20px; /* Adds some padding inside the button */\n  color: rgb(0, 0, 0); /* Changes the text color to white */\n  font-size: 16px; /* Adjust the font size as needed */\n  cursor: pointer; /* Changes the cursor to a pointer when hovering over the button */\n  transition: background-color 0.3s; /* Smooth transition for background color */\n}\n\nbutton:hover {\n  background-color: #76c893; /* Slightly darker green color for the hover state */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}