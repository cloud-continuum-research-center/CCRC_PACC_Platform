{"ast":null,"code":"import { ref, onMounted, computed } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'ModelSelector',\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const emit = __emit;\n    const store = useStore();\n    const models = computed(() => store.state.models);\n    const selectedModel = ref({});\n    onMounted(async () => {\n      await store.dispatch(\"fetchModels\");\n      if (models.value.length > 0) {\n        selectedModel.value = models.value[0]; // Set the first model as selected\n        emit(\"update:modelValue\", models.value[0].model_id); // Emit its model_id\n      }\n    });\n    function updateSelectedModel(model) {\n      if (model) {\n        selectedModel.value = model;\n        emit(\"update:modelValue\", model.model_id); // Emit the model_id\n      }\n    }\n    const __returned__ = {\n      emit,\n      store,\n      models,\n      selectedModel,\n      updateSelectedModel,\n      ref,\n      onMounted,\n      computed,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useStore","emit","__emit","store","models","state","selectedModel","dispatch","value","length","model_id","updateSelectedModel","model"],"sources":["D:/Git/ITRC_Front/vue-flask-dashboard/front-end/src/views/components/ModelSelector.vue"],"sourcesContent":["<template>\n  <div class=\"model-selector-container\">\n    <!-- Header title for the model selection -->\n    <h2 class=\"model-header\">학습 모델 선택</h2>\n    <!-- Model list and description container -->\n    <div class=\"model-content\">\n      <div class=\"model-list\">\n        <ul>\n          <li\n            v-for=\"model in models\"\n            :key=\"model.model_id\"\n            @click=\"updateSelectedModel(model)\"\n            :class=\"{ selected: model.model_id === selectedModel.model_id }\"\n          >\n            {{ model.name }}\n          </li>\n        </ul>\n      </div>\n      <div class=\"model-description\">\n        <h3>{{ selectedModel?.name || \"No model selected\" }}</h3>\n        <p>{{ selectedModel?.description || \"\" }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed, defineEmits } from \"vue\";\nimport { useStore } from \"vuex\";\n\nconst emit = defineEmits([\"update:modelValue\"]);\n\nconst store = useStore();\nconst models = computed(() => store.state.models);\nconst selectedModel = ref({});\n\nonMounted(async () => {\n  await store.dispatch(\"fetchModels\");\n  if (models.value.length > 0) {\n    selectedModel.value = models.value[0]; // Set the first model as selected\n    emit(\"update:modelValue\", models.value[0].model_id); // Emit its model_id\n  }\n});\n\nfunction updateSelectedModel(model) {\n  if (model) {\n    selectedModel.value = model;\n    emit(\"update:modelValue\", model.model_id); // Emit the model_id\n  }\n}\n</script>\n\n<style scoped>\n.model-selector-container {\n  border: 1px solid #e0e0e0; /* 경계선 설정 */\n  background-color: #fff; /* 배경색 흰색 */\n  border-radius: 12px; /* 모서리를 둥글게 */\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* 그림자 효과 추가 */\n  display: flex; /* flexbox 레이아웃 사용 */\n  flex-direction: column; /* 자식 요소를 세로로 정렬 */\n  overflow: hidden; /* 내용이 넘칠 경우 숨김 */\n}\n.model-list ul li\n{\n   font-size: 20px; /* 글꼴 크기 */\n\n}\n\n.model-header {\n  text-align: left; /* 텍스트 왼쪽 정렬 */\n  padding: 15px 20px; /* 패딩 설정 */\n  background: #f8f8f8; /* 배경색 연한 회색 */\n  font-size: 32px; /* 글꼴 크기 */\n  font-weight: 600; /* 글꼴 두께 */\n  color: #333; /* 글꼴 색상 */\n  border-bottom: 1px solid #ddd; /* 하단에 경계선 추가 */\n  margin-bottom: 0px;   /* 마진 0으로 안하면 리스트와 헤더 사이에 붕 뜸*/\n}\n\n.model-content {\n  display: flex; /* flexbox 레이아웃 사용 */\n}\n\n.model-list ul {\n  list-style-type: none; /* 리스트 스타일 없앰 */\n  padding: 0; /* 패딩 없앰 */\n  margin: 0; /* 마진 없앰 */\n  width: 250px; /* 너비 설정 */\n  border-right: 1px solid #ddd; /* 오른쪽에 경계선 추가 */\n}\n\n.model-list li {\n  padding: 15px 20px; /* 패딩 설정 */\n  cursor: pointer; /* 마우스 오버 시 포인터 모양 변경 */\n  transition: background-color 0.3s; /* 배경색 변경 시 애니메이션 효과 */\n  font-size: 16px; /* 글꼴 크기 */\n  color: #333; /* 글꼴 색상 */\n  border-bottom: 1px solid #eee; /* 아래쪽에 경계선 추가 */\n  font-weight: bold;\n}\n\n.model-list li:hover,\n.model-list li.selected {\n  background-color: #e3f2fd; /* 배경색 변경 */\n}\n\n.model-description {\n  padding: 20px; /* 패딩 설정 */\n  flex-grow: 1; /* 남은 공간을 채움 */\n  background-color: #fafafa; /* 배경색 연한 회색 */\n  border-radius: 0 12px 12px 0; /* 오른쪽 모서리를 둥글게 */\n}\n\n.model-description p {\n  font-size: 22px; /* 글꼴 크기 */\n  color: #666; /* 글꼴 색상 */\n  margin-bottom: 10px; /* 아래쪽 마진 추가 */\n  line-height: 1.4; /* 줄 간격 설정 */\n}\n\n.model-description h3 {\n  margin-top: 0; /* 위쪽 마진 제거 */\n  font-size: 25px; /* 글꼴 크기 */\n  color: #333; /* 글꼴 색상 */\n}\n\n@media (max-width: 768px) {\n  .model-selector-container {\n    flex-direction: column; /* 화면이 작을 때 세로로 배치 */\n  }\n\n  .model-list ul {\n    width: auto; /* 너비를 자동으로 조정 */\n    border-right: none; /* 경계선 제거 */\n  }\n\n  .model-list li {\n    border-bottom: none; /* 경계선 제거 */\n  }\n}\n\n\n</style>\n"],"mappings":"AA2BA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAqB,QAAQ,KAAK;AAC3D,SAASC,QAAQ,QAAQ,MAAM;;;;;;;;;IAE/B,MAAMC,IAAI,GAAGC,MAAkC;IAE/C,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC;IACxB,MAAMI,MAAM,GAAGL,QAAQ,CAAC,MAAMI,KAAK,CAACE,KAAK,CAACD,MAAM,CAAC;IACjD,MAAME,aAAa,GAAGT,GAAG,CAAC,CAAC,CAAC,CAAC;IAE7BC,SAAS,CAAC,YAAY;MACpB,MAAMK,KAAK,CAACI,QAAQ,CAAC,aAAa,CAAC;MACnC,IAAIH,MAAM,CAACI,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QAC3BH,aAAa,CAACE,KAAK,GAAGJ,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACvCP,IAAI,CAAC,mBAAmB,EAAEG,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAC;MACvD;IACF,CAAC,CAAC;IAEF,SAASC,mBAAmBA,CAACC,KAAK,EAAE;MAClC,IAAIA,KAAK,EAAE;QACTN,aAAa,CAACE,KAAK,GAAGI,KAAK;QAC3BX,IAAI,CAAC,mBAAmB,EAAEW,KAAK,CAACF,QAAQ,CAAC,CAAC,CAAC;MAC7C;IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}