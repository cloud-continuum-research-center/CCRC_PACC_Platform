{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"project-list-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"memory-usage-header\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"메모리 사용량\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode($setup[\"ProjectList\"])]), _createCommentVNode(\" Render this div only if there are selected nodes \"), $setup.filteredNodes.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_hoisted_4, _createTextVNode(\" class=\\\"memory-gauge-container\\\" v-for=\\\"node in filteredNodes\\\" :key=\\\"node.id\\\" > \"), _createVNode($setup[\"MemoryGauge\"], {\n    nodeName: _ctx.node.name,\n    \"total-size\": _ctx.node.total_memory_mb,\n    \"remaining-size\": $setup.nodeFreeMemories[_ctx.node.name]\n  }, null, 8 /* PROPS */, [\"nodeName\", \"total-size\", \"remaining-size\"])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","$setup","_createCommentVNode","filteredNodes","length","_hoisted_3","_hoisted_4","_createTextVNode","nodeName","_ctx","node","name","total_memory_mb","nodeFreeMemories"],"sources":["D:\\develop\\vue-flask-dashboard\\front-end\\src\\views\\Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport { onMounted, onUnmounted, computed, ref} from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \")\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)))\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  const memories = {};\r\n  filteredNodes.value.forEach(node => {\r\n    // 여기에서 각 노드의 메모리 정보를 메모리 객체에 저장하고 바로 로그를 출력\r\n    const memory = store.getters.getNodeMemory(node.name) || 0;\r\n    memories[node.name] = memory;\r\n    console.log(\"남은 메모리 가져오는 중: \", node.name, memory);\r\n  });\r\n  return memories;\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n  sessionStorage.removeItem('selectedNodeNames'); // Clear the selected nodes\r\n  store.commit('clearSelectedProjectNodeNames'); // Clear the Vuex state\r\n});\r\n\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <!-- Render this div only if there are selected nodes -->\r\n    <div v-if=\"filteredNodes.length > 0\" class=\"memory-usage-header\">\r\n      <h2>메모리 사용량</h2>\r\n        class=\"memory-gauge-container\"\r\n        v-for=\"node in filteredNodes\"\r\n        :key=\"node.id\"\r\n      >\r\n        <MemoryGauge\r\n          :nodeName=\"node.name\"\r\n          :total-size=\"node.total_memory_mb\"\r\n          :remaining-size=\"nodeFreeMemories[node.name]\"\r\n        />\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Ensure that items can wrap */\r\n  align-items: flex-start; /* Align items to the start of the flex container */\r\n  justify-content: flex-start; /* Align items to the start on the main axis */\r\n  gap: 20px; /* Adds space between items */\r\n  padding: 20px; /* Add padding inside the dashboard container */\r\n}\r\n\r\n.project-list-container {\r\n  flex-basis: 100%; /* Make the ProjectList take full width */\r\n  max-width: 100%; /* Ensure it does not exceed the width of the container */\r\n}\r\n.memory-gauge-container {\r\n  flex: 1; /* Allow MemoryGauge components to grow and take available space */\r\n  min-width: calc(50% - 40px); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(50% - 40px); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.memory-usage-header h2 {\r\n    text-align: center;\r\n    margin-top: 20px;\r\n  }\r\n\r\n.node-info {\r\n  margin-bottom: 20px;\r\n}\r\n.memory-info {\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n</style>"],"mappings":";;EAiEOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAwB;;EAlEvCC,GAAA;EAsEyCD,KAAK,EAAC;;gCACzCE,mBAAA,CAAgB,YAAZ,SAAO;;uBANfC,mBAAA,CAiBQ,OAjBRC,UAiBQ,GAhBNF,mBAAA,CAEM,OAFNG,UAEM,GADJC,YAAA,CAAeC,MAAA,iB,GAEjBC,mBAAA,sDAAyD,EAC9CD,MAAA,CAAAE,aAAa,CAACC,MAAM,Q,cAA/BP,mBAAA,CAWQ,OAXRQ,UAWQ,GAVNC,UAAgB,EAvEtBC,gBAAA,CAuEsB,uFAKd,GAAAP,YAAA,CAIEC,MAAA;IAHCO,QAAQ,EAAEC,IAAA,CAAAC,IAAI,CAACC,IAAI;IACnB,YAAU,EAAEF,IAAA,CAAAC,IAAI,CAACE,eAAe;IAChC,gBAAc,EAAEX,MAAA,CAAAY,gBAAgB,CAACJ,IAAA,CAAAC,IAAI,CAACC,IAAI;6EA/ErDT,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}