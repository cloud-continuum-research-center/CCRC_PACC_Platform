{"ast":null,"code":"import { createStore } from \"vuex\";\nimport axios from \"axios\";\nexport default createStore({\n  state: {\n    hideConfigButton: false,\n    isPinned: false,\n    showConfig: false,\n    sidebarType: \"bg-white\",\n    isRTL: false,\n    mcolor: \"\",\n    darkMode: false,\n    isNavFixed: false,\n    isAbsolute: false,\n    showNavs: true,\n    showSidenav: true,\n    showNavbar: true,\n    showFooter: true,\n    showMain: true,\n    layout: \"default\",\n    authToken: sessionStorage.getItem(\"authToken\") || null,\n    userEmail: sessionStorage.getItem(\"userEmail\") || null,\n    // 변경: 초기 상태 설정\n    models: [],\n    datasets: [],\n    projects: [] // Add a projects array to your state\n  },\n  mutations: {\n    toggleConfigurator(state) {\n      state.showConfig = !state.showConfig;\n    },\n    sidebarMinimize(state) {\n      let sidenav_show = document.querySelector(\"#app\");\n      if (state.isPinned) {\n        sidenav_show.classList.add(\"g-sidenav-hidden\");\n        sidenav_show.classList.remove(\"g-sidenav-pinned\");\n        state.isPinned = false;\n      } else {\n        sidenav_show.classList.add(\"g-sidenav-pinned\");\n        sidenav_show.classList.remove(\"g-sidenav-hidden\");\n        state.isPinned = true;\n      }\n    },\n    sidebarType(state, payload) {\n      state.sidebarType = payload;\n    },\n    navbarFixed(state) {\n      if (state.isNavFixed === false) {\n        state.isNavFixed = true;\n      } else {\n        state.isNavFixed = false;\n      }\n    },\n    setAuthToken(state, token) {\n      state.authToken = token;\n      sessionStorage.setItem(\"authToken\", token);\n    },\n    setUserEmail(state, email) {\n      state.userEmail = email;\n      sessionStorage.setItem(\"userEmail\", email); // 변경: 이메일 세션 스토리지에 저장\n    },\n    clearAuthToken(state) {\n      state.authToken = null;\n      state.userEmail = null;\n      sessionStorage.removeItem(\"authToken\");\n      sessionStorage.removeItem(\"userEmail\"); // 변경: 이메일 세션 스토리지에서 삭제\n    },\n    // 백엔드에서 모델, 데이터셋 자료 받아옴\n    setModels(state, models) {\n      state.models = models;\n    },\n    setDatasets(state, datasets) {\n      state.datasets = datasets;\n    },\n    // 프로젝트 db에서 사용자 프로젝트 가져옴 \n    setProjects(state, projects) {\n      state.projects = projects;\n    }\n  },\n  actions: {\n    toggleSidebarColor({\n      commit\n    }, payload) {\n      commit(\"sidebarType\", payload);\n    },\n    signin({\n      commit\n    }, credentials) {\n      return new Promise((resolve, reject) => {\n        axios.post(\"http://localhost:5000/api/signin\", credentials).then(response => {\n          commit(\"setAuthToken\", response.data.access_token);\n          commit(\"setUserEmail\", response.data.email); // 이메일 저장\n          resolve(); // Resolve the promise indicating success\n        }).catch(error => {\n          console.error(\"Signin Error:\", error);\n          reject(error); // Reject the promise indicating failure\n        });\n      });\n    },\n    logout({\n      commit\n    }) {\n      commit(\"clearAuthToken\");\n    },\n    async fetchModels({\n      commit\n    }) {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/data/models\");\n        commit(\"setModels\", response.data);\n      } catch (error) {\n        console.error(\"Error fetching models:\", error);\n      }\n    },\n    async fetchDatasets({\n      commit\n    }) {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/data/datasets\");\n        commit(\"setDatasets\", response.data);\n      } catch (error) {\n        console.error(\"Error fetching datasets:\", error);\n      }\n    },\n    fetchProjects({\n      commit,\n      state\n    }) {\n      axios.post(\"http://localhost:5000/api/data/projects\", {\n        email: state.userEmail // send the stored email\n      }, {\n        headers: {\n          Authorization: `Bearer ${state.authToken}` // send the stored authToken\n        }\n      }).then(response => {\n        commit(\"setProjects\", response.data); // commit the projects to the state\n      }).catch(error => {\n        console.error(\"Error fetching projects:\", error);\n      });\n    }\n  },\n  getters: {\n    userProjects: state => state.projects // Add a getter for the projects\n  }\n});","map":{"version":3,"names":["createStore","axios","state","hideConfigButton","isPinned","showConfig","sidebarType","isRTL","mcolor","darkMode","isNavFixed","isAbsolute","showNavs","showSidenav","showNavbar","showFooter","showMain","layout","authToken","sessionStorage","getItem","userEmail","models","datasets","projects","mutations","toggleConfigurator","sidebarMinimize","sidenav_show","document","querySelector","classList","add","remove","payload","navbarFixed","setAuthToken","token","setItem","setUserEmail","email","clearAuthToken","removeItem","setModels","setDatasets","setProjects","actions","toggleSidebarColor","commit","signin","credentials","Promise","resolve","reject","post","then","response","data","access_token","catch","error","console","logout","fetchModels","get","fetchDatasets","fetchProjects","headers","Authorization","getters","userProjects"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\r\nimport axios from \"axios\";\r\n\r\nexport default createStore({\r\n  state: {\r\n    hideConfigButton: false,\r\n    isPinned: false,\r\n    showConfig: false,\r\n    sidebarType: \"bg-white\",\r\n    isRTL: false,\r\n    mcolor: \"\",\r\n    darkMode: false,\r\n    isNavFixed: false,\r\n    isAbsolute: false,\r\n    showNavs: true,\r\n    showSidenav: true,\r\n    showNavbar: true,\r\n    showFooter: true,\r\n    showMain: true,\r\n    layout: \"default\",\r\n    authToken: sessionStorage.getItem(\"authToken\") || null,\r\n    userEmail: sessionStorage.getItem(\"userEmail\") || null, // 변경: 초기 상태 설정\r\n    models: [],\r\n    datasets: [],\r\n    projects: [], // Add a projects array to your state\r\n  },\r\n  mutations: {\r\n    toggleConfigurator(state) {\r\n      state.showConfig = !state.showConfig;\r\n    },\r\n    sidebarMinimize(state) {\r\n      let sidenav_show = document.querySelector(\"#app\");\r\n      if (state.isPinned) {\r\n        sidenav_show.classList.add(\"g-sidenav-hidden\");\r\n        sidenav_show.classList.remove(\"g-sidenav-pinned\");\r\n        state.isPinned = false;\r\n      } else {\r\n        sidenav_show.classList.add(\"g-sidenav-pinned\");\r\n        sidenav_show.classList.remove(\"g-sidenav-hidden\");\r\n        state.isPinned = true;\r\n      }\r\n    },\r\n    sidebarType(state, payload) {\r\n      state.sidebarType = payload;\r\n    },\r\n    navbarFixed(state) {\r\n      if (state.isNavFixed === false) {\r\n        state.isNavFixed = true;\r\n      } else {\r\n        state.isNavFixed = false;\r\n      }\r\n    },\r\n    setAuthToken(state, token) {\r\n      state.authToken = token;\r\n      sessionStorage.setItem(\"authToken\", token);\r\n    },\r\n    setUserEmail(state, email) {\r\n      state.userEmail = email;\r\n      sessionStorage.setItem(\"userEmail\", email); // 변경: 이메일 세션 스토리지에 저장\r\n    },\r\n    clearAuthToken(state) {\r\n      state.authToken = null;\r\n      state.userEmail = null;\r\n      sessionStorage.removeItem(\"authToken\");\r\n      sessionStorage.removeItem(\"userEmail\"); // 변경: 이메일 세션 스토리지에서 삭제\r\n    },\r\n    // 백엔드에서 모델, 데이터셋 자료 받아옴\r\n    setModels(state, models) {\r\n      state.models = models;\r\n    },\r\n    setDatasets(state, datasets) {\r\n      state.datasets = datasets;\r\n    },\r\n    // 프로젝트 db에서 사용자 프로젝트 가져옴 \r\n    setProjects(state, projects) {\r\n      state.projects = projects;\r\n    },\r\n  },\r\n  actions: {\r\n    toggleSidebarColor({ commit }, payload) {\r\n      commit(\"sidebarType\", payload);\r\n    },\r\n    signin({ commit }, credentials) {\r\n      return new Promise((resolve, reject) => {\r\n        axios\r\n          .post(\"http://localhost:5000/api/signin\", credentials)\r\n          .then((response) => {\r\n            commit(\"setAuthToken\", response.data.access_token);\r\n            commit(\"setUserEmail\", response.data.email); // 이메일 저장\r\n            resolve(); // Resolve the promise indicating success\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Signin Error:\", error);\r\n            reject(error); // Reject the promise indicating failure\r\n          });\r\n      });\r\n    },\r\n    logout({ commit }) {\r\n      commit(\"clearAuthToken\");\r\n    },\r\n    async fetchModels({ commit }) {\r\n      try {\r\n        const response = await axios.get(\r\n          \"http://localhost:5000/api/data/models\",\r\n        );\r\n        commit(\"setModels\", response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching models:\", error);\r\n      }\r\n    },\r\n    async fetchDatasets({ commit }) {\r\n      try {\r\n        const response = await axios.get(\r\n          \"http://localhost:5000/api/data/datasets\",\r\n        );\r\n        commit(\"setDatasets\", response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching datasets:\", error);\r\n      }\r\n    },\r\n    fetchProjects({ commit, state }) {\r\n      axios\r\n        .post(\"http://localhost:5000/api/data/projects\", {\r\n          email: state.userEmail, // send the stored email\r\n        }, {\r\n          headers: {\r\n            Authorization: `Bearer ${state.authToken}`, // send the stored authToken\r\n          },\r\n        })\r\n        .then((response) => {\r\n          commit(\"setProjects\", response.data); // commit the projects to the state\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching projects:\", error);\r\n        });\r\n    },\r\n  },\r\n  getters: {\r\n    userProjects: (state) => state.projects, // Add a getter for the projects\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}