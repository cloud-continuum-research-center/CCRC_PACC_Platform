{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-44587f60\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"node-selector-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"node-header\"\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"학습 노드 선택\")], -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"node-content\"\n};\nconst _hoisted_4 = {\n  class: \"node-list\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"node-description\"\n};\nconst _hoisted_7 = {\n  class: \"node-details\"\n};\nconst _hoisted_8 = {\n  key: 0\n};\nconst _hoisted_9 = {\n  key: 1\n};\nconst _hoisted_10 = {\n  key: 1,\n  class: \"node-description\"\n};\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"학습 노드를 선택해주세요.\", -1 /* HOISTED */));\nconst _hoisted_12 = [_hoisted_11];\nconst _hoisted_13 = {\n  class: \"selected-nodes\"\n};\nconst _hoisted_14 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Header above the entire container \"), _hoisted_2, _createCommentVNode(\" Main content area for node selection \"), _createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Node list on the far left \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.nodes, node => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: node.id,\n      onClick: $event => $setup.toggleNodeSelection(node),\n      class: _normalizeClass({\n        selected: $setup.isNodeSelected(node),\n        unselectable: node.status !== 0\n      })\n    }, _toDisplayString(node.name), 11 /* TEXT, CLASS, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))])]), $setup.selectedNode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"h3\", null, _toDisplayString($setup.selectedNode.name) + \" 설명\", 1 /* TEXT */), _createCommentVNode(\" Display additional node details \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"p\", null, \"CPU 코어 갯수: \" + _toDisplayString($setup.selectedNode.cpu_core_count), 1 /* TEXT */), _createElementVNode(\"p\", null, \"총 메모리 크기: \" + _toDisplayString($setup.selectedNode.total_memory_mb) + \" MB\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"총 디스크 크기: \" + _toDisplayString($setup.selectedNode.total_disk_mb) + \" MB\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"상태: \" + _toDisplayString($setup.nodeStatusDescription($setup.selectedNode.status)), 1 /* TEXT */), $setup.selectedNode.instance ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \" 인스턴스: \" + _toDisplayString($setup.selectedNode.instance), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $setup.selectedNode.gpu_info ? (_openBlock(), _createElementBlock(\"p\", _hoisted_9, \" GPU 정보: \" + _toDisplayString($setup.selectedNode.gpu_info), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [..._hoisted_12])), _createCommentVNode(\" List of selected nodes on the far right \"), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"h3\", null, _toDisplayString($setup.sortedSelectedNodes.length > 0 ? '선택된 노드' : '선택된 노드가 없습니다.'), 1 /* TEXT */), $setup.sortedSelectedNodes.length > 0 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_14, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sortedSelectedNodes, node => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: node.id\n    }, _toDisplayString(node.name), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_hoisted_11","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","$setup","nodes","node","id","onClick","$event","toggleNodeSelection","_normalizeClass","selected","isNodeSelected","unselectable","status","name","_hoisted_5","selectedNode","_hoisted_6","_toDisplayString","_hoisted_7","cpu_core_count","total_memory_mb","total_disk_mb","nodeStatusDescription","instance","_hoisted_8","gpu_info","_hoisted_9","_hoisted_10","_hoisted_12","_hoisted_13","sortedSelectedNodes","length","_hoisted_14"],"sources":["D:\\Git\\ITRC_Front\\vue-flask-dashboard\\front-end\\src\\views\\components\\NodeSelector.vue"],"sourcesContent":["<template>\n  <div class=\"node-selector-container\">\n    <!-- Header above the entire container -->\n    <div class=\"node-header\">\n      <h2>학습 노드 선택</h2>\n    </div>\n    <!-- Main content area for node selection -->\n    <div class=\"node-content\">\n      <!-- Node list on the far left -->\n      <div class=\"node-list\">\n        <ul>\n          <li\n  v-for=\"node in nodes\"\n  :key=\"node.id\"\n  @click=\"toggleNodeSelection(node)\"\n  :class=\"{ selected: isNodeSelected(node), unselectable: node.status !== 0 }\"\n>\n  {{ node.name }}\n</li>\n\n        </ul>\n      </div>\n\n      <div class=\"node-description\" v-if=\"selectedNode\">\n        <h3>{{ selectedNode.name }} 설명</h3>\n        <!-- Display additional node details -->\n        <div class=\"node-details\">\n          <p>CPU 코어 갯수: {{ selectedNode.cpu_core_count }}</p>\n          <p>총 메모리 크기: {{ selectedNode.total_memory_mb }} MB</p>\n          <p>총 디스크 크기: {{ selectedNode.total_disk_mb }} MB</p>\n          <p>상태: {{ nodeStatusDescription(selectedNode.status) }}</p>\n          <p v-if=\"selectedNode.instance\">\n            인스턴스: {{ selectedNode.instance }}\n          </p>\n          <p v-if=\"selectedNode.gpu_info\">\n            GPU 정보: {{ selectedNode.gpu_info }}\n          </p>\n\n          </div>\n      </div>\n      <div class=\"node-description\" v-else>\n        <h3>학습 노드를 선택해주세요.</h3>\n      </div>\n\n      <!-- List of selected nodes on the far right -->\n      <div class=\"selected-nodes\">\n        <h3>{{ sortedSelectedNodes.length > 0 ? '선택된 노드' : '선택된 노드가 없습니다.' }}</h3>\n        <ul v-if=\"sortedSelectedNodes.length > 0\">\n          <li v-for=\"node in sortedSelectedNodes\" :key=\"node.id\">\n            {{ node.name }}\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, defineProps, defineEmits, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\n\nconst store = useStore();\n\nconst nodes = computed(() => {\n  const unsortedNodes = store.getters.userNodes || [];\n  return unsortedNodes.sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically by name\n});\n\nconst props = defineProps({\n  modelValue: {\n    type: Array,\n    default: () => [], // Provide a default empty array\n  },\n});\n\nconst isNodeSelected = (node) => {\n  return props.modelValue.some(\n    (selectedNode) => selectedNode.node_id === node.node_id,\n  );\n};\n\nconst emit = defineEmits([\"update:modelValue\"]);\n\nonMounted(async () => {\n  await store.dispatch(\"fetchNodes\"); // 노드 정보 가져와서 마운트하기.\n});\n\nconst selectedNode = ref(null);\n\nconst toggleNodeSelection = (node) => {\n  if (node.status !== 0) {\n    // If the node is not in a waiting state, display its details without selecting it\n    selectedNode.value = node;\n    console.error(\"Node is not in a waiting state and cannot be selected.\");\n    return; // Exit early without changing the selection\n  }\n\n  const isSelected = props.modelValue.some(\n    (selectedNode) => selectedNode.node_id === node.node_id,\n  );\n  let newSelectedNodes = isSelected\n    ? props.modelValue.filter(\n        (selectedNode) => selectedNode.node_id !== node.node_id,\n      )\n    : [...props.modelValue, node];\n\n  emit(\"update:modelValue\", newSelectedNodes);\n\n  // Set or unset the selectedNode for displaying details\n  selectedNode.value = isSelected ? null : node;\n};\n\nconst nodeStatusDescription = (status) => {\n  const statusMap = {\n    0: \"대기중\",\n    1: \"학습중\",\n    2: \"학습완료\",\n  };\n  return statusMap[status] || \"Unknown status\";\n};\n\nconst sortedSelectedNodes = computed(() => {\n  if (!Array.isArray(props.modelValue)) {\n    return []; // Return an empty array if props.modelValue is not an array\n  }\n  // Proceed with sorting if props.modelValue is an array\n  return [...props.modelValue].sort((a, b) => a.name.localeCompare(b.name));\n});\n</script>\n\n<style scoped>\n.node-list li:not(.unselectable):hover {\n  background-color: #e3f2fd;\n}\n\n/* 선택할 수 없는 노드의 스타일 */\n.node-list li.unselectable {\n  background-color: #FF7F50; /* Coral */\n  color: #333;\n  font-weight: bold;\n  cursor: not-allowed; /* 마우스 커서 변경 */\n}\n\n.node-description h3\n{\n  font-size: 30px;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n.node-selector-container {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #e0e0e0;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n.node-description p {\n  font-size: 19px; /* 폰트 사이즈를 25px에서 16px로 변경 */\n  margin-bottom: 5px; /* 위아래 간격을 적절하게 조절 */\n  font-weight: bold;\n}\n\n.node-header {\n  padding: 15px 20px;\n  background-color: #f8f8f8;\n  text-align: left;\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  border-bottom: 1px solid #ddd;\n}\n\n.node-header h2 {\n  margin: 0;\n  font-size: 34px;\n}\n\n.node-content {\n  display: flex;\n  flex-wrap: wrap; /* Enables the content to wrap onto the next line as needed */\n}\n\n.node-list,\n.node-description,\n.selected-nodes {\n  padding: 20px;\n  flex-basis: 33.3333%;\n  flex-grow: 1;\n  border-right: 1px solid #ddd;\n}\n\n.node-list ul,\n.selected-nodes ul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n.node-list li,\n.selected-nodes li {\n  padding: 10px;\n  cursor: pointer;\n  border-bottom: 1px solid #eee;\n  transition: background-color 0.3s;\n  font-size: 20px;\n  color: #333;\n  font-weight: bold;\n}\n\n\n.node-list li:hover,\n.node-list li.selected,\n.selected-nodes li:hover {\n  background-color: #e3f2fd;\n}\n\n/* Remove border from the last element of the main content */\n.selected-nodes {\n  border-right: none;\n}\n\n@media (max-width: 768px) {\n  .node-content {\n    flex-direction: column;\n  }\n\n  .node-list,\n  .node-description,\n  .selected-nodes {\n    border-right: none;\n    border-bottom: 1px solid #ddd;\n    flex-basis: auto;\n  }\n\n\n\n  .selected-nodes {\n    border-bottom: none;\n  }\n}\n\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAyB;gEAElCC,mBAAA,CAEM;EAFDD,KAAK,EAAC;AAAa,I,aACtBC,mBAAA,CAAiB,YAAb,UAAQ,E;;EAGTD,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAW;mBAT5B;;EAAAE,GAAA;EAuBWF,KAAK,EAAC;;;EAGJA,KAAK,EAAC;AAAc;;EA1BjCE,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EAwCWF,KAAK,EAAC;;iEACTC,mBAAA,CAAuB,YAAnB,gBAAc;qBAAlBE,WAAuB,C;;EAIpBH,KAAK,EAAC;AAAgB;;EA7CjCE,GAAA;AAAA;;uBACEE,mBAAA,CAqDM,OArDNC,UAqDM,GApDJC,mBAAA,uCAA0C,EAC1CC,UAEM,EACND,mBAAA,0CAA6C,EAC7CL,mBAAA,CA8CM,OA9CNO,UA8CM,GA7CJF,mBAAA,+BAAkC,EAClCL,mBAAA,CAYM,OAZNQ,UAYM,GAXJR,mBAAA,CAUK,c,kBATHG,mBAAA,CAOLM,SAAA,QAlBLC,WAAA,CAYiBC,MAAA,CAAAC,KAAK,EAAbC,IAAI;yBADHV,mBAAA,CAOL;MALFF,GAAG,EAAEY,IAAI,CAACC,EAAE;MACZC,OAAK,EAAAC,MAAA,IAAEL,MAAA,CAAAM,mBAAmB,CAACJ,IAAI;MAC/Bd,KAAK,EAfRmB,eAAA;QAAAC,QAAA,EAesBR,MAAA,CAAAS,cAAc,CAACP,IAAI;QAAAQ,YAAA,EAAiBR,IAAI,CAACS,MAAM;MAAA;wBAEhET,IAAI,CAACU,IAAI,gCAjBdC,UAAA;sCAuB0Cb,MAAA,CAAAc,YAAY,I,cAAhDtB,mBAAA,CAgBM,OAhBNuB,UAgBM,GAfJ1B,mBAAA,CAAmC,YAAA2B,gBAAA,CAA5BhB,MAAA,CAAAc,YAAY,CAACF,IAAI,IAAG,KAAG,iBAC9BlB,mBAAA,qCAAwC,EACxCL,mBAAA,CAYQ,OAZR4B,UAYQ,GAXN5B,mBAAA,CAAmD,WAAhD,aAAW,GAAA2B,gBAAA,CAAGhB,MAAA,CAAAc,YAAY,CAACI,cAAc,kBAC5C7B,mBAAA,CAAsD,WAAnD,YAAU,GAAA2B,gBAAA,CAAGhB,MAAA,CAAAc,YAAY,CAACK,eAAe,IAAG,KAAG,iBAClD9B,mBAAA,CAAoD,WAAjD,YAAU,GAAA2B,gBAAA,CAAGhB,MAAA,CAAAc,YAAY,CAACM,aAAa,IAAG,KAAG,iBAChD/B,mBAAA,CAA2D,WAAxD,MAAI,GAAA2B,gBAAA,CAAGhB,MAAA,CAAAqB,qBAAqB,CAACrB,MAAA,CAAAc,YAAY,CAACH,MAAM,mBAC1CX,MAAA,CAAAc,YAAY,CAACQ,QAAQ,I,cAA9B9B,mBAAA,CAEI,KAjCd+B,UAAA,EA+B0C,SACxB,GAAAP,gBAAA,CAAGhB,MAAA,CAAAc,YAAY,CAACQ,QAAQ,oBAhC1C5B,mBAAA,gBAkCmBM,MAAA,CAAAc,YAAY,CAACU,QAAQ,I,cAA9BhC,mBAAA,CAEI,KApCdiC,UAAA,EAkC0C,WACtB,GAAAT,gBAAA,CAAGhB,MAAA,CAAAc,YAAY,CAACU,QAAQ,oBAnC5C9B,mBAAA,e,sBAwCMF,mBAAA,CAEM,OAFNkC,WAEM,EA1CZ,IAAAC,WAAA,KA4CMjC,mBAAA,6CAAgD,EAChDL,mBAAA,CAOM,OAPNuC,WAOM,GANJvC,mBAAA,CAA0E,YAAA2B,gBAAA,CAAnEhB,MAAA,CAAA6B,mBAAmB,CAACC,MAAM,mDACvB9B,MAAA,CAAA6B,mBAAmB,CAACC,MAAM,Q,cAApCtC,mBAAA,CAIK,MAnDbuC,WAAA,I,kBAgDUvC,mBAAA,CAEKM,SAAA,QAlDfC,WAAA,CAgD6BC,MAAA,CAAA6B,mBAAmB,EAA3B3B,IAAI;yBAAfV,mBAAA,CAEK;MAFoCF,GAAG,EAAEY,IAAI,CAACC;wBAC9CD,IAAI,CAACU,IAAI;sCAjDxBlB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}