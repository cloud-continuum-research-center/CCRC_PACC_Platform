{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\nimport DiskGauge from \"./components/DiskGaugeComponent.vue\";\nimport GpuTemperatureLineChart from \"./components/GpuTemperatureLineChart.vue\";\nimport { onMounted, onUnmounted, computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const filteredNodes = computed(() => {\n      const allNodes = store.getters.userNodes;\n      const selectedNodeNames = store.state.selectedProjectNodeNames;\n      console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \");\n      console.log(allNodes.filter(node => selectedNodeNames.includes(node.name)));\n      return allNodes.filter(node => selectedNodeNames.includes(node.name));\n    });\n\n    // 남은 메모리 정보를 저장하는 객체\n    const nodeFreeMemories = computed(() => {\n      return filteredNodes.value.reduce((acc, node) => {\n        acc[node.name] = store.getters.getNodeMemory(node.name) || 0;\n        return acc;\n      }, {});\n    });\n    const nodeFreeDisk = computed(() => {\n      return filteredNodes.value.reduce((acc, node) => {\n        acc[node.name] = store.getters.getNodeDisk(node.name) || 0;\n        return acc;\n      }, {});\n    });\n    onMounted(() => {\n      // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // 실시간 데이터 가져오기를 시작합니다.\n        startFetchingNodeMonitoringData();\n      }\n    });\n\n    // 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\n    onUnmounted(() => {\n      stopFetchingNodeMonitoringData();\n    });\n\n    // 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\n    const dataInterval = ref(null);\n    function startFetchingNodeMonitoringData() {\n      stopFetchingNodeMonitoringData(); // Prevent multiple intervals\n      dataInterval.value = setInterval(() => {\n        store.dispatch(\"fetchData\");\n      }, 1000);\n    }\n    function stopFetchingNodeMonitoringData() {\n      if (dataInterval.value) {\n        clearInterval(dataInterval.value);\n        dataInterval.value = null;\n      }\n    }\n    const __returned__ = {\n      store,\n      filteredNodes,\n      nodeFreeMemories,\n      nodeFreeDisk,\n      dataInterval,\n      startFetchingNodeMonitoringData,\n      stopFetchingNodeMonitoringData,\n      ProjectList,\n      MemoryGauge,\n      DiskGauge,\n      GpuTemperatureLineChart,\n      onMounted,\n      onUnmounted,\n      computed,\n      ref,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","MemoryGauge","DiskGauge","GpuTemperatureLineChart","onMounted","onUnmounted","computed","ref","useStore","store","filteredNodes","allNodes","getters","userNodes","selectedNodeNames","state","selectedProjectNodeNames","console","log","filter","node","includes","name","nodeFreeMemories","value","reduce","acc","getNodeMemory","nodeFreeDisk","getNodeDisk","authToken","userEmail","dispatch","startFetchingNodeMonitoringData","stopFetchingNodeMonitoringData","dataInterval","setInterval","clearInterval"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nimport DiskGauge from \"./components/DiskGaugeComponent.vue\";\r\nimport GpuTemperatureLineChart from \"./components/GpuTemperatureLineChart.vue\";\r\nimport { onMounted, onUnmounted, computed, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst filteredNodes = computed(() => {\r\n  const allNodes = store.getters.userNodes;\r\n  const selectedNodeNames = store.state.selectedProjectNodeNames;\r\n  console.log(\"선택된 리스트의 노드 스팩 정보 가져오는 중 \");\r\n  console.log(allNodes.filter((node) => selectedNodeNames.includes(node.name)));\r\n  return allNodes.filter((node) => selectedNodeNames.includes(node.name));\r\n});\r\n\r\n// 남은 메모리 정보를 저장하는 객체\r\nconst nodeFreeMemories = computed(() => {\r\n  return filteredNodes.value.reduce((acc, node) => {\r\n    acc[node.name] = store.getters.getNodeMemory(node.name) || 0;\r\n    return acc;\r\n  }, {});\r\n});\r\n\r\nconst nodeFreeDisk = computed(() => {\r\n  return filteredNodes.value.reduce((acc, node) => {\r\n    acc[node.name] = store.getters.getNodeDisk(node.name) || 0;\r\n    return acc;\r\n  }, {});\r\n});\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingNodeMonitoringData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingNodeMonitoringData();\r\n});\r\n\r\n// 실시간 데이터를 Store에 주기적으로 가져오기 위한 로직입니다.\r\nconst dataInterval = ref(null);\r\n\r\nfunction startFetchingNodeMonitoringData() {\r\n  stopFetchingNodeMonitoringData(); // Prevent multiple intervals\r\n  dataInterval.value = setInterval(() => {\r\n    store.dispatch(\"fetchData\");\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingNodeMonitoringData() {\r\n  if (dataInterval.value) {\r\n    clearInterval(dataInterval.value);\r\n    dataInterval.value = null;\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"project-list-container\">\r\n      <ProjectList />\r\n    </div>\r\n    <!-- Memory Usage Section -->\r\n    <div v-if=\"filteredNodes.length > 0\">\r\n      <h2 class=\"memory-gauge-header\">메모리 사용량</h2>\r\n      <div class=\"memory-gauge-wrapper\">\r\n        <div\r\n          class=\"memory-gauge-container\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"node.id\"\r\n        >\r\n          <MemoryGauge\r\n            :nodeName=\"node.name\"\r\n            :total-size=\"node.total_memory_mb\"\r\n            :remaining-size=\"nodeFreeMemories[node.name]\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Disk Usage Section -->\r\n    <div v-if=\"filteredNodes.length > 0\">\r\n      <h2 class=\"disk-gauge-header\">디스크 사용량</h2>\r\n      <div class=\"disk-gauge-wrapper\">\r\n        <div\r\n          class=\"disk-gauge-container\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"node.id\"\r\n        >\r\n          <DiskGauge\r\n            :nodeName=\"node.name\"\r\n            :total-size=\"node.total_disk_mb\"\r\n            :remaining-size=\"nodeFreeDisk[node.name]\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- GPU Temperature Section -->\r\n    <div v-if=\"filteredNodes.length > 0\">\r\n      <h2 class=\"gpu-temp-header\">GPU 온도</h2>\r\n      <div class=\"gpu-temp-wrapper\">\r\n        <div\r\n          class=\"gpu-temp-container\"\r\n          v-for=\"node in filteredNodes\"\r\n          :key=\"`gpu-${node.id}`\"\r\n        >\r\n          <GpuTemperatureLineChart :nodeName=\"node.name\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<style>\r\n.dashboard {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.project-list-container {\r\n  flex-basis: 100%;\r\n  max-width: 100%;\r\n}\r\n\r\n.memory-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.memory-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.memory-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.disk-gauge-header {\r\n  width: 100%; /* Ensures the header spans the full width */\r\n  text-align: center; /* Center the text */\r\n  margin-top: 0;\r\n  margin-bottom: 20px; /* Space before the gauges */\r\n}\r\n\r\n.disk-gauge-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap; /* Allows gauge containers to wrap */\r\n  width: 100%; /* Takes full width */\r\n}\r\n\r\n.disk-gauge-container {\r\n  flex: 1;\r\n  min-width: calc(\r\n    50% - 30px\r\n  ); /* Minimum width for MemoryGauge components, accounting for the gap */\r\n  max-width: calc(\r\n    50% - 30px\r\n  ); /* Maximum width for MemoryGauge components, accounting for the gap */\r\n}\r\n\r\n.gpu-temp-header {\r\n  width: 100%;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.gpu-temp-wrapper {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n\r\n.gpu-temp-container {\r\n  flex: 1;\r\n  min-width: calc(50% - 30px);\r\n  max-width: calc(50% - 30px);\r\n}\r\n</style>\r\n"],"mappings":"AACA,OAAOA,WAAW,MAAM,+BAA+B;AACvD,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,OAAOC,SAAS,MAAM,qCAAqC;AAC3D,OAAOC,uBAAuB,MAAM,0CAA0C;AAC9E,SAASC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,GAAG,QAAQ,KAAK;AAC3D,SAASC,QAAQ,QAAQ,MAAM;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IAExB,MAAME,aAAa,GAAGJ,QAAQ,CAAC,MAAM;MACnC,MAAMK,QAAQ,GAAGF,KAAK,CAACG,OAAO,CAACC,SAAS;MACxC,MAAMC,iBAAiB,GAAGL,KAAK,CAACM,KAAK,CAACC,wBAAwB;MAC9DC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxCD,OAAO,CAACC,GAAG,CAACP,QAAQ,CAACQ,MAAM,CAAEC,IAAI,IAAKN,iBAAiB,CAACO,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;MAC7E,OAAOX,QAAQ,CAACQ,MAAM,CAAEC,IAAI,IAAKN,iBAAiB,CAACO,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC;IACzE,CAAC,CAAC;;IAEF;IACA,MAAMC,gBAAgB,GAAGjB,QAAQ,CAAC,MAAM;MACtC,OAAOI,aAAa,CAACc,KAAK,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEN,IAAI,KAAK;QAC/CM,GAAG,CAACN,IAAI,CAACE,IAAI,CAAC,GAAGb,KAAK,CAACG,OAAO,CAACe,aAAa,CAACP,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC;QAC5D,OAAOI,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC,CAAC;IAEF,MAAME,YAAY,GAAGtB,QAAQ,CAAC,MAAM;MAClC,OAAOI,aAAa,CAACc,KAAK,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEN,IAAI,KAAK;QAC/CM,GAAG,CAACN,IAAI,CAACE,IAAI,CAAC,GAAGb,KAAK,CAACG,OAAO,CAACiB,WAAW,CAACT,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC;QAC1D,OAAOI,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC,CAAC;IAEFtB,SAAS,CAAC,MAAM;MACd;MACA,IAAIK,KAAK,CAACM,KAAK,CAACe,SAAS,IAAIrB,KAAK,CAACM,KAAK,CAACgB,SAAS,EAAE;QAClDtB,KAAK,CAACuB,QAAQ,CAAC,eAAe,CAAC;QAC/B;QACAC,+BAA+B,CAAC,CAAC;MACnC;IACF,CAAC,CAAC;;IAEF;IACA5B,WAAW,CAAC,MAAM;MAChB6B,8BAA8B,CAAC,CAAC;IAClC,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAY,GAAG5B,GAAG,CAAC,IAAI,CAAC;IAE9B,SAAS0B,+BAA+BA,CAAA,EAAG;MACzCC,8BAA8B,CAAC,CAAC,CAAC,CAAC;MAClCC,YAAY,CAACX,KAAK,GAAGY,WAAW,CAAC,MAAM;QACrC3B,KAAK,CAACuB,QAAQ,CAAC,WAAW,CAAC;MAC7B,CAAC,EAAE,IAAI,CAAC;IACV;IAEA,SAASE,8BAA8BA,CAAA,EAAG;MACxC,IAAIC,YAAY,CAACX,KAAK,EAAE;QACtBa,aAAa,CAACF,YAAY,CAACX,KAAK,CAAC;QACjCW,YAAY,CAACX,KAAK,GAAG,IAAI;MAC3B;IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}