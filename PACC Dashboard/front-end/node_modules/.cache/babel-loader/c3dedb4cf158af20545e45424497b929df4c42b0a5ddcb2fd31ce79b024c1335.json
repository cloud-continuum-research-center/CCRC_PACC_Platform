{"ast":null,"code":"import ProjectList from \"./components/ProjectsList.vue\";\nimport { onMounted, onUnmounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    onMounted(() => {\n      // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\n      if (store.state.authToken && store.state.userEmail) {\n        store.dispatch(\"fetchProjects\");\n        // 실시간 데이터 가져오기를 시작합니다.\n        startFetchingRealTimeData();\n      }\n    });\n\n    // 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\n    onUnmounted(() => {\n      stopFetchingRealTimeData();\n    });\n\n    // 실시간 데이터를 주기적으로 가져오기 위한 로직입니다.\n    const realTimeDataInterval = ref(null);\n    function startFetchingRealTimeData() {\n      // 1초마다 실시간 데이터를 가져오는 동작을 수행합니다.\n      realTimeDataInterval.value = setInterval(() => {\n        store.dispatch('fetchRealTimeData');\n      }, 1000);\n    }\n    function stopFetchingRealTimeData() {\n      clearInterval(realTimeDataInterval.value);\n    }\n    const __returned__ = {\n      store,\n      realTimeDataInterval,\n      startFetchingRealTimeData,\n      stopFetchingRealTimeData,\n      ProjectList,\n      onMounted,\n      onUnmounted,\n      ref,\n      get useStore() {\n        return useStore;\n      },\n      MemoryGauge\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ProjectList","onMounted","onUnmounted","ref","useStore","MemoryGauge","store","state","authToken","userEmail","dispatch","startFetchingRealTimeData","stopFetchingRealTimeData","realTimeDataInterval","value","setInterval","clearInterval"],"sources":["D:/develop/vue-flask-dashboard/front-end/src/views/Dashboard.vue"],"sourcesContent":["<script setup>\r\nimport ProjectList from \"./components/ProjectsList.vue\";\r\nimport { onMounted, onUnmounted, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport MemoryGauge from \"./components/MemoryGaugeComponent.vue\";\r\nconst store = useStore();\r\n\r\nonMounted(() => {\r\n  // 인증 토큰과 사용자 이메일이 있을 때만 프로젝트 목록을 가져옵니다.\r\n  if (store.state.authToken && store.state.userEmail) {\r\n    store.dispatch(\"fetchProjects\");\r\n    // 실시간 데이터 가져오기를 시작합니다.\r\n    startFetchingRealTimeData();\r\n  }\r\n});\r\n\r\n// 컴포넌트가 언마운트될 때 데이터 가져오기를 중단합니다.\r\nonUnmounted(() => {\r\n  stopFetchingRealTimeData();\r\n});\r\n\r\n// 실시간 데이터를 주기적으로 가져오기 위한 로직입니다.\r\nconst realTimeDataInterval = ref(null);\r\n\r\nfunction startFetchingRealTimeData() {\r\n  // 1초마다 실시간 데이터를 가져오는 동작을 수행합니다.\r\n  realTimeDataInterval.value = setInterval(() => {\r\n    store.dispatch('fetchRealTimeData');\r\n  }, 1000);\r\n}\r\n\r\nfunction stopFetchingRealTimeData() {\r\n  clearInterval(realTimeDataInterval.value);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"row\">\r\n    <!-- Project List component -->\r\n    <ProjectList />\r\n   <MemoryGauge />\r\n  </div>\r\n</template>\r\n"],"mappings":"AACA,OAAOA,WAAW,MAAM,+BAA+B;AACvD,SAASC,SAAS,EAAEC,WAAW,EAAEC,GAAG,QAAQ,KAAK;AACjD,SAASC,QAAQ,QAAQ,MAAM;AAC/B,OAAOC,WAAW,MAAM,uCAAuC;;;;;;;IAC/D,MAAMC,KAAK,GAAGF,QAAQ,CAAC,CAAC;IAExBH,SAAS,CAAC,MAAM;MACd;MACA,IAAIK,KAAK,CAACC,KAAK,CAACC,SAAS,IAAIF,KAAK,CAACC,KAAK,CAACE,SAAS,EAAE;QAClDH,KAAK,CAACI,QAAQ,CAAC,eAAe,CAAC;QAC/B;QACAC,yBAAyB,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC;;IAEF;IACAT,WAAW,CAAC,MAAM;MAChBU,wBAAwB,CAAC,CAAC;IAC5B,CAAC,CAAC;;IAEF;IACA,MAAMC,oBAAoB,GAAGV,GAAG,CAAC,IAAI,CAAC;IAEtC,SAASQ,yBAAyBA,CAAA,EAAG;MACnC;MACAE,oBAAoB,CAACC,KAAK,GAAGC,WAAW,CAAC,MAAM;QAC7CT,KAAK,CAACI,QAAQ,CAAC,mBAAmB,CAAC;MACrC,CAAC,EAAE,IAAI,CAAC;IACV;IAEA,SAASE,wBAAwBA,CAAA,EAAG;MAClCI,aAAa,CAACH,oBAAoB,CAACC,KAAK,CAAC;IAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}